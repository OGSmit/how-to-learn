%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: Adobe Illustrator Artwork
%%Creator: Adobe Illustrator(R) 24.2
%%For:  
%%CreationDate: 12/2/2021
%%BoundingBox: 0 0 847 400
%%HiResBoundingBox: 0 0 847 400
%%CropBox: 0 0 847 400
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 24.2.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 24.2.0 x490 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 60 8%%BeginData: 17301 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFF
%A8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FF
%CAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFF
%A8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FF
%CAFFA8FFCAFFA8FFCAFFA8A8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8
%CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8
%CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8
%CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8
%CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CACFA8FFCACFA8FFCACFA8FF
%CACFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACF
%A8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FF
%CACFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACF
%A8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCAA8CAA8
%CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8
%CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8
%CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8
%CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8
%CAA8CAA8CAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFF
%A8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FF
%CAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFF
%A8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FF
%CAFFA8FFCAFFA8FFCAFFA8FFCAA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8
%CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8
%CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8
%CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8
%CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFFFCACFA8FFCACFA8FF
%CACFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACF
%A8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FF
%CACFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACF
%A8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8A8
%CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8
%CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8
%CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8
%CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8
%CAA8CAA8CAA8CAFFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFF
%A8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FF
%CAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFF
%A8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FF
%CAFFA8FFCAFFA8FFCAFFA8FFCAFFA8A8CFA8CAA8CFA8CAA8CFA8CAA8CFA8
%CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8
%CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8
%CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8FFA8CFA8CAA8
%CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CACFA8FFCACFA8FF
%CACFA8FFCFFFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACF
%A8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCAFFCAFFCACFA8FFCACFA8FF
%CACFA8FFCACFA8FFCACFA8FFCAFFA8FFCACFA8FFCACFA8FFCACFA8FFCAFF
%CACF7DCAA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FF
%CAA8CAA8CAA8CAA8CAA8CAA8A152F827A1CACAA8CAA8CAA8CAA8CAA8CAA8
%CAA8CAA8CAA8CAA8CAA8CAA8CAA8FFA8CFA8CAA8CAA8CAA8CAA8CF7C7DA8
%FFCACAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA7C8C2CAA8CAA8CAA8CAA8
%CAA8CAA8CAA8CF7D52F8F876FFA8CAA8CAA8CAA8CAA8CAA8CAA8CFA8CAA8
%CAA8CAA8CAA8CAA8CAFFA8FFCAFFA8FFCAFFCAFFFD04F87DFFA8FFCAFFA8
%FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFA85127A1CFFFA8FFCA
%FFA8FF7DF8F87D7D7DCAFFCAFFA8FFCAFFA8FFCAFFA8FFCACAC2FD04C8FF
%CAFFA8FFCAFFA8FFCAFFA8FFA1F8F8204BA8CAFFCAFFA8FFCAFFA8FFCAFF
%A8FFA8A8CAFFCAFFA8FFCAFFA8FFCAA8CAA8CFA8CAA8CFA8FF7DF8F82776
%CAA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA827F8
%F8F8A8CACAA8CFA8CACA7DFD05F8A8A8CFA8CAA8CFA8CAA8CFA8CAA8CFCA
%A1757575C8A8CFA8CAA8CFA8CAA8CFA8CAA8A826274BA0A8CAA8CFA8CAA8
%CAA8CAA7CFA8CACA52F82752CAA8CAA8CFA8CAA8CFFFCACFA8FFCACFA8FF
%CAA82776A19AA1FFCACFA8FFCACFA8FFCACFA8FFCACAC3CAA8CAA8FFCACF
%A8FFCF7D279A4BF827FFCACFA8FFCACFCA7DF8F8275276FFA8FFCACFA8FF
%CACFA8FFCACFA8FFA19A9A76A1FFA8FFCACFA8FFCACFA8FFCACFCAC3C3C3
%9ACFCACFA8FFCACFA1C39AC3C3FFCACA264BF8F87DFFCACFA8FFCACFA8A8
%CAA8CAA8CAA8CAA8CACAA19AC39ACAA8CAA8CAA8CAA8CAA8CAA8CAA8CFC3
%C376A1A0CAA8CAA8CAA8FF527676C94B27A8CFA8CAA8CAA8CACA7676A075
%A8A8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CA9AC3A1CAA8CAA8CAA8CAA8CAA8
%CAA8CFA8CFCAC39AC9CACFA8CAA8CFCAA076A19ACAA8CFA8766F4B26A8A8
%CAA8CAA8CAA8CAFFCAFFA8FFCAFFA8FFCAFFCFC99AC9CAFFCAFFA8FFCAFF
%A8FFCAFFA8FFCACAC3C99AC3C9FFCAFFA8FFCA274BA1A1274BFFCAFFA8FF
%CAFFA8FFA8C39AC9CAFFA8FFCAFFA8FFCAFFA8FFCAFFCACFC3A19AC9C3C9
%C9FFCAFFA8FFCAFFA8FFCAA853C3A1A177A2CAFFA8FFCACAA1C9C3CACAFF
%CAA8769ABC9A52FFCAFFA8FFCAFFA8A8CFA8CAA8CFA8CFA8A87DA7BCBCA0
%FFA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAC3C376767DFFA8CACAA8274C9A
%A1F852CACFA8CAA8CFA8CAA8CFA19AA1FFCACAA8CFA8CAA8CFA8CAA8CFA8
%A8999A76774CBB994C77FFA8CAA8CFA8CFA7C26F286FC29ABC2877C2C9A7
%CAC3C3C3CFA8CAA8FF27F86F99F8F87DFFA8CAA8CFA8CACFA8FFCACFA8FF
%A8A0757699C2BBC2C2FFA8FFCACFA8FFCACFA8FFCACFA8FFCACA76765176
%A1FFCAA1515353A1767676CACAFFCACFA8FFC9C9C2C3A1A152A8CACFA8FF
%CACFA8FFCACFA8FF9ABC282F2853BB9A282977FFCACFA8FFC9C2BBA0289A
%BBC2BB764CC2BBC2C3C9C3CAA8FFCAFFA82727A19AF8F87DCFFFCACFA8FF
%CAA8CAA8CAA8CFA79ABB9A4BBCBBBC99BBA0CFA8CAA8CAA8CFA8CAA8CAA8
%CAA8CFA8524B764B76A17C517628534B524B5252CAA8CAA8CAA0C8C2C899
%BCC1524CCFA8CAA8CAA8CAA8CAA8CF7D9A7029282928BC6F2928287DFFA8
%CAA7BCBB9AA0A19ABB99BC995299BCBCC3A1C3A1CAA8CFA87E5276545400
%00537EA8CFA8CAA8CAFFA8FFCAFFCAC2BBC27576BBC2BBC2BBBCC2FFCAFF
%A8FFCAFFA8FFCAFFA8FFCAFF7CFD0476A14B7D76532976517652767DFFCA
%FFFD05C8C2BBC2A0A1C3CFA8FFCAFFA8FFCAFFCA7D9A532853282F9A9A29
%532853A8FFA8C9BBC2C2CAA1C2BBC2BBC276C2BBC2C3C9C3CFA8FFA27854
%7D7CA87EA8547F547FA8FFA8FFCAA8CAA8FFA8C299C2BB7675C2BBBC99C2
%BBBBA0C3A0C2C3C9A1CAA8FFA1C29AC3C3C39AC39976517676754C2F4C76
%4B764B7CA8FFC8C8C2C8C2C899BCBBC8769AC3CFA8CFA8CAA8CFCA7E4C76
%282928532876752F2829287ECACA99BCBCC3C3A19ABC99BCBB7699BCBCC3
%C3CAA8CF7E7F54A8A8FFA7A77D7E5454547EA8CAA8CFFFCACFA8C3BBC2BB
%C2529ABBC2BBC2BBC2BBC2BBBCBBC27676C3CAA8CFBCBCBBC2BBC2BBC275
%52527D515228535176517676FFC9FD06C8C2BBC2C2A0A0C9CAFFA8FFCACF
%CACA52532853285328534C9A2853282953FFA1C3C3C9C3C376C2BBC2BBC2
%9ABCBBC2C9CFA8FFA87E54A9CFFFCFCFA7A2547F7E7E54A9CACFA8A8CAA8
%CA99BC99C2755299BC99BCBBBC99BC99BC99BC9AC39AC3C3CAA8C3BBBC99
%BCBBBCBB9A4B767652514C28A776514B76A8C9C1C8C2C2A0C899BC99C8A0
%C3C2C9A8CAA8CACAA8284C28292853282928534C52285328537D77C3C3A0
%C3769ABBBC99BC99C2A7CAA7CFA8CAA8A85454547EA1CF7D7E787E7E7E54
%547ECFA8CAFFCAFFC3C2BBC2C2A09AC2BBC2BBC2BBC2BBC2BBC2BBC3C9CA
%C9CAA8FFCAC299C29ABCBCC39A7DA1C3767D76A7A17D517652CAFD04C8A1
%A7C8C2BBC2C2C9C2C8C9FFA8FFCACA285329532853285328534C53285328
%534C7E77C9C3C9C3A0BBC2BBC2BBC2C2FFA8FFCAFFA8FF7E54547F779AA0
%C37855547F547E54A9CAFFA8A8CFA8C399BCBBBCBBC2BBBCBB9AF8266FBC
%BBBB99BCA0CFA8FFA8CAA8CF7E7E777E7EA19AA1A1A2A1A04B524B525176
%4B76A8C8C2C8C2C8A0A1BBBC99C8A0C8C1C9A8CAA8CAA129282952762829
%282928532829285328535377C3C3C3A199BCBBC2BBBC99C2A8CAA8CFA8CA
%A8CA545454A06FC2C27854545478547EA8CFA8CACFA8FFC9BCBBC2BBC2BB
%C2C2C34CF8F852C3C3C3C9A7CFCACFA8FFCACFA8FFCACFA8FFCAA19AC9C3
%C376765276517652767CFFC8C8C2C8C8C8C2C2BBBCA2CAC8C253FFCAFFA1
%76282F28C8C8C8A0A17653285328532853A87728C3C3A12876769A759A76
%7676CFCACFA8FFCACFCAFFA27E77A19BA1545B5455547FA8CFA8FFCAA8CA
%A8CFA0BBBBBCBBBC99C3A1C34BF87DFFA8FFA8CAA8CAA8CAA8CAA8CAA8CF
%A8CAA8CFA8CAA1C9A0764B7651524B764B7DA8CAC1C8C2C8C2C8A0C2A1FF
%FFA12853A8CFCA9A9A77017CC2C8C2C8C1C89B4D282F284C7DFF53282853
%284C4B7D51524B524B517DFFA8CAA8CAA8CAA8CFC9A17DA1515277A1A076
%7DCFA8CAA8CAFFA8FFCAFFA19ABBC2BBC2C3C9C34BF8A8CAFFCAFFA8FFCA
%FFA8FFCAFFA8FFCAFFA8FFCAFFA8CEC8C8757652765176525353FFCAC9FD
%05C8C9C3C3CAFFFF5353FFCACAA0C3A17DC8C9A1C8C8C9C8C9772F2876A1
%FFCFA2285328534CA1767651765276527CA8FFA8FFCAFFA8FFCAC9C8C8C8
%A052A09F7C5176A1FFA8FFCAA8CAA8CFA8CFA17D539B77A2C3C3F82854CA
%A8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAC2C8C2C8C27C2829282F
%2853A8FFA8C9A0C8C8C3A1C376C3FFFF7EA8A8CFA7C3A1FFC9C8C2C9A0C8
%C2C8C8C3769AC2CAA8CFA853282928524B7651764B767C7D4BA1CACAA8CF
%A8CAA8CFC8A0A0C8A07C52524B524BA1CACAA8CFFFCACFA8FFCAFF7E5454
%5B547E535354797ECFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFC8C9C9
%C9C8C87C532953285353CAA8FFA87E7DC97EA1A1FFCAFFFFCFCACFA8FFCA
%FFA8C8C8C8C2C9C8C8C2C8C8C8C9FFCACFA8FFCAA27DA87D765176527676
%7D517652CFCACFA8FFCAFFA8C9C8A0C2C876525176767C7CFFCACFA8A8CA
%A8CAA8CFA87E29FD08547EA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA7
%C8C2C9C8C8C8A0285329532853A8CAA8A8FD0454A2FFFFFFA9CAA8CAA8CA
%A8CFA8C9C1C8C2C8A0C8C2C8C2C8C2CAA8CAA8CAA8CFCACFCAA14B524B76
%4B7C517651517DFFA8CAA8CAA8CAC2C8A0C8C2764B7C767D527DA8CFA8CA
%FFCAFFA8FFCACB5454547F547E547F547F54A9CAFFCAFFA8FFCAFFA8FFCA
%FFA8FFCAFFCAC9C8C8C8C9C8C8A0292853285328CACAFFA278547F54547E
%FFFFA9A8FFCAFFA8FFCACFFD04C8C2C9C8C8C8C9C8C8CAFFCAFFA8FFCAFF
%CAFF7C7651765276767C5276517DCAFFA8FFCAFFC9C8C8A0C8C975765276
%4B7676FFCAFFA8A8CFA8CAA8CFA254537EFD08547ECFA8CFA8CAA8CFA8CA
%A8CFA8CAA8CFA8C9C1C8C2FD04C8A0012928292853A8CFA8A25454547854
%7E7E7F54CAA8CFA8CAA8FFC8C8C2C8C2C8A0C8C2C8C2C8C2CAA8CFA8CAA8
%CFA8CAA87D4B764B764B7C5176515251CAA8CAA8CFA8C9C1C8A0C8C27651
%7675A0A1CAA8CFA8CACFA8FFCACFCAA95454547F5478297E547E547FCACF
%A8FFCACFA8FFCACFA8FFCACFA8CFC8C8C2C8C8C9C2C8C87C76A1A1A8A8FF
%CACF7E55547E547E7E7E547FA8CFA8FFCAFFA7C8C8C8C2C8C8C9FD04C8C2
%C8C9FFA8FFCACFA8FFCAFF7676527651767C764B765276A1FFCACFA8FFC8
%C8C2A6C8C8C2FD04C8FFCACFA8FFCAA8CAA8CAA8CA7E5453545478545353
%78545454A8A8CAA8CAA8CAA8CAA8CAA8CAA8CAA0C8C2C8C2C8C8C8C2C8C8
%C8C2CFA8CAA8CACAA2FD05547E545454CAA8CAA8CAA8C9C1C8C2C8C2C8A0
%C8C2C8C2C8C1CAA8CAA8CAA8CAA8CFA8764B7651524B7C76A151764BA1A8
%CAA8CAA8C8C2C8A0C8C2C8C2C8C2C8A7CFA8CAA8CAFFA8FFCAFFCA7F5478
%547F547E5378547E547FA2FFA8FFCAFFA8FFCAFFA8FFCAFFC9FD06C8C9C8
%C9C8C8C8C9CAFFA8FFCAFF7E7F547F547F547F547FA8FFA8FFCAFFC9FD06
%C8C9C8C9FD04C8C9FFA8FFCAFFA8FFCAFF7676527651767DA87C765276A7
%FFCAFFA8CFC8C8C8C9C8C8C8C9C8C8C8CFCAFFA8FFCAA8CAA8CFA8CAFD05
%5478547E4DFD0454A2CACAA8CFA8CAA8CFA8CAA8CFA8CAC2C8C2C8C2C8C8
%C8C2C8C2C8C2CAA8CAA8CFA8A8777E5478547E54787DCFA8CAA8CFA8C9C1
%C8C2C8A0C9C8C8C2C8C2C8C1C9A8CAA8CFA8CAA8CFA8764B7651764B7D52
%514B7676CAA8CFA8CAA7C8C2C8A0C8C2C8C2C8C2C8A7FFA8CAA8CFFFCACF
%A8FFA87E537E547E547F7E54547F54547EFFCACFA8FFCACFA8FFCACFA8FF
%CACAC2FD04C8C9C8C8C2C8C8C8A8FFCACFA8FFCAC9C3C9C3C3C2C3C2C9A8
%FFCACFA8FFC9C8C2C8C8C97DC9C8C8C2C8C8C8C9FFCACFA8FFCACFA8CF52
%7651765276767651764BA8CACFA8FFCACAC2C8C8A0C2C8C8C8C2C8C8CAA8
%FFCACFA8A8CAA8CAA8A85454547854547EA2FD055478A8CFA8CAA8CAA8CA
%A8CAA8CAA8CAC3C3A0C8C1C9A0C8C2C8C2C8C2CAA8CAA8CAA8CAC3C3C2C3
%C3C39AC3A1CFA8CAA8CAA8C9C2C8C2C8C2C8A0C8C2C8C2C8C2C9A8CAA8CA
%A8CAA8CAA8764B524B764B7C51764B76A8CFA8CAA8FFA7C8C2C8A0C8C2C8
%C2C8C2C8A7CAA8CAA8CAFFCAFFA8FFA254547F547E54A9A854547F547E54
%FFCAFFA8FFCAFFA8FFCAFFA8FFC3C3C3CAC3C9A8C9C8C8C8C9C8C8CAFFCA
%FFA8FFCACAC3C9C3C9C2C3C2CAA8FFCAFFA8FFC9C8C8C9C8C8C8C9C8C8C8
%C9C8C8C9FFCAFFA8FFCAFFCAFF767651765276767C5276A1FFCAFFA8FFCA
%C9C8C9C8A0C2C9C8C8C8C9C8CAA8FFCAFFA8A8CFA8CAA8A2545454785454
%7EA8545454785454A2CFA8CAA8CFA8CAA8CFA8CFA1C3C3C3C2C9A8CAA8C9
%C2C3C2C9A8CAA8CFA8CAA8FFFD06C39AC3A8CAA8CFA8CAA8C9C2C8C2C8C2
%C8C2C8C2C8C2C8C2C9A8CFA8CAA8CFA8CFA77651764B764B7C517652CAA8
%CFA8CAA8FFC9C8C2C8A0C8C2C8C2C8C2C8C9CAA8CFA8CACFA8FFCACF7E54
%547E547F54A8A87E5478547F54A8CAFFCACFA8FFCACFA8FFCAC9C3C9C3C3
%A8FFCAFFFD05C3FFCACFA8FFA8CAA8CAC3C3C3C9C3C3C3FFCACFA8FFCAFF
%C9C8C8C8C2C8C8C8C2C8C8C8C2C8C9FFA8FFCACFA8FFCACA517652765176
%76764BA8CACFA8FFCACFA8C9FD04C8C2C8C2C8C8C8C2CACACFA8FFCAA8CA
%A8CFA87E4DFD0554A8CAFD06547ECFA8CAA8CAA8CAA8CAA8C9C3C3A0C3A1
%CAA8CFA8C9A0C3C3C9A8CFA8CF7C5251529AC3C3C3A0C3A0CAA8CAA8CAA8
%CAA8C9C1C8C2C8C2C8C2C8C2C8C2C8C1C9A8CAA8CAA8CAA8CFA7764B7651
%524B7D5176A8CFA8CAA8CAA8CAA0C8C2C8A0C8C2C8C2C8C2C8A7FFA8CAA8
%CAFFA8FFCAFF7854547F547F54FFA87F5478547F54A9CAFFCAFFCAFFCAFF
%CACABBC2C3C9C3FFA8FFCAFFC3C9C3C3C3FFCAFFCAA1517651C3C3C9C3C9
%C3CAA8FFCAFFA8FFCAFFC9FD04C8C9C8C8C8C9FD04C8C9FFA8FFCAFFA8FF
%CACA5176527651767C76A7FFCAFFA8FFCAFFA8C9A0A0A0A1A0C8A0C9A0C8
%A0CACAFFA8FFCAA8CAA8CFA8784DFD04547EA8CAFD06547ECFA8CAA8CAA8
%FFCAA877BBBBBCBCCAA8CAA8CFA8C9C3C3C3CAA8CFA8CA76765176A0FD04
%C3CAA8CAA8CFA8CAA8CFA8C9C1C8C8C8C2C8C2C8C2C8C8C8C1C9A8CAA8CF
%A8CAA8FFA1524B7651764B7C7DCFA8CFA8CAA8CFA8CAA7C9C2C2A0A0C2C8
%A0C8A0C8A7FFA8CAA8CFFFCACFCACB5454547F54547EFFCA7E5354547E54
%A3CA7D297F7E7E537E545577C2BBC3A8FFCACFA8FFC3C3C2C3C3FFA8FFCA
%7C4B7676A1C3C9C3C9A8FFCACFA8FFCACFA8FFC9C8A0C9A0C9A0C8C8C9A0
%C9A0C9A1FFCACFA8FFCACFCAA85176517651527DFFCACFA8FFCACFA8FFCA
%FFA8C9BCC2A0C3FD04C2C9CFA8FFCACFA8A8CAA8CAA8A8535377A27EA8A8
%CAA2A2A1C39B77A2FF77282854545429FD04547DA8CAA8CAA8CAA8C2BBBB
%BBC9A8CAA8CA52524B5276C3A0C3C3CAA8CAA8CAA8CAA8CAA8CAC8C8C2C8
%C2C8C2C8C2C8C2C8C2C9A8CFA8CAA8CAA8CAA77D7676757675A0A8CFA8CA
%A8CAA8CAA8CAA8CAA8FFFFFFFD04CAC9CAA8CAA8CAA8CAFFCAFFA8FFA853
%287777CFCAFFCACF537D7753287EA8FFA2532854547F547E547F54FFCAFF
%CAFFCACB787E777EA2FFA8FFCA76517652C9C3C9C3CACAFFCAFFA8FFCAFF
%A8FFCFFF777E777E77CFA8A27DA278A8CAFFCAFFA8FFCAFFA8FFC9C2BCC2
%BCC293C9CFFFA8FFCAFFA8FFCAFFCAA253A8FD057EA9A8FFA8FFCAFFA8A8
%CFA8CFA853537D28297DCFA8FFA82928292853537D537EA87E2829297854
%5454A8CACAA8CFCAA854555454547ECACAA8CA51524BA8A1A1C3A04B7DA8
%FFA8CAA8CFA8CACAA8545429542A545478FD04547ECFA8CFA8CAA8CFA8CA
%A8C3BBBC99BC99BB9AFFA8CAA8CFA8CAA8FFA87DFD0528532853287ECACA
%A8CFA8CACFA8FFCA7728535353287DCACFCAA828532853285328532853A8
%FF53292854547EA8FFCACFA8A25353547F54547EFFCAFFA8765176A8A151
%76757C517CA1CFCAFFA8FFCA7E2AFD065478547F547E547FCACFA8FFCACF
%A8FFCAFFC2BCBBC29976769AA1FFCACFA8FFCAA85353292928292853537E
%532953FFCACFA8FFCAA8CAA87E28282829282828CAA8CF7DFD0428292828
%28292853A8FFA2532829A2CFA8CF7E7829FD045478547EA8CFA8A84B517D
%FF76524B524B764B514BA1A8CFA254295429542954295453545354545453
%CAA8CAA8CAA8CAA8CFA8C399BC99BC999A999A9ACAA8CAA8A14C4C274C28
%4C4C52282928292829A7CFA8CAA8CAFFA8FFA2532853285353A8CAFFCAA8
%537D7D77FD0753FFCAFFCAA87EFFCAA85454547E54545354535453FFCAFF
%A8A8A1FFCAA14B765176517651764BCAA85429542954295429FD08547FCA
%FFA8FFCAFFA8FFCAFFC2BCBBC2BBC2BBC2BBBCBBCACAFF9ABBBBBCBBBBBB
%BC99FD059A99CACAFFA8FFCAA8CAA8FFA8A27DA2A2CACACFA8CAA8FFCACF
%A8CFA8CAA8CFA8CFA8CFA8CAA8FFA8CF7D532829285328292853287DA8CF
%A8CAA8FFA8CFA17D767D767D767C527CA8A8537E547E787E7EA2FD077EA2
%A8CFA8CAA8CFA8CAA8CFA8C99AC2BCC29AC2BCC29AC3A7CFA8CAA7CAA1CA
%A7CAA1C3BCC29AC2BCC3A8CFA8CAA8CFFFCACFA8FFCAFFCAFFCACFA8FFCA
%CFA8FFCACFA8FFCACFA8FFCACFA8FFCACFA8FFCAFFA8CAA8A8A8CAA8CAA8
%FFCACFA8FFCACFA8FFCAFFCAFFCAFFCAFFCAFFCAFFCACFA8FFCFFFCAFFCA
%CFCAFFCACFCAFFCACFA8FFCACFA8FFCACFA8FFCAFFA8FFCAFFA8CFCAFFA8
%FFCACFA8FFCAFFA8FFCAFFA8FFA8CFA8FFCAFFA8FFCACFA8A8CAA8CAA8CA
%A8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CA
%A8CFA8CAA8CFA8CAA8CFA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CFA8CAA8CA
%A8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CA
%A8CFA8CAA8CFA8CAA8CAA8CAA8CAA8CAA8CAA8CAA8CFA8CAA8CAA8CAA8CA
%A8CAFFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8
%FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCA
%FFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8
%FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCAFFA8FFCA
%FFA8FFCAFFA8FFCAFFA8A8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CA
%A8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CF
%A8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CA
%A8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CF
%A8CAA8CFA8CAA8CFA8CAA8CFA8CAA8CFA8CAFFCAFFCFFFCAFFCFFFCAFFCF
%FFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCA
%FFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCF
%FFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCA
%FFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFFCAFFCFFD7FFFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 6.0-c002 79.164460, 2020/05/12-16:04:17        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
    xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
    xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
    xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
    xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
    xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/postscript"
   xmp:CreatorTool="Adobe Illustrator 24.2 (Windows)"
   xmp:CreateDate="2021-12-02T18:51:31+03:00"
   xmp:ModifyDate="2021-12-02T18:51:32+03:00"
   xmp:MetadataDate="2021-12-02T18:51:32+03:00"
   xmpMM:OriginalDocumentID="uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7"
   xmpMM:DocumentID="xmp.did:dfb493b0-782c-384e-9c98-5099e87fabc1"
   xmpMM:InstanceID="xmp.iid:dfb493b0-782c-384e-9c98-5099e87fabc1"
   xmpMM:RenditionClass="proof:pdf"
   illustrator:StartupProfile="Basic RGB"
   illustrator:CreatorSubTool="Adobe Illustrator"
   xmpTPg:NPages="1"
   xmpTPg:HasVisibleTransparency="False"
   xmpTPg:HasVisibleOverprint="False"
   pdf:Producer="Adobe PDF library 15.00">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">2112.w037.n003.45A.p1.45</rdf:li>
    </rdf:Alt>
   </dc:title>
   <xmp:Thumbnails>
    <rdf:Alt>
     <rdf:li
      xmpGImg:width="256"
      xmpGImg:height="124"
      xmpGImg:format="JPEG"
      xmpGImg:image="/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAfAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9A5Q5TsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqW&#xA;weZvLk+oT6bBqlpLqFs6xXFmk8bSxyPXijIG5BjxO2NItMsUuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KtMyqKsQo8SaZGUxEWTSREnk5WVhVSGHiN8YyEhYNqYkc28kh2KuxVI/Mvnnyh5Yh9XXtW&#xA;t7AEgCOR6yHl04xLykP0LhAQSAnFrc291bQ3VtIstvOiywyqaqyOOSsD4EHAlUxV2KuxV2KuxV2K&#xA;uxV2KvPvz70/W9R/K7VrDSIfVmuTALhw5Qx26TJJLJsCWHFKMo/ZJ+WEGkGJlsHi/wCUn5NXNj5k&#xA;0HXPMBka+N4lxbrbzRSR0AeWOSUgOTy9Gux35DcEUMDms0HJGhMYcUub6pyTjuxV2KqN1dxW0YeW&#xA;tCaCgqa9cjKQjzbcOGWQ0FK01fTrs8badJXDtGyKQWV1FWVh2IwCYKZ6ecbsckXk2liP5pebL/y1&#xA;5SludLQSa1eyJY6SjDkv1iUE8iKGvpxo8lKGvGmKgE7Dm8L8p+fvzh8n+b9NbzhPc6p5Y1OYQTXH&#xA;EzRD1ZDEkqSMoeOjkMENOS9B0wiUZck5MOTHvIbPqLAhCaxa3d5pF9aWdwbS7uLeWK2u16xSOhVJ&#xA;BTujGuKC+NNIX87/AMt/M97ountcW97fMVuJAgvLZ6cZDcguskeyuCzkVAPxUywyiwhjmTsH1F+U&#xA;eveYdZ8nrJ5icT6xaXM9rc3iqiJcBH5RyosYVADG6jYdQcrtsMSDRZpirsVdirBvOWqeYbHWIrbS&#xA;4oLkzRNLDHdytGrOlS8SsFbiWHHjQHuTsBXVarRCZNyl99O20siYbAX8rpOPJGrXWq6S13cWb2T8&#xA;zG0Lkn402fiWVCVrsG4ivUbUJu0GnOIEE2LcXWTsjaiyHM9w3Yqo3kM01nPDDKYJpI3SOYCpRmUg&#xA;MB/knfFXyxY/84830V/Pda/dSalLM8kS2squrvI9Q1xJMjygU+2vMgtsDQ7ZXLUdHOxdndSbH43f&#xA;VNvDDBbxQQoIoYkVI412CqooFA9hljg0p6jepZWctywLCNSeKgsT8gNzkZSoNuHFxypLLPzfpN5d&#xA;tbWzM7qEY1FCUkFUkUH7SN2YbdR1ByHihyPyMqJsWEN+Y3me48r+SdV1y1jWW7tY1W0jdSyGeaRY&#xA;YuYBU8fUkHLfplocF5J+Xv8AzkR5pvvPMHk3zRpFs1zcXBtVv7JniCMvL4mjk9TmrMANmWg8cIoi&#xA;wswYSMTzD3/Al2KuxVSurq3tLaS5uZBFBEpaSRugAxJUC2F3P5qaWt9HZpYTyJMaB5OCVUkjlwJY&#xA;0270zHlqI8JI3Ac2GiyccYn0ylyQehavBDr5ur6QNbujCM+mKxOzA0DCjcNuhrv3zAwasX6hTvdZ&#xA;2fkOM8Bs9x/W9EVldQ6EMrAFWBqCD0IObYG3liCDRbwodiqHv7C3vrZoJ1qjAj7xTIyiCG3DmOM2&#xA;HlWveYbHyxrkkWmRrJeWsS2yR8eFvCAS/wACgKfi5DkBsaDfbKBAguwyamEo7DmK9z0Pyt5nstd0&#xA;ZL9HVJUWl5ET/dOB8Va/s9wfDMgG3VkU8h/OLzbDq+t+Xxo13xg0a7kmnlaP1IZmdRFQAMhZQjSA&#xA;nvXbxy/BhGUSHcEGZxyjLzSTzaJLzUPKtvY6tay6Vpd3DJqPC1lj/cxTwyDg0/rTk/uiWHP4jSuY&#xA;mOgSS5mqyGYAjyHl/b976PtrmC5t47i3cSQTKHikXoysKgjLXDXSSxxLyc8VyvLljjFyNBlCBkaD&#xA;CvOX1Qsbu1VYru5jNvPM3NDJGlSi+pCwlTiXbiwrSp2zBhrMeWVA1Xf+K+53Gk0+SIPX3fs3TLyl&#xA;5j0OdU0K3b6vf2UKFrJhT92VBDRHo6fFt38QM2OONwEhvE9XWam/EIIohkuFodiqB1zVY9K0q4vn&#xA;XmYgBGlacpHYJGtewLsBXHkCT03+TPHAzkIjmTTxrzH+aUr6o8Nx6pS3HEraFIlZu6OxDScV/wAl&#xA;wa13yWm0OTNjEzQv7nYajVYtNM44cRrnv1/Hci1/NbzFbeXodVVopC78BbMihB8ZBFVCt0XxyrHg&#xA;mdUcN+kDu8mzNHD+UGfh9Uj3nvei+R/PGm+a9NNxbj0buGi3dmxq0ZPQg7VVqbHMnNgljNF00ZiX&#xA;JkE88NvC80zBIowWdj0AGY8pACy2QgZyEY7kvMfPn5geYV02V/LwNusLqZpggkkETBhyIYMqCvt9&#xA;OR7OzxzZuEj019rstd2acGHiu538h+OqAXUr66FvfSTuL9UUrdKzK1Su3NARHIF7CRWAzXT1nCSK&#xA;sg9/n+ORDu4dnRlEUaBj949/3gpl5Q/MvWXiubXW4VubmzmMRuI6RFl6glQOP3UzYazURx8Moi4z&#xA;jfudLpeyzl4ok8MoSryLJ7/VY9Vs1QRslvKp5oxox5CnbMeWbjApycGh8IniNlMdH0axit4JvRUO&#xA;icYhQBUTaiqB0FFGX48Yqy4Or1MuIxGwDAvz383eYtJsNJ0vQbFb2bULgS3xcoFS3tXjcxkvsrTM&#xA;wCt4Bqb7jI8Ezie47fEuBDIYTBAujfyeO/mR5t8yeSk0M6X6Nrds800Fws63EkaxleMdIxHHw4yF&#xA;aOrVHetTlGHSThImYI94r3uw7Q1gMBGBBvzuu4dP0vqTy5rMWtaFYapHxH1u3imeNSG4PIgZkPup&#xA;NMvnAxNEU60G0xyKXYq8882eYW1CdrSA0soW6j/djL+0fYdvvzS6vVGZ4R9P3vW9mdnDFETkPWfs&#xA;/awVB6/mZj1W3T/jWn62wn04PeWMfXrT/QH6P2p1mC7pkmh+abvTYZbadRcQwD4FLcWHxBSqmhqN&#xA;60zLwa0wFEWHT63suGaQlE8JKYr+YdpRzNB6CgfAS5dnb+VUVeTMewWpOZ2LW8ZoB1ubsfwwCZ/Z&#xA;+1N9A8xQavapKInt5WMitDLxDK0bmNlPFmBNVPQ5lRyXs67NpTEcQ+lLtV843OnajLaS2YKoRxcO&#xA;d0O4alPDMPNrTCRiQ7LS9kRzYxMS5+XVhHmmx0bXtWOperNaySIqzIsSMGZRQNUyD9mg+jKzrwej&#xA;dHsSQ6/j5MRvJG061utLVTWeaOX6zWhaKNXUJxHYmSp36jMrDlE426zV6Y4shiUq82pS6nRRxW3k&#xA;WJKbfBEvpqT7kAV982vZ0qy13h12cei1kMgkiRx+0AcwssOGRj3N8ZWLexfk5q0k2i3tjKxK2Eiv&#xA;GT+ykwJ4/LkjH6ciJAAk8giUbOzKLm4aeQsdlH2V8BnLarUnLKzy6O5wYRCNdWM+bW+C1XxLn7uP&#xA;9cjg6u20A5pR6NzBf6Pq9hb+pfujWjzGnFI0djv4GjV5U+ypX7TLm40WY8Esd7CXE4GtwR8cmrJ2&#xA;epWlwLi3SXoSPiHgc2WHLxxv4Ogz4vDmYq2WtTx782PP0J1SLR7Nw0On857pxuHuQpSOMf8AGNmq&#xA;3v8ALMuGl8TGR/OIHw5n7GeDOMeQT/mgn48h9rxtmZ2LMSWY1YnqSc3gAAoOuJJNlOEuTP5Xa0r8&#xA;dvdK4H+Q8b/8bA5q5w4NWJ9JQr42P0OzGXi0fB1jkv4GJ/SiPIfmaby75mtL5XK2zMIb1ezQOQGr&#xA;/q/aHuMztRi44EOthKi9585Xct2w0q0PJouMt3QgAcq+mp99uVPlnI66MiAByL1HYohGUpy5jYMf&#xA;ujFomjXF03FLyRREkirzZpGJEKU25UZ+lfHK9NhPL4n9LsNXmBPEOuw/R9qUtxLHiKL2Gw/VQZq5&#xA;ysku3hHhiB3IK2tTFqV7KB8M6wsT25AMp/BRmRlycWGA/mmQ+4uPixcOaZ/nCJ+8PQvL+mz3VlbO&#xA;Rwg4ir+IG22ZunxmUR3Op12rjjlIc5Izzb5jj0a1gt4XWK6ujwikYFliQUDSMBUnjXYZv+z9H4ps&#xA;/TH7fJ5fLkr3lKNF/KqDXrKDVNW1GSS4knaSZYysiuiFlFHB/b2YHwy3tPWbjHEVGNH4014zW/ex&#xA;rz15M8prbyCSwiuTbTUtnnrJxNaEgMSO2S0Oqy6jJEZCJDnyHd7lnAAbIXRr/WPLlzbXxjeO1uD8&#xA;ULfCJYxSvwn2Pwt/bm81OGGeJj1H2NUZGJeywyxzRJLGeUcih0bxDCoOcdKJBouYo6l6v6OuvR3l&#xA;9GT06deXE0/HK8t8JrnTfp68SN8uIfe8nikMUgcAEruK1/gRnNEW97KNilkNla+vNLArC5uXLMp+&#xA;KpY7KpFKAV2H45YZylUe5x8OAYiTzvmWD+fvzPt/KV7aWwtF1A3Cs8vCZVMfE8aGiv8AF7GmZ+Ds&#xA;4zhZNG3W63tqOGYjEcQrv/YzzTINS1jTbPV7fT7lbfUokuoFaMlgkyh15cajo2YktLkiaolzcGvw&#xA;ygDxAbdSyXyz5b1EXvqXkDw25QgsSFappTY7/hmTpdNPiuQoOF2h2lj4KgQZWyzTtGstPFLYMKli&#xA;amtS7FmJ8SWNc2kcYDz2XVSmKNUlPnDy9d6mIJrFENzHVJObcaodx2PQ5Cekx5TcyY+4X+kOTou0&#xA;ZacEAWCxseSvMgqzxQ8VFSFkJY07KOPX55XPszABtOZP9Uf8U7CPbsiQDGPzP6kqPlmO/nD3Fu4e&#xA;3NHt7gNCQTvxLx+okg/1G65HBjxQBBMvsP6k6kyzkGht7x+u2NebYLG0127ja2S59cCWRJXk4q8l&#xA;Wfj6bRnqdqnL8WQg8Q5up1WGIlwjkgr3XpLnS4NLS0trSztiGjS3V1JYAjkzM7lieW5O+SnkMjZc&#xA;eMAGc/lDaTiy1m8oRE3oxI3YsvJn+4MPvzE1l+DKm/DXiRZlPF6sLxcinNSvJdiK+Gc1iycExKro&#xA;9XbSjYpj3mKK7+r2xlXkIaq0wIoxYChp1B+Hf9eZd4zImHI9O79f42DndmyIuJ57fFE6LF6mm2rO&#xA;hMcVw3xUPEFkcDf3rlww5ccTkqhKOx9xjf2X8j3ONrcsfH4QfUOfyZL5f1Kyuje21vIHkspRFOo6&#xA;KxQNT7j9+bLs3FOOLil/GbDpNbkEp0OjGvzX84XGi6JNa2U31bUbhR6U1CTwLBXCN0WShqK70BI6&#xA;VG20vDLKIyDj5MX7viBeKeWfKWseZPrf1Ip/oyhmeZiFLu2yg0O5AJzP1/aOLSmJn/EejjafTTy3&#xA;XRu+8g+cLIn1dMmdV/ahAmFPH92Ww4e19Lk5THx2+9Z6PLHnFJZVmty9tIrRSg0njcFWDKfslTuK&#xA;ZmRAmRLmOn62k3H0/NE6Ho17rOrW2mWSF7i5cIKCoUftOfZRucnkmIxJLECzT17yXq8d9d696kvK&#xA;6/SMr8GILiEKscVfEAR0znO0sZBienD9r0XZMwYSHXiQWu+Y9Fv9R+pidXTTnD8gao0zBl2p14D8&#xA;T7ZgajFlhjFD6/nW33ux0+pwSyHiP0cu69/uQzavpq9bhNvA1/VmrGnn3O0Ovwj+IM4/LLUbK7i1&#xA;BbeQOyNHyWhBoQ1DQ02zZ6LFKANvPdr6qGUx4DdWzfM507BPzE8s6tqF3Bf2MRuEji9KSJT8Qoxb&#xA;kFPWvLtm87K1mPHEwka3tozQJ3DF9DvNb0XUbcW7yWriRvraNMUCAilJLV2jV6jcNuR4Zru2jkyZ&#xA;eKIJgI7EDY9Tv9jt+z8OI4wJ8JJPfuPhYQWqajdLft6F3MyxgKsvqsWO3xEtXeprm87HwAaeJkNz&#xA;v+p1vaJj40hH6Qpafp2p6xerDbq9xM5HJ2JIUfzOx6DNhlzQxRuWwcKMSXuFnbi2tILcHkIY1jDH&#xA;vwUCv4ZxeSfFInvLnAUq5BLCfO3lsQwyatYenGkQ5Xdu1VDCv2oyK0bfp0Pt3xx2ZHNkAj6TIu20&#xA;/bOTFGpeoD5/NhWl69ZpcRzyRvxR2VgKH7JK1+/MuPsxnjK+KJHx/U5U/aHFKFVIFin54tceaLfR&#xA;NG0hGuLdrr1dQuFVQsKhQF5FviB4ux2/pl+l7LzifqjXR1XaOshkiBE2948j6jDe+WrMRKENoi2r&#xA;xr0X0lCr960OS1+n8LKQOXMODjlxC0+zDZuxV2KuxVLtSCyyCFIw8g3Y0Bb5Dvmm7S1Bvghz6uy0&#xA;QMRxE7PNfOHkX131DWYroqUiMotPTrUxR7qH5ftcfDKdHrzccchzNXfeWzUYLuVvJW1aRto4wCel&#xA;TX8Ns7KHZY6m3SHVHoHr35C3VxLYazaXAaiSwyqHFB+9VlNK/wDGPK+0MEYgCtqK4Zkm+rM9XvdO&#xA;0y8it7icRGdS0XPYUBpu3QZymXsTMQZ4hxxHdz+XX4O5xa6B2lsUtvtQs5pBaoPrDt9gcGaIvwLg&#xA;NIFZF+Ed8dJoZQhxzFcWwvy57OfhziyInf8AHVmPlKzuLjytJp2t2P1RJIy7RLWM+lOCVHJaMsir&#xA;9qhqp2B2zfQkZCp71XPlToNWY8XHA7yu++/2sZ/L7ycPLNrqMYkd0vLt5bcS09QQD4YvU4/DzI3N&#xA;PHL9TmEyK6Bx8caDeoeT21K8vXu5CsF7btbXBqDySrFCB+yyc2+/2zAgJRlxdxt289Tj8PhHMiqQ&#xA;Wh+WrHQNOFhpTNwDmR5ZgGaRjtVuPDtSlOnvmg1uu/MZjOY9PIV0btPg8OAA5pnDJ6sKuy05Ddeo&#xA;8D4ZhZYcEiAeTkRNi3nPm/8AK2+1XV0utKZAsvwzI1eQpQKQOhoNuo2GdZ2d28ODglEyn9h/V3nz&#xA;t1mp0AnPiMhGPU/j5M/8geQrDyrYvRRJqFxT17g7txHRAew8aZkyz5Mm8/kOQcXLHGDWMbDqeZ/H&#xA;c8o8/fllr1pr93cafZTXdjdyvPA9vG0vESHkY2SMMy8SdtqEZudNqoSgATRDgzxm0l06z1Py/Kfr&#xA;tk0F6wElsLhHRkrsJAh4moIPHkPozXdo5BKYo3s5Gnj6d1kEEtxcRwRDlLM6ogJAqzGg3O3U5rnJ&#xA;ZJ5R1u28u+Y7SaO59e3l/c6gwUrGEcjdS3xNwPxVKjpkgaYkWHvYIIqNwcsanYqxO9Nvc6k0N3Zp&#xA;Ik3JoZmCOCFAqrBhVT4dRTv2zmJanJ6pwnKO/IEh3UccaESByeZ6o6+WNSvbS2WOd3kDRR3EKyIk&#xA;LLyUq5avIFipHGm1c3OnzzyYgROcf6siHCyREJkUD7wt8seZ9bTzLBdLIwinlgS/SFAqGFGp8SoK&#xA;fCGbfMiArqT7zbTM296y5odirGPzHuvR8sSoDQ3EkcX48/8AjTNl2TC84PcCf0NWY+l47ab2yN/O&#xA;PU/4M8v451UeTiLbeQG5uo+6urfQyKP+NcQdyrPfyv1Mw6pPYMfguo+aD/Lj3/4iT92ajtnDcBP+&#xA;b+luwS3p6dnNOU7FXYqpzzLDEznt0Hico1GcYoGRbMWMzlSSMzMxZjViak5yU5mRJPMu9jEAUFLW&#xA;4mngv4RXlKsyCm5qwIy7irNf9L9LAC8deT5v03QPNlzEkMGnXruBwZFhl2K7EHbb6c9O/O4uXHHf&#xA;+kHlvBn3H5PZfyV8t+ZNDGqjVrJ7SG69BoC5SpZOYb4QS37Q65r9dlhOuE224okc2vzTeuu2ydha&#xA;qa/OR/6ZtuxR+6P9b9Aa8/NKPJ/mDU9H1m3eykok8kcc8LCqOpam4PcV2PUZnarBHJA8Q5NUSQ9F&#xA;tfzNXX9V03TrSF7WORZHvQ5Bq6xsQikdVFOVc0up7P8ACxSkTfKvm245XJkWaVykJqU/pw8B9qTb&#xA;6O+aztPUcEOEc5fc5mjxcUr6BKc5x26jZ72kJ/mQMfmwqcv1X95IdxP2MMf0hG2JpdR/P9YyzQGs&#xA;0WrVD92U6zq3SOxV4j+brlvNxB/Yt4lH4n+OVy5tsOTF9E/47Nh/zExf8TGAc0nkg8CXv/5e6u2p&#xA;+U7KWQ8poVNvKT4xfCD9K0OWxOzTIbp/cvwgkbwU0+eU6qfDjkfJnhjcwPNi9z/x0LL/AJ6/8Rzl&#xA;ofRL4O7l9QYL5q8teZrvzXLe2NqJYGWMQyOYmQFUCtVZD2PiPlm00WrxwxAE7uJqMMpS2CO0T8vv&#xA;Nd3cwT32qCOO2ljmEJZ5aFW5CifCg6djmw0+pjmvh6OJmxHHV9XrGZjjOxV5/wDm9eGLT7OIHess&#xA;1P8AjGoA/wCJZvOxY7yl3Bx855POooxHEkY6IoUfQKZ0IcdTltXt7qKZul1XiPYqKE/8ij9+QBFq&#xA;nPlq7Np5gsJ60CzIrH/Jc8W/Bsq1kOPFIeTKBoh7hnFOc7FXYql+rcxwJIEdaAd+WabtbHMgEfSH&#xA;Y6AjcdUuzROyVLg1uJT4u3Tp1yeX6j72EPpCpY/71x/M/qzI0H99H8dGrVf3ZTnOrdI89/MbQ9Sv&#xA;NShuoIA6ekIlZZBWiktujBaGr9mObrs3X4cMOGZqzfJgdLkyG4i6YcNE1mMhxbSKVNQw2oR3rXNo&#xA;e09N/PDH8hm/mlkHkPRNRj8yW1zIgSOFZGerCtGjZBQCvds1+u7UwZMZhA2T5ebZ+Ry4xxSFB6nm&#xA;hSlWqH/SR/qj9ZznO1j+9+DttD9HxS26vILVFeclYyaF6Eqte7EdBmHp9NPMSIby7up93eXJyZBA&#xA;WVSKMRRJGDUIoUH5CmQzSJmSeZJZQGwpXtTS5i/1h+vJ6Q1lj/WDDOPQfcnmde6F2KvCfzSdW863&#xA;oHVVhB+fpKf45XLm2w5JBofH9N6fyrx+sw1p1p6gwDmmXJU1jUbG7aKOxsks7WDkI+jSsGp/eSAL&#xA;y6VFelTvSlElQHs/5Z6XLYeUbUSgiS6LXJU9hJ9j70AOTjya5HdkOotS1b3IH45hdpyrCfOnI0Yv&#xA;IGOXQP1+yPasgr7lK0/DOdh9Evg7aXMIvKmaYaSfikHsP45uexzvIe512vGwTHN6612KvK/zen56&#xA;lbW3VRAob/ntKVP4DOk7Gj+6J75OLnO7EM3LSnfnaw+rWmhyAcedlbFv9YPV/wAHzX6PJxHJ5TLZ&#xA;kFV7klVirBhsQag+4zYENb363mE1vFMOkiK4/wBkK5wk40SO5zwqZFLsVY5q159YuSqn93F8K+57&#xA;nMPLOy77RYOCFnmURpFu855yD90h2J7nwzEx9nxlMS6dzXrcwgKHMqd6wguXRga1qKeB3GYWbQT4&#xA;zy5tunPHAEK+lKZpvUXZYz8Veu4PTLtHoZxyCRIoNGtmIx4T1TjN86dKfMA/dwnwJH4DMfPyDs+z&#xA;DvJILj+5b5Zil3EeaO8pwMbmaenwonAH3Yg/wy7TDcl1/ak/SI+bJ8zHSJVqn+9I/wBUfrOc52t/&#xA;e/B22h+j4oPNY5rZNST44ZSJNlAFCl0JpMh8GH68nhNTj7wxyfSfcn2dk8+7FXgf5luH876mRtQx&#xA;L/wMKD+GVy5tseSSaMwXV7Fj0FxET/wYwDmk8kw8m+X317X7eyofq4Pq3bDtEn2t/wDK+yPc4gWp&#xA;NB9DKqooVQFVRRQOgAy1pQmqH/Rx7sP1HNX2sf3Q/rfrczQ/X8GP33+9Wn/8xDf9Q8uaPF9Mv6v+&#xA;+i7OXMe/9BReUtiO0o/vXH+T/HNt2QfXL3OBrx6R70zzoHVuxV43+Zc3q+bHi6qhiT/gYvV/4lnV&#xA;9lxrBHzJcPKfUkUaNI6ooqzkKo9ztmyJoW1s3/N21WHTNOCdIop4wf8AVVOP6s0PY87OT4H73IzD&#xA;kwbN8472rR9VsLby5pc17cxWyyQQorzOsYZ+AFAWI3NOmcbqcUjmkIi/Ufvc2J9IR36X0kLy+uwc&#xA;f5vVSmwr45QcM/5p+TLiCT+ZvNdlZWghtbiOS9n2jCsGCqDRmNNu1Pn8sq1OLNHEZxidvsc3s7Hj&#xA;yZhGZAH3+ST6Le/pKdbYLwnO57rQdTmqwZPENdXotXDwYmR5M4ghSGJYkFFUUGbWIoU8pkmZyJKQ&#xA;63/vcf8AVXMTN9Tuuz/7v4o3y+v+jyN4vT7gP65bg5OH2kfWB5MX/N7U76y0eyW0nkt2mnPN4mKE&#xA;hUOxK0PU5bJwYBinkC+1O6urlry7mnjEdIkmkZwSCORXkT9morTxzGyno7TQDcs4jtJLtxbxkBn/&#xA;AGj0AG5yoR4jTn5coxx4iyexsobK2WCLoN2buzdyczYQERQeez5jklxFEZNqSvVR+/Q/5P8AE5z3&#xA;a4/eA/0f0u10B9B96CzVOc7FV0f94vzH68ni+oe9hP6Sn+dm8+7FXz9+YTh/OeqEdBKF+lUUH9WV&#xA;S5t0eSVaLtq9k3ZZ42Y+AVgSfoAxHNTyezfll5X/AEPoYurhKX+oASy1G6R/7rT7jU+59snENcjb&#xA;MMkxQWrQXU1sFtuIlDVBYFh9IBX9ea/tHCZxFC93K0mQRkbNbMRub25M1sW+rn0LheXCVi55gwn9&#xA;2UFKepU/FtTNNHFECQ9W46ju3535dztpQnsa2R6y6tTe3tzt1E77/wDJHKDHH3y+Q/4pbl3D5/sT&#xA;HQ21BrqT14Yo4eBoySM5LVHWqIBt75tOyoxEzV8u6v0lwdcTwi65p3m8da7FXjP5l3Nlf65LBoUa&#xA;i+tX/wByN7wupgZSoAjURJLGOK7NUe3Y5u9FlyRgLPp6DZxshHduifysvfLnmG+mtrnTRDqNlGk6&#xA;OsspVij8WYISKAMV2NeuQ1WfUQG87jLyH6m3ixyqo8JHmWX/AJoz6bZ+VZ9QvLJb4wFUiiZ2jFZm&#xA;CNuvtmFo5T4uGEuG2UjEbkW8ZvfPcNykUGm6XBYzMyhriZ/WA3/ylC08Sa5tMcMwNyySl9iMuoxm&#xA;NRgI/azDWvMHkXzR5csdK1K+TStQt/is7qFGNuHACs3AVZI3atBJxbavzx4wywmZD1A8+9pMoyFH&#xA;Zh+q6fqukwJFrcK3uk3G1tqts3qwSjehWRfl3o2bXBrIzFH9rVKJCJsWszAPqjBoakgA1oWNSN+n&#xA;XpmfEgjZi9T/ACvsrpbK5vpgPSmIjtyR8RCV5EH+Wu30Zy3amDDDL6I1I/VTsY6nLOAjKRMRyZpc&#xA;XEFvC888ixQxjk8jmgAHiTmvjEyNDcsSXknmLzWt/q09xaHna14wyI5o6rsGGw65sJezfi1IzMSR&#xA;yr9rn6XtvwYcHAJed/sZp+XF6brRpywIdLhgamtQUSmYmfs78oRDi4r3adTrfzMuKuGhTHPztkpD&#xA;o8f8zXDV/wBURj/jbMWbVBI/I9mbG2/TmoXMdtZzBrOyWVqczyDuRXYKCv35TOOznaPIIz37mVwe&#xA;dfL+matDFdTNwlSouIwHiWpoOTKa/cDkcI3tv12UGPCGexSxSxJLE4kikAZHUgqykVBBHbMt067F&#xA;WHeefN2haXGYJALzUQPgs1Iote8hIbj8up/HLsXYstVISuUAOo/G7KOs8LahJg4/MeOu+jwEeAYf&#xA;80Zk/wChWX+rz/H+c2fypD/U/t/46nuq+ddKWZEtrIXSqo5ySFQAxFSq/CageOY+H2UlV+LKF/jv&#xA;CT2mOsQfx8UZ5T1uw1nVfqklhHARGZEdSrVZSNt1HY4NT2BLBHjOact/d+kr+fEthAD8e4PQMpaH&#xA;Yq8v8+eXdCOuPJ6EguLhRNPIJCAWYkbKQ1Oma/VakwlQDvezez45sZlI9aY4unafYTW9xbIVuEf9&#xA;2ZG58jQmnEih27UzF/N5Jcujso9lYI/Vvfm9o0e/F/plteUAM0YZwOgbowHyaubbFPiiC8vqcPh5&#xA;JQ7ii8saEDq+uabpNuZ72QgAVWKNGllbt8McYZz92ThjMjQYmQHN5YPz48qW97ewX/laK5Ecj/Vr&#xA;qGiNIKniJo5kVkb+Y779szf5KiQDtfuX+UMw2EpV719p+bWlXcMdwPJsvCQt6ohvSirRjRYk9P46&#xA;LSvTfIS7Hx3zbo9rZwKtnnkfzTo/mPSpbrSreS0t4Z2h+rytycEANUkV+1yzHy6bwTwsJaiWU8Uu&#xA;bIsqQh9Riu5dPuYrOUQ3ckTrbzMKhJCpCMR7NvhiQCL5IL5wv/yr8/wXbo+myXLMx/fxOkiuSftc&#xA;q13/AMqmb2OrxEc3EOOTOvyu/LHzPomuRazqbx2kaI6NZhhJI4dSKMVPBQDRup6ZiavVQnHhG7bj&#xA;xkGyzX8x/LGp+ZfLn6M0+SGKZpo5Ga4LKnBK1FUVzWtO2YmmyjHOy2ZIkinl91+QnmeOCBre9tJp&#xA;2B+sxkuioa/DwYrVwR4qM2A7Qhe4LT4JQv8Ayorzt/PZ/wDI1/8AmjJfyhj80eCXo35aeStb0PSN&#xA;Q0rX/q11YXDq8FuCZk3BEoZXUChou3zzB1WeM5CUbBbccCBRS/WvyS0yS+S70G9fSquPXtyDLHxq&#xA;OXCpqDSpo1R8suw9pSjz3YywjoyvzLq48p+Wlns7CW7jt+EKQwjlwUg/vHp+yKbnxOY+GPjZPWee&#xA;7ZI8I2eL+YfPcnmBv9yX1h4d+NsgZIlr/kq2/wAzU50eCGHEKiP1uJKRPNLrfV4EhVLaxuTEmwol&#xA;R49ampy/8zEIp67+UMt3Lo9689rLar9YHprMpUt8AqRUDbpmg7WyicwR3OThGyP89+RpvM0tk8d2&#xA;tsLXmrhkLVEhWpFCNxxzUEW5EZUlX5h+Vp4/J+m6do9tLcpYzKPTiQySFSj1chR3Y7/PGQ2TE7vN&#xA;h5a82iMxjSr8Rk1KfV5uJI7045Xw73TZxJlo9z+YWiSotnb38aIa/VXhlaI1PT02FN/bfJC2Jos+&#xA;8/8AmTzZa21rZaPYSiW6hElxdxq7FCdjEnFWow7nt2zc9m6fFP1TI26EuJmkRsHl6+WPOM7F/wBE&#xA;XTM/xF2jl3r3qyCudB+bxD+KPzcXgl3IyDyX5ti/eS6bMp24AQvJ94U1H05Ea3Ef44pGOXciP8N+&#xA;aqf7wT18fqs39cl+axfz4/MfrTwHuZT+XvlrzBb6+l9ewvb20MT7PGY+TOOIFGJb3zWdp6vHLFwi&#xA;QJPc24oG7en5zrkuxVgvnawvZdXSSK3kkjMKgOiMwqC1RUDNRrscjOwOj1HY2eEcJBkAeLv9zGLv&#xA;y9LdKfrOnySAKy8mibkFb7VGpUdO2Y+OWXH9PEHZZJYMm0jE/EJr5fuNf0kCGwhnkt6j/R5FlkQf&#xA;6talfoy7HqMwOwv4fqcTU6TSzHqIB7+L9bOtVfV5NDkbTkMWpyRp6aVQlGYjlu/wVUV65tuKXDYG&#xA;/c8vCGPxKkfRfPy73j+p/k75g1S8e9v/AK3cXMn25ZLmBif+Crt7ZKHaOqiKEIfj/Oc6Wk7PJ/vJ&#xA;/j/NQUv5I30C82t7mnSqvDKQex4Rjkd8l/KuqG5hH4f2lA7P0MjUckr8+X+5H3oceRfMNvG1rFqV&#xA;zFAOSGDhKigN9pSgem/fLB22euI3+PJiexMfTNH8f5zP/wAofLOoaF+kBIzyWt0sbcnQxjmhYfBU&#xA;nlsTX5DIS1ss+5hwU4+o0WPAAIz4ye7p9pekZFxXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FU+/3F/wDFH/CZbs4/qd/uL/4o/wCEx2X1&#xA;O/3F/wDFH/CY7L6nf7i/+KP+Ex2X1O/3F/8AFH/CY7L6nf7i/wDij/hMdl9Tv9xf/FH/AAmOy+p3&#xA;+4v/AIo/4THZfU7/AHF/8Uf8Jjsvqd/uL/4o/wCEx2X1O/3F/wDFH/CY7L6nf7i/+KP+Ex2X1O/3&#xA;F/8AFH/CY7L6nf7i/wDij/hMdl9Tv9xf/FH/AAmOy+p3+4v/AIo/4THZfU7/AHF/8Uf8Jjsvqd/u&#xA;L/4o/wCEx2X1O/3F/wDFH/CY7L6nf7i/+KP+Ex2X1O/3F/8AFH/CY7L6nf7i/wDij/hMdl9Tv9xf&#xA;/FH/AAmOy+p3+4v/AIo/4THZfU7/AHF/8Uf8Jjsvqd/uL/4o/wCEx2X1O/3F/wDFH/CY7L6nf7i/&#xA;+KP+Ex2X1O/3F/8AFH/CY7L6nf7i/wDij/hMdl9Tv9xf/FH/AAmOy+p3+4v/AIo/4THZfU//2Q=="/>
    </rdf:Alt>
   </xmp:Thumbnails>
   <xmpMM:DerivedFrom
    stRef:instanceID="xmp.iid:1dbb54aa-7a0a-444c-bd9c-6faaa6f1150f"
    stRef:documentID="xmp.did:1dbb54aa-7a0a-444c-bd9c-6faaa6f1150f"
    stRef:originalDocumentID="uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7"
    stRef:renditionClass="proof:pdf"/>
   <xmpMM:History>
    <rdf:Seq>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:70f8aa99-76da-7d40-aa1a-1c7a0e09fb88"
      stEvt:when="2021-11-02T18:45:28+03:00"
      stEvt:softwareAgent="Adobe Illustrator 24.2 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:1dbb54aa-7a0a-444c-bd9c-6faaa6f1150f"
      stEvt:when="2021-12-02T18:51:28+03:00"
      stEvt:softwareAgent="Adobe Illustrator 24.2 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:parameters="from application/postscript to application/vnd.adobe.illustrator"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:dfb493b0-782c-384e-9c98-5099e87fabc1"
      stEvt:when="2021-12-02T18:51:32+03:00"
      stEvt:softwareAgent="Adobe Illustrator 24.2 (Windows)"
      stEvt:changed="/"/>
    </rdf:Seq>
   </xmpMM:History>
   <xmpTPg:MaxPageSize
    stDim:w="847.000000"
    stDim:h="400.000000"
    stDim:unit="Pixels"/>
   <xmpTPg:PlateNames>
    <rdf:Seq>
     <rdf:li>Cyan</rdf:li>
     <rdf:li>Magenta</rdf:li>
     <rdf:li>Yellow</rdf:li>
     <rdf:li>Black</rdf:li>
    </rdf:Seq>
   </xmpTPg:PlateNames>
   <xmpTPg:SwatchGroups>
    <rdf:Seq>
     <rdf:li
      xmpG:groupName="Default Swatch Group"
      xmpG:groupType="0"/>
    </rdf:Seq>
   </xmpTPg:SwatchGroups>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                 
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1  -1  scale 0 -400 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 400 li
847 400 li
847 0 li
cp
clp
847 400 mo
0 400 li
0 0 li
847 0 li
847 400 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.929412 .866667 .839216 rgb
f
77.2783 122.791 mo
77.2783 122.791 69.8296 117.44 54.6665 125.001 cv
41.0361 131.797 25.3335 180.25 39 195.625 cv
52.6665 211 72.8643 203.925 72.8643 203.925 cv
77.2783 122.791 li
cp
.486275 .376471 .32549 rgb
f
537.38 209.206 mo
537.38 209.206 568.333 208.05 569.667 181.358 cv
571 154.667 569.392 119.723 550.535 114.684 cv
531.679 109.645 525.521 116.373 525.521 116.373 cv
537.38 209.206 li
cp
.968627 .45098 .309804 rgb
f
468.01 173.615 mo
468.01 173.615 456.018 171.762 454.606 174.706 cv
453.194 177.649 463.221 178.837 463.221 178.837 cv
456.865 185.815 li
456.865 185.815 450.6 194.135 450.685 196.312 cv
450.77 198.487 454.997 196.616 454.997 196.616 cv
454.997 196.616 450.394 202.485 454.002 202.823 cv
457.61 203.161 461.259 199.341 461.259 199.341 cv
461.259 199.341 456.406 204.939 460.781 204.96 cv
463.147 204.972 477.407 194.068 480.875 184.313 cv
484.343 174.558 475.404 175.49 475.404 175.49 cv
468.01 173.615 li
cp
.988235 .639216 .592157 rgb
f
464.35 196.619 mo
464.194 196.619 464.049 196.521 463.995 196.366 cv
460.253 185.566 li
460.186 185.371 460.289 185.157 460.484 185.089 cv
460.681 185.021 460.895 185.125 460.962 185.321 cv
464.704 196.121 li
464.771 196.316 464.668 196.53 464.473 196.598 cv
464.432 196.612 464.391 196.619 464.35 196.619 cv
cp
0 0 0 rgb
f
469.679 184.25 mo
469.617 184.25 469.555 184.249 469.491 184.246 cv
467.207 184.154 464.99 182.401 462.902 179.035 cv
462.793 178.859 462.847 178.628 463.023 178.519 cv
463.199 178.41 463.432 178.464 463.539 178.64 cv
465.486 181.778 467.497 183.412 469.515 183.496 cv
471.871 183.605 473.454 181.49 473.469 181.469 cv
473.594 181.301 473.829 181.268 473.993 181.391 cv
474.16 181.514 474.195 181.748 474.072 181.915 cv
474 182.012 472.318 184.25 469.679 184.25 cv
cp
f
468 170.055 mo
468 170.055 479.214 160.856 488 147.667 cv
496.786 134.478 498.333 123.2 502.667 118.6 cv
507 114 494.667 189.275 494.667 189.275 cv
494.667 189.275 484.667 193.667 480 195 cv
475.333 196.333 475.333 196.333 475.333 196.333 cv
468 170.055 li
cp
.27451 .27451 .498039 rgb
f
516.94 323.326 mo
516.822 337.278 li
544.667 334.625 li
544.667 323.326 li
516.94 323.326 li
cp
.988235 .639216 .592157 rgb
f
473.89 321.506 mo
473.771 335.458 li
501.616 332.805 li
501.616 321.506 li
473.89 321.506 li
cp
.956863 .572549 .509804 rgb
f
494.667 173.851 mo
494.667 173.851 464 230 460.333 241.667 cv
456.667 253.333 462.479 327.207 462.479 327.207 cv
505.667 327.667 li
508.667 288.333 li
508.667 288.333 504.179 271.667 503.59 266.667 cv
503 261.667 508.667 247.413 508.667 247.413 cv
511.225 196.333 li
495.498 184.111 li
494.667 173.851 li
cp
1 .74902 .411765 rgb
f
470.333 333.625 mo
470.333 333.625 435.667 356.421 434 361.211 cv
432.333 366 437.333 367.899 439.667 368.116 cv
442 368.333 500.076 364.219 500.076 364.219 cv
505 346.536 li
505 346.536 504.179 331.556 503.59 331.111 cv
503 330.667 471.667 331.143 471.667 331.143 cv
470.333 333.625 li
cp
.372549 .372549 .756863 rgb
f
547.333 191.312 mo
547.333 191.312 552.667 259 553.667 291.667 cv
554.667 324.333 553.667 327.207 553.667 327.207 cv
553.667 327.207 532.007 329 518.837 328.333 cv
505.667 327.667 505.667 327.667 505.667 327.667 cv
507.667 202.758 li
489.22 191.582 li
494.667 173.851 li
543.814 175.265 li
547.333 191.312 li
cp
1 .74902 .411765 rgb
f
505 249.701 mo
504.782 249.695 504.619 249.522 504.625 249.315 cv
505.981 201.167 li
493.614 194.682 li
493.431 194.585 493.359 194.359 493.456 194.175 cv
493.554 193.993 493.779 193.922 493.962 194.018 cv
506.537 200.611 li
506.664 200.678 506.742 200.811 506.738 200.954 cv
505.375 249.337 li
505.369 249.54 505.202 249.701 505 249.701 cv
cp
.466667 .447059 .827451 rgb
f
494.443 257.838 mo
493.848 257.838 493.356 258.063 492.946 258.521 cv
492.574 258.938 492.458 259.335 492.591 259.735 cv
493.257 261.749 499.37 263.563 502.661 264.334 cv
501.168 262.46 497.317 257.976 494.563 257.841 cv
494.523 257.839 494.482 257.838 494.443 257.838 cv
cp
503.59 265.298 mo
503.564 265.298 503.54 265.295 503.515 265.29 cv
502.43 265.068 492.891 263.03 491.879 259.971 cv
491.727 259.512 491.691 258.8 492.388 258.021 cv
492.977 257.362 493.708 257.06 494.601 257.092 cv
498.423 257.279 503.671 264.398 503.893 264.701 cv
503.984 264.826 503.989 264.995 503.905 265.125 cv
503.836 265.234 503.716 265.298 503.59 265.298 cv
cp
f
515.327 331.111 mo
515.327 331.111 490.106 353.96 489.22 358.646 cv
488.333 363.333 491 365.667 492.667 366.333 cv
494.333 367 527.246 366.667 536.29 366.333 cv
545.333 366 546.931 359.946 547.799 354.64 cv
548.667 349.333 545.333 331.143 545.333 331.143 cv
515.327 331.111 li
cp
f
765.167 110.187 mo
765.167 110.187 755.549 117.44 754.833 126.25 cv
753.75 139.583 768.917 133.75 770.583 125.25 cv
772.25 116.75 765.167 110.187 765.167 110.187 cv
cp
0 0 0 rgb
f
804.667 179.667 mo
809.714 195.444 li
802.152 196.333 li
799.143 183.111 li
804.667 179.667 li
cp
.439216 .309804 .278431 rgb
f
742.483 310.667 mo
746.801 333.333 li
761.652 341.667 li
775.364 337 li
773.169 310.667 li
742.483 310.667 li
cp
.94902 .494118 .392157 rgb
f
744.704 322.326 mo
776.749 322.326 li
782.152 337 li
746.801 333.333 li
744.704 322.326 li
cp
1 1 1 rgb
f
779.11 337 mo
770.67 353.12 li
765.33 363.33 li
765.33 363.33 712.67 365.33 710 363.33 cv
707.33 361.33 707.33 355.67 710 353.33 cv
712.67 351 744 334 744 334 cv
744 334 744 329.33 745.95 328.88 cv
747.91 328.43 760.89 334 760.89 334 cv
776.04 328.86 li
779.11 337 li
cp
.223529 .223529 .447059 rgb
f
770.67 353.12 mo
765.33 363.33 li
765.33 363.33 712.67 365.33 710 363.33 cv
707.33 361.33 707.33 355.67 710 353.33 cv
710 353.33 746.14 356 766.24 353.33 cv
768.14 353.08 769.59 353.02 770.67 353.12 cv
cp
.909804 .396078 .27451 rgb
f
771.944 313.444 mo
775.364 337 li
800.667 337 li
801.733 313.444 li
771.944 313.444 li
cp
1 .572549 .501961 rgb
f
775.364 337 mo
773.654 325.223 li
801.2 325.223 li
800.667 337 li
775.364 337 li
cp
1 1 1 rgb
f
808.44 359 mo
808.44 361.89 806.67 365.89 800.44 367.22 cv
794.22 368.56 761.68 367.22 760.67 366.11 cv
760.13 365.53 759.79 363.17 759.59 361.05 cv
759.37 358.8 759.93 356.53 761.17 354.64 cv
774.49 334.33 li
774.49 334.33 778.16 330.56 785.3 331.22 cv
792.44 331.89 796.02 334.33 796.02 334.33 cv
796.02 334.33 799.33 330.98 800.89 332.1 cv
802.18 333.03 806.52 348.93 807.97 355.98 cv
808.27 357.43 808.44 358.51 808.44 359 cv
cp
.27451 .27451 .498039 rgb
f
747.709 183.845 mo
747.709 183.845 739.091 214.748 735.409 240.906 cv
731.729 267.063 729.662 309.505 732.058 311.082 cv
734.452 312.66 762.556 314.6 762.556 314.6 cv
762.556 314.6 772.029 318.191 788.387 317.752 cv
800.259 317.433 809.914 314.652 809.914 314.652 cv
809.914 314.652 808.192 198.46 799.242 180.519 cv
792.237 166.478 747.709 183.845 747.709 183.845 cv
cp
1 .74902 .411765 rgb
f
747.543 178.525 mo
747.543 185.222 li
747.543 185.222 764.515 189.111 778.444 188.111 cv
792.374 187.111 797.58 184.667 797.58 184.667 cv
803.5 150.667 li
785.704 125.623 li
771.15 124.444 li
735.667 150.167 li
744.333 173.667 li
747.543 178.525 li
cp
.466667 .447059 .827451 rgb
f
764.304 109.279 mo
764.304 109.279 760.833 105.443 761.833 99.5 cv
762.512 95.4707 764.304 94.1665 764.304 94.1665 cv
764.304 94.1665 761.573 88.6665 769.703 89 cv
777.833 89.3335 782.617 93.3252 782.617 93.3252 cv
782.617 93.3252 786.333 91.5 788 95.8335 cv
789.667 100.167 788 106.56 788 106.56 cv
764.304 109.279 li
cp
0 0 0 rgb
f
758.823 169.667 mo
765.408 139 li
788.305 139 li
783.144 171.478 li
758.823 169.667 li
cp
.678431 .627451 .584314 rgb
f
783.13 203.67 mo
779.89 205.69 776.04 203.67 776.04 203.67 cv
776.04 203.67 766.21 189.13 761.27 170.05 cv
761.19 169.75 761.12 169.45 761.05 169.15 cv
760.08 165.3 759.33 161.28 758.91 157.16 cv
758.87 156.89 758.85 156.63 758.82 156.36 cv
758.37 151.51 758.1 147.47 757.98 144.11 cv
761.71 144.11 li
762.81 139 li
765.48 139 li
765.58 140.6 765.71 142.31 765.89 144.11 cv
766.22 147.44 766.7 151.07 767.39 154.86 cv
768.34 160.01 769.68 165.45 771.59 170.81 cv
771.79 171.39 772 171.97 772.22 172.55 cv
780.67 194.78 784.81 197.44 784.81 197.44 cv
784.81 197.44 786.68 201.44 783.13 203.67 cv
cp
.486275 .376471 .32549 rgb
f
785.7 139 mo
780.54 171.48 li
771.59 170.81 li
761.27 170.05 li
756.22 169.67 li
756.55 168.15 li
758.91 157.16 li
761.71 144.11 li
762.81 139 li
785.7 139 li
cp
.764706 .721569 .682353 rgb
f
747.326 165.444 mo
753.104 144.111 li
772.695 144.111 li
767.157 169.838 li
747.326 165.444 li
cp
.956863 .917647 .701961 rgb
f
769.7 144.11 mo
767.39 154.86 li
764.17 169.84 li
761.05 169.15 li
756.55 168.15 li
744.33 165.44 li
750.11 144.11 li
769.7 144.11 li
cp
.996078 .988235 .898039 rgb
f
748.114 162.333 mo
748.114 162.333 755.463 161.572 757.019 161.572 cv
758.574 161.572 760.667 165.222 760.667 165.222 cv
765.328 166.568 li
760 181.556 li
760 181.556 748.915 182.996 744.333 177.667 cv
742.614 175.667 748.114 162.333 748.114 162.333 cv
cp
.94902 .494118 .392157 rgb
f
771.15 125.111 mo
771.15 125.111 757.223 125.444 743.111 137.222 cv
729 149 722.889 160.667 725.777 170.889 cv
728.667 181.111 746.777 181.556 746.777 181.556 cv
752.111 160.444 li
738.167 151.333 li
771.15 125.111 li
cp
.466667 .447059 .827451 rgb
f
778.667 165.889 mo
778.667 165.889 774.333 163.574 772.223 163.022 cv
770.223 162.5 768.716 162.598 768.716 162.598 cv
768.047 165.708 li
768.047 165.708 761.111 167.222 756.223 169.667 cv
751.333 172.111 752.223 174.333 752.223 174.333 cv
752.223 174.333 749.111 176.333 750.444 177.667 cv
751.777 179 756.889 177.667 756.889 177.667 cv
756.889 177.667 750.444 180.111 753.111 181.556 cv
755.777 183 761.652 182.556 761.652 182.556 cv
761.652 182.556 774.444 184.778 778.667 180.333 cv
782.889 175.889 778.667 165.889 778.667 165.889 cv
cp
1 .572549 .501961 rgb
f
782.152 115.978 mo
781.903 125.902 li
781.903 125.902 780.042 128.71 774.225 129.037 cv
769.891 129.28 768.576 127.024 768.576 127.024 cv
769.842 118.366 li
780.384 116.323 li
782.152 115.978 li
cp
.94902 .494118 .392157 rgb
f
781.333 125.111 mo
781.333 125.111 805.444 126 817.556 145.444 cv
829.667 164.889 820.111 182.444 801.111 186 cv
782.111 189.556 772.223 184.333 772.223 184.333 cv
776.749 162.222 li
786.494 160.778 li
796.021 149.167 li
781.333 125.111 li
cp
.466667 .447059 .827451 rgb
f
765.48 139 mo
762.81 139 li
761.71 144.11 li
757.98 144.11 li
757.44 129.89 759.33 127.78 759.33 127.78 cv
765.33 125.99 li
765.33 125.99 765 131.2 765.48 139 cv
cp
.486275 .376471 .32549 rgb
f
782.152 115.373 mo
782.12 115.643 782.01 115.96 781.84 116.323 cv
779.495 121.225 771.628 123.092 769.124 123.253 cv
769.842 118.366 li
782.152 115.373 li
cp
0 0 0 rgb
f
768.196 95.6885 mo
768.196 95.6885 762.676 108.001 764.556 114.966 cv
766.436 121.931 772.774 120.899 776.574 119.592 cv
780.374 118.286 782.153 115.98 782.153 115.98 cv
782.153 115.98 785.68 117.213 788.077 113.947 cv
790.474 110.68 789.054 106.889 787.042 106.004 cv
785.031 105.119 782.615 106.555 782.615 106.555 cv
784.532 102.979 li
784.532 102.979 776.787 84.6421 768.196 95.6885 cv
cp
.94902 .494118 .392157 rgb
f
782.615 106.555 mo
782.615 106.555 777.298 107.627 773.604 101.71 cv
769.91 95.7935 770.25 93.3633 770.25 93.3633 cv
766.569 99.4717 li
766.569 99.4717 765.747 95.2363 767.44 92.5361 cv
769.135 89.8364 770.894 90.396 770.894 90.396 cv
782.617 93.3252 li
785.704 102.722 li
782.615 106.555 li
cp
0 0 0 rgb
f
768.618 111.385 mo
768.458 111.385 768.31 111.282 768.26 111.12 cv
767.451 108.483 769.317 105.807 769.397 105.694 cv
769.519 105.525 769.75 105.486 769.92 105.604 cv
770.089 105.724 770.129 105.958 770.01 106.127 cv
769.992 106.152 768.277 108.619 768.977 110.9 cv
769.037 111.098 768.926 111.308 768.729 111.369 cv
768.691 111.38 768.654 111.385 768.618 111.385 cv
cp
f
783.125 112.336 mo
783.032 112.336 782.939 112.302 782.867 112.233 cv
782.717 112.091 782.71 111.854 782.853 111.703 cv
786.222 108.153 li
786.365 108.003 786.603 107.998 786.752 108.14 cv
786.902 108.282 786.909 108.52 786.767 108.67 cv
783.397 112.22 li
783.323 112.297 783.225 112.336 783.125 112.336 cv
cp
f
786.684 111.393 mo
786.665 111.393 786.646 111.392 786.626 111.389 cv
784.304 111.03 li
784.1 110.998 783.959 110.807 783.991 110.602 cv
784.022 110.397 784.205 110.254 784.419 110.289 cv
786.741 110.647 li
786.945 110.679 787.086 110.871 787.054 111.075 cv
787.025 111.261 786.866 111.393 786.684 111.393 cv
cp
f
771.942 114.057 mo
772.708 114.256 773.783 114.407 774.194 113.951 cv
774.634 113.462 774.476 112.68 774.313 112.196 cv
771.942 114.057 li
cp
773.216 115 mo
772.224 115 771.189 114.619 771.016 114.552 cv
770.89 114.503 770.8 114.391 770.779 114.257 cv
770.76 114.124 770.813 113.99 770.919 113.907 cv
774.241 111.3 li
774.328 111.231 774.445 111.206 774.553 111.229 cv
774.662 111.252 774.755 111.323 774.806 111.423 cv
774.846 111.5 775.769 113.322 774.751 114.453 cv
774.38 114.866 773.805 115 773.216 115 cv
cp
f
766.237 101.259 mo
766.058 101.259 765.899 101.131 765.868 100.949 cv
765.832 100.745 765.969 100.55 766.173 100.515 cv
768.369 100.133 li
768.583 100.104 768.769 100.235 768.803 100.438 cv
768.839 100.642 768.702 100.836 768.498 100.872 cv
766.302 101.254 li
766.28 101.257 766.258 101.259 766.237 101.259 cv
cp
f
775.364 102.701 mo
775.307 102.701 775.249 102.688 775.195 102.66 cv
771.595 100.837 li
771.409 100.744 771.336 100.518 771.429 100.333 cv
771.522 100.147 771.75 100.075 771.933 100.168 cv
775.533 101.991 li
775.719 102.084 775.792 102.311 775.699 102.495 cv
775.633 102.625 775.501 102.701 775.364 102.701 cv
cp
f
789.332 110.187 mo
789.332 110.187 797 116.833 795.917 127.667 cv
794.833 138.5 784.091 137.109 781.835 133.156 cv
778.417 127.167 782.153 115.98 782.153 115.98 cv
782.153 115.98 788.74 117.083 789.332 110.187 cv
cp
f
766.237 106.334 mo
766.201 106.334 766.164 106.329 766.127 106.318 cv
765.93 106.257 765.818 106.047 765.879 105.85 cv
766.506 103.81 li
765.947 103.126 li
765.815 102.966 765.84 102.729 766 102.598 cv
766.158 102.469 766.396 102.49 766.527 102.651 cv
767.213 103.49 li
767.293 103.587 767.318 103.718 767.281 103.838 cv
766.596 106.069 li
766.546 106.231 766.397 106.334 766.237 106.334 cv
cp
f
772.483 106.935 mo
772.447 106.935 772.41 106.929 772.373 106.918 cv
772.176 106.857 772.064 106.647 772.125 106.45 cv
772.75 104.415 li
771.938 103.466 li
771.803 103.309 771.821 103.072 771.979 102.938 cv
772.136 102.803 772.372 102.82 772.508 102.978 cv
773.454 104.083 li
773.537 104.181 773.565 104.314 773.527 104.437 cv
772.842 106.669 li
772.792 106.831 772.644 106.935 772.483 106.935 cv
cp
f
760.667 165.597 mo
760.645 165.597 760.62 165.595 760.597 165.59 cv
753.597 164.257 li
753.394 164.218 753.26 164.022 753.299 163.818 cv
753.337 163.616 753.529 163.478 753.737 163.521 cv
760.737 164.854 li
760.94 164.893 761.074 165.089 761.035 165.292 cv
761.001 165.472 760.844 165.597 760.667 165.597 cv
cp
f
768.047 166.083 mo
767.885 166.083 767.735 165.978 767.688 165.815 cv
767.629 165.616 767.742 165.408 767.94 165.349 cv
771.838 164.196 li
772.037 164.137 772.245 164.251 772.304 164.449 cv
772.362 164.648 772.249 164.856 772.051 164.915 cv
768.153 166.068 li
768.118 166.079 768.082 166.083 768.047 166.083 cv
cp
f
752.518 174.354 mo
752.354 174.354 752.205 174.248 752.157 174.083 cv
752.1 173.885 752.215 173.677 752.413 173.619 cv
762.34 170.751 li
762.542 170.693 762.747 170.808 762.805 171.007 cv
762.862 171.206 762.747 171.414 762.549 171.472 cv
752.622 174.34 li
752.587 174.35 752.552 174.354 752.518 174.354 cv
cp
f
756.223 178.197 mo
756.061 178.197 755.911 178.091 755.862 177.927 cv
755.805 177.729 755.919 177.52 756.117 177.462 cv
762.339 175.64 li
762.538 175.583 762.746 175.696 762.805 175.895 cv
762.862 176.093 762.748 176.302 762.55 176.36 cv
756.328 178.182 li
756.293 178.192 756.258 178.197 756.223 178.197 cv
cp
f
774.314 129.368 mo
770.567 129.368 768.351 127.327 768.318 127.297 cv
768.168 127.154 768.162 126.918 768.304 126.768 cv
768.445 126.618 768.683 126.611 768.834 126.751 cv
769.012 126.92 773.283 130.811 780.211 126.921 cv
780.392 126.82 780.618 126.883 780.722 127.065 cv
780.823 127.246 780.759 127.474 780.578 127.576 cv
778.195 128.913 776.084 129.368 774.314 129.368 cv
cp
1 1 1 rgb
f
786.494 161.153 mo
786.318 161.153 786.162 161.029 786.126 160.851 cv
786.086 160.647 786.218 160.45 786.421 160.41 cv
786.554 160.384 799.719 157.792 807.333 157.792 cv
807.54 157.792 807.708 157.959 807.708 158.167 cv
807.708 158.374 807.54 158.542 807.333 158.542 cv
799.792 158.542 786.698 161.12 786.567 161.146 cv
786.542 161.15 786.518 161.153 786.494 161.153 cv
cp
f
804.784 153.54 mo
803.263 153.54 800.712 155.875 798.854 158.01 cv
802.246 156.496 805.474 154.651 805.512 153.862 cv
805.514 153.839 805.517 153.768 805.323 153.665 cv
805.164 153.579 804.982 153.54 804.784 153.54 cv
cp
797.58 159.34 mo
797.466 159.34 797.354 159.288 797.281 159.192 cv
797.179 159.057 797.18 158.869 797.284 158.735 cv
797.858 157.997 802.972 151.563 805.677 153.002 cv
806.183 153.272 806.274 153.639 806.262 153.899 cv
806.173 155.689 799.704 158.495 797.723 159.312 cv
797.677 159.331 797.628 159.34 797.58 159.34 cv
cp
f
746.801 157.35 mo
746.702 157.35 746.604 157.311 746.53 157.235 cv
746.486 157.189 742.089 152.661 738.079 151.698 cv
737.878 151.65 737.754 151.447 737.803 151.246 cv
737.851 151.046 738.044 150.92 738.255 150.969 cv
742.479 151.983 746.886 156.522 747.071 156.714 cv
747.215 156.864 747.21 157.101 747.061 157.245 cv
746.988 157.315 746.895 157.35 746.801 157.35 cv
cp
f
740.547 148.422 mo
740.517 148.422 740.472 148.436 740.4 148.492 cv
740.271 148.595 740.206 148.729 740.196 148.913 cv
740.151 149.722 741.101 151.039 741.912 151.99 cv
741.579 150.25 741.055 148.619 740.588 148.431 cv
740.578 148.427 740.565 148.422 740.547 148.422 cv
cp
742.483 153.539 mo
742.387 153.539 742.291 153.501 742.22 153.43 cv
741.926 153.139 739.355 150.541 739.447 148.872 cv
739.469 148.475 739.637 148.141 739.934 147.905 cv
740.228 147.671 740.557 147.61 740.868 147.735 cv
742.111 148.236 742.703 151.979 742.855 153.114 cv
742.876 153.273 742.794 153.428 742.65 153.5 cv
742.598 153.526 742.54 153.539 742.483 153.539 cv
cp
f
762.556 314.975 mo
762.384 314.975 762.229 314.856 762.189 314.682 cv
756.305 288.398 757.049 209.401 757.104 204.354 cv
747.962 200.286 li
747.772 200.202 747.688 199.98 747.771 199.791 cv
747.856 199.602 748.076 199.516 748.267 199.601 cv
757.634 203.769 li
757.771 203.83 757.858 203.966 757.856 204.116 cv
757.846 204.947 756.891 287.584 762.922 314.518 cv
762.967 314.72 762.84 314.92 762.638 314.966 cv
762.61 314.972 762.582 314.975 762.556 314.975 cv
cp
.2 .2 .447059 rgb
f
791.337 306.892 mo
778.834 306.892 767.442 304.955 767.271 304.925 cv
767.066 304.89 766.93 304.695 766.966 304.491 cv
767 304.288 767.178 304.146 767.399 304.187 cv
767.655 304.231 793.16 308.563 809.617 304.193 cv
809.82 304.14 810.022 304.26 810.076 304.459 cv
810.13 304.659 810.011 304.865 809.811 304.918 cv
804.237 306.398 797.645 306.892 791.337 306.892 cv
cp
f
776.04 203.67 mo
776.04 203.67 774.388 229.223 775.639 230.556 cv
776.889 231.889 783.125 232.333 783.125 232.333 cv
786.684 219.223 li
779.111 199.943 li
776.04 203.67 li
cp
.439216 .309804 .278431 rgb
f
753.681 305.627 mo
745.04 305.627 735.701 303.426 735.58 303.396 cv
735.378 303.349 735.254 303.146 735.303 302.945 cv
735.351 302.744 735.549 302.613 735.754 302.668 cv
735.91 302.705 751.448 306.366 760.806 304.19 cv
761.011 304.144 761.21 304.271 761.256 304.471 cv
761.303 304.673 761.178 304.874 760.976 304.921 cv
758.783 305.431 756.263 305.627 753.681 305.627 cv
cp
.2 .2 .447059 rgb
f
776.037 200 mo
776.037 200 778.223 217.889 779.333 217.889 cv
780.444 217.889 818 211 818.889 210.111 cv
819.777 209.223 816.667 190.778 815.111 190.333 cv
813.556 189.889 778.444 196.333 778.444 196.333 cv
776.037 200 li
cp
.486275 .376471 .32549 rgb
f
816.444 208.333 mo
816.444 208.333 819.869 223.889 819.046 224.556 cv
818.223 225.223 784.695 232.333 783.125 232.333 cv
781.556 232.333 779.111 213 779.111 213 cv
816.444 208.333 li
cp
f
788.305 216.732 mo
788.13 216.732 787.973 216.609 787.938 216.432 cv
787.896 216.229 788.027 216.03 788.23 215.99 cv
815.926 210.41 li
816.13 210.361 816.326 210.5 816.367 210.703 cv
816.408 210.906 816.277 211.104 816.074 211.145 cv
788.379 216.725 li
788.354 216.73 788.329 216.732 788.305 216.732 cv
cp
1 1 1 rgb
f
780.395 198.617 mo
779.632 198.617 779.011 199.237 779.011 200 cv
779.011 200.763 779.632 201.383 780.395 201.383 cv
781.157 201.383 781.777 200.763 781.777 200 cv
781.777 199.237 781.157 198.617 780.395 198.617 cv
cp
780.395 202.133 mo
779.218 202.133 778.261 201.176 778.261 200 cv
778.261 198.824 779.218 197.867 780.395 197.867 cv
781.57 197.867 782.527 198.824 782.527 200 cv
782.527 201.176 781.57 202.133 780.395 202.133 cv
cp
f
808.44 359 mo
808.44 361.89 806.67 365.89 800.44 367.22 cv
794.22 368.56 761.68 367.22 760.67 366.11 cv
760.13 365.53 759.79 363.17 759.59 361.05 cv
759.37 358.8 759.93 356.53 761.17 354.64 cv
761.17 354.64 763.25 357.96 783.13 358.65 cv
795.88 359.09 803.88 357.31 807.97 355.98 cv
808.27 357.43 808.44 358.51 808.44 359 cv
cp
.968627 .45098 .309804 rgb
f
791.141 346.668 mo
791.106 346.668 791.071 346.663 791.036 346.653 cv
783.887 344.574 775.284 346.637 775.198 346.657 cv
774.999 346.703 774.794 346.583 774.745 346.382 cv
774.696 346.181 774.819 345.978 775.021 345.929 cv
775.109 345.907 783.902 343.801 791.245 345.933 cv
791.444 345.99 791.559 346.198 791.501 346.397 cv
791.453 346.562 791.304 346.668 791.141 346.668 cv
cp
1 1 1 rgb
f
792.377 342.021 mo
792.343 342.021 792.308 342.017 792.272 342.007 cv
785.123 339.929 776.521 341.989 776.435 342.011 cv
776.234 342.055 776.03 341.938 775.981 341.735 cv
775.933 341.534 776.056 341.331 776.257 341.282 cv
776.346 341.26 785.138 339.152 792.481 341.286 cv
792.681 341.344 792.795 341.552 792.737 341.751 cv
792.689 341.915 792.54 342.021 792.377 342.021 cv
cp
f
743.032 342.042 mo
730.302 342.042 li
730.095 342.042 729.927 341.874 729.927 341.667 cv
729.927 341.46 730.095 341.292 730.302 341.292 cv
743.032 341.292 li
743.239 341.292 743.407 341.46 743.407 341.667 cv
743.407 341.874 743.239 342.042 743.032 342.042 cv
cp
f
746.801 337.375 mo
746.763 337.373 739.781 336.652 739.781 336.652 cv
739.575 336.631 739.425 336.447 739.446 336.241 cv
739.467 336.035 739.656 335.891 739.857 335.906 cv
746.839 336.627 li
747.045 336.648 747.195 336.832 747.174 337.038 cv
747.154 337.231 746.991 337.375 746.801 337.375 cv
cp
f
651.78 317.789 mo
651.78 317.789 663.785 327.375 663.559 328.854 cv
663.333 330.333 669.111 349.462 669.111 349.462 cv
640.336 341.667 li
640.336 317.789 li
651.78 317.789 li
cp
.909804 .396078 .27451 rgb
f
621.5 322.326 mo
621.5 336.278 li
648.889 334.777 li
648.889 321.444 li
621.5 322.326 li
cp
.988235 .639216 .592157 rgb
f
603 141.659 mo
603 141.659 580.167 161 585 189.167 cv
589.833 217.333 620.833 207.517 624.333 201.758 cv
627.833 196 627.5 171.111 627.5 171.111 cv
613.167 140.325 li
603 141.659 li
cp
.27451 .27451 .498039 rgb
f
670 173.979 mo
670 173.979 696.889 221.889 697.111 240.777 cv
697.333 259.667 658.368 322.326 658.368 322.326 cv
658.368 322.326 647.777 326.667 632.223 326.167 cv
616.667 325.667 614.223 323.889 614.223 323.889 cv
614.223 323.889 616.889 189.488 623.111 176.911 cv
629.333 164.333 670 173.979 670 173.979 cv
cp
.486275 .376471 .32549 rgb
f
690.333 124.444 mo
690.333 124.444 696.333 122.458 699.5 119.313 cv
702.667 116.167 706.167 109.279 706.167 109.279 cv
720.833 113.109 li
720.833 113.109 720.833 139 705.583 149.167 cv
691.067 158.844 678 155.239 678 155.239 cv
690.333 124.444 li
cp
.988235 .639216 .592157 rgb
f
645.556 111.018 mo
645.556 111.018 631.777 110.556 624.667 117 cv
617.556 123.444 622.223 179.667 622.223 179.667 cv
622.223 179.667 640.773 181.222 654.054 179.667 cv
667.333 178.111 673.333 176 673.333 176 cv
673.333 176 674.889 124.319 671.333 118.104 cv
667.777 111.889 645.556 111.018 645.556 111.018 cv
cp
.968627 .45098 .309804 rgb
f
629.801 113.806 mo
629.801 113.806 615.833 116.833 605.667 129.055 cv
596.269 140.353 594 154.154 594 154.154 cv
594 154.154 604.479 150.543 610.406 150.605 cv
616.333 150.667 624.167 153.333 624.167 153.333 cv
629.801 113.806 li
cp
f
660.338 86.9678 mo
660.338 86.9678 666.61 76.9268 661.649 74.6255 cv
656.689 72.3242 650.584 77.7739 650.584 77.7739 cv
650.584 77.7739 639.362 78.5117 634.971 84.4131 cv
630.58 90.3145 640.803 101.06 640.803 101.06 cv
660.338 86.9678 li
cp
0 0 0 rgb
f
642.738 103.38 mo
641.865 113.684 li
641.865 113.684 643.472 116.804 649.458 117.804 cv
653.918 118.55 655.581 117.668 655.581 117.668 cv
655.397 112.397 li
655.212 107.256 li
644.53 103.939 li
642.738 103.38 li
cp
.988235 .639216 .592157 rgb
f
644.53 103.939 mo
644.532 104.223 644.611 104.564 644.745 104.958 cv
646.614 110.301 652.823 111.945 655.397 112.397 cv
655.212 107.256 li
644.53 103.939 li
cp
0 0 0 rgb
f
659.5 83.9644 mo
659.5 83.9644 663.813 97.3413 661.072 104.338 cv
658.332 111.335 651.887 109.544 648.102 107.758 cv
644.316 105.972 642.736 103.383 642.736 103.383 cv
642.736 103.383 638.945 104.258 636.836 100.603 cv
634.727 96.9473 636.629 93.1841 638.813 92.4971 cv
640.995 91.8101 643.333 93.5713 643.333 93.5713 cv
641.756 89.6509 li
641.756 89.6509 651.864 71.5488 659.5 83.9644 cv
cp
.988235 .639216 .592157 rgb
f
642.516 99.0664 mo
642.429 99.0664 642.343 99.0366 642.271 98.9761 cv
637.912 95.2441 li
637.755 95.1099 637.736 94.873 637.871 94.7158 cv
638.007 94.5571 638.242 94.5405 638.4 94.6748 cv
642.76 98.4067 li
642.917 98.541 642.936 98.7778 642.801 98.9351 cv
642.727 99.022 642.621 99.0664 642.516 99.0664 cv
cp
0 0 0 rgb
f
638.289 98.6504 mo
638.109 98.6504 637.95 98.521 637.919 98.3379 cv
637.885 98.1338 638.022 97.9399 638.227 97.9058 cv
641.351 97.3779 li
641.563 97.3438 641.749 97.481 641.783 97.6851 cv
641.817 97.8892 641.68 98.083 641.476 98.1172 cv
638.352 98.645 li
638.33 98.6489 638.31 98.6504 638.289 98.6504 cv
cp
f
650.443 88.6323 mo
650.353 88.6323 650.262 88.5996 650.19 88.5337 cv
650.037 88.394 650.027 88.1567 650.167 88.0039 cv
651.698 86.332 653.514 86.813 654.26 87.3022 cv
654.432 87.4155 654.479 87.6465 654.367 87.8193 cv
654.256 87.9922 654.021 88.042 653.85 87.9302 cv
653.783 87.8867 652.197 86.8989 650.72 88.5107 cv
650.646 88.5913 650.545 88.6323 650.443 88.6323 cv
cp
f
660.479 88.9951 mo
660.384 88.9951 660.289 88.9595 660.216 88.8882 cv
659.179 87.8726 657.936 88.4526 657.922 88.4575 cv
657.739 88.5479 657.512 88.4692 657.422 88.2822 cv
657.332 88.0957 657.41 87.8716 657.598 87.7817 cv
657.667 87.7476 659.332 86.9741 660.741 88.3521 cv
660.889 88.4971 660.892 88.7344 660.746 88.8823 cv
660.673 88.9575 660.576 88.9951 660.479 88.9951 cv
cp
f
657.912 98.6504 mo
657.866 98.6504 657.82 98.6421 657.775 98.6245 cv
657.582 98.5488 657.487 98.3311 657.563 98.1382 cv
658.941 94.626 656.563 93.3452 656.461 93.2925 cv
656.277 93.1973 656.205 92.9717 656.299 92.7881 cv
656.394 92.604 656.614 92.5303 656.802 92.624 cv
656.832 92.6396 659.896 94.249 658.261 98.4126 cv
658.203 98.5601 658.062 98.6504 657.912 98.6504 cv
cp
f
660.013 93.9419 mo
659.835 93.9419 659.677 93.8154 659.644 93.6348 cv
659.198 91.2168 li
659.161 91.0132 659.296 90.8179 659.499 90.7803 cv
659.708 90.7407 659.899 90.8779 659.937 91.0811 cv
660.382 93.499 li
660.419 93.7026 660.284 93.8979 660.081 93.9355 cv
660.058 93.9399 660.035 93.9419 660.013 93.9419 cv
cp
f
653.481 93.5166 mo
653.304 93.5166 653.146 93.3901 653.112 93.2095 cv
652.667 90.7915 li
652.63 90.5879 652.765 90.3926 652.968 90.355 cv
653.176 90.3145 653.368 90.4526 653.405 90.6558 cv
653.851 93.0737 li
653.888 93.2773 653.753 93.4727 653.55 93.5103 cv
653.526 93.5146 653.504 93.5166 653.481 93.5166 cv
cp
f
660.338 86.9678 mo
660.338 86.9678 659.395 84.8013 656.825 84.5659 cv
654.257 84.3306 652.603 86.0137 652.603 86.0137 cv
652.603 86.0137 653.363 90.4375 649.673 92.4404 cv
645.983 94.4434 643.333 93.5713 643.333 93.5713 cv
640.874 92.4526 li
639.329 88.5908 li
647.333 81.3086 li
657.25 77.1025 li
661.715 81.9043 li
660.338 86.9678 li
cp
f
655.013 102.536 mo
654.93 102.536 652.323 102.51 651.429 100.091 cv
651.356 99.897 651.456 99.6812 651.65 99.6094 cv
651.847 99.5361 652.061 99.6372 652.132 99.8311 cv
652.844 101.755 654.878 101.786 655.005 101.786 cv
655.216 101.786 655.384 101.952 655.385 102.158 cv
655.387 102.365 655.222 102.534 655.015 102.536 cv
655.015 102.536 655.014 102.536 655.013 102.536 cv
cp
f
625.697 115.083 mo
625.697 115.083 627.628 129.055 625.93 139 cv
624.116 149.624 618.167 163.889 618.167 163.889 cv
621.502 169.055 li
621.502 169.055 625.644 167.032 628.04 163.65 cv
631 159.472 636.833 146.667 636.833 130.833 cv
636.833 115 635.727 111.595 635.727 111.595 cv
635.727 111.595 627.794 113.062 625.697 115.083 cv
cp
.27451 .27451 .498039 rgb
f
668.081 115.373 mo
668.081 115.373 675.5 119.412 682 120.539 cv
688.5 121.667 692.5 122.159 692.5 122.159 cv
692.5 122.159 691.833 139.426 692.5 148.046 cv
693.167 156.667 693.5 158.167 693.5 158.167 cv
693.5 158.167 675.167 160.808 670.333 154.154 cv
665.5 147.5 668.081 115.373 668.081 115.373 cv
cp
.968627 .45098 .309804 rgb
f
595.238 153.747 mo
595.238 153.747 585.333 181.5 601.833 184.833 cv
618.333 188.167 628 152.333 628 152.333 cv
616.5 146.667 li
610.406 150.605 li
610.406 150.605 599.5 151.333 595.238 153.747 cv
cp
.988235 .639216 .592157 rgb
f
616.5 146.667 mo
616.5 146.667 617.167 140.057 617.833 137.028 cv
618.5 134 621.5 131.667 621.5 131.667 cv
621.5 131.667 624.885 128.062 626.333 128.015 cv
627.782 127.969 629 130.333 629 130.333 cv
629 130.333 634.833 133.267 636.833 135.05 cv
638.833 136.833 640.157 141.333 639.329 143.333 cv
638.5 145.333 636.333 148.926 635 148.046 cv
633.667 147.167 633.875 144.111 633.875 144.111 cv
633.875 144.111 630 154.313 623.167 155.24 cv
616.333 156.167 616.5 146.667 616.5 146.667 cv
cp
f
658.368 112.453 mo
658.368 112.453 662.833 117.529 666.667 128.015 cv
670.5 138.5 673.674 158.167 673.674 158.167 cv
673.674 158.167 673.782 127.685 672.115 120.539 cv
670.449 113.393 658.368 112.453 658.368 112.453 cv
cp
.27451 .27451 .498039 rgb
f
707.119 101.71 mo
707.119 101.71 709.771 89.8682 713.026 89.6284 cv
716.282 89.3882 713.729 99.1567 713.729 99.1567 cv
722.546 95.7856 li
722.546 95.7856 732.578 92.9888 734.573 93.8618 cv
736.568 94.7349 733.283 97.9883 733.283 97.9883 cv
733.283 97.9883 740.427 95.8442 739.425 99.3271 cv
738.423 102.81 733.535 104.813 733.535 104.813 cv
733.535 104.813 740.519 102.338 738.941 106.419 cv
738.089 108.625 722.732 117.923 712.385 117.591 cv
702.037 117.26 706.167 109.279 706.167 109.279 cv
707.119 101.71 li
cp
.988235 .639216 .592157 rgb
f
729.523 106.935 mo
729.438 106.935 729.351 106.905 729.28 106.845 cv
720.59 99.4199 li
720.432 99.2852 720.413 99.0488 720.548 98.8911 cv
720.682 98.7334 720.919 98.7144 721.076 98.8496 cv
729.767 106.274 li
729.925 106.409 729.943 106.646 729.809 106.803 cv
729.734 106.89 729.629 106.935 729.523 106.935 cv
cp
0 0 0 rgb
f
712.537 110.396 mo
712.372 110.396 712.221 110.286 712.176 110.119 cv
712.121 109.919 712.239 109.713 712.439 109.659 cv
712.465 109.652 715.005 108.938 715.77 106.717 cv
716.428 104.808 715.641 102.339 713.429 99.3813 cv
713.305 99.2153 713.339 98.9805 713.505 98.8564 cv
713.672 98.7334 713.905 98.7666 714.03 98.9321 cv
716.401 102.105 717.225 104.809 716.477 106.969 cv
715.577 109.567 712.754 110.351 712.634 110.383 cv
712.602 110.392 712.569 110.396 712.537 110.396 cv
cp
f
619.777 136.441 mo
619.731 136.441 619.686 136.433 619.641 136.416 cv
619.448 136.34 619.353 136.123 619.428 135.93 cv
621.15 131.53 li
621.227 131.336 621.445 131.242 621.637 131.317 cv
621.829 131.393 621.925 131.61 621.85 131.803 cv
620.127 136.203 li
620.068 136.351 619.927 136.441 619.777 136.441 cv
cp
f
633.875 144.486 mo
633.832 144.486 633.788 144.479 633.746 144.464 cv
633.599 144.41 633.5 144.269 633.5 144.111 cv
633.5 141.659 li
633.5 141.452 633.668 141.284 633.875 141.284 cv
634.082 141.284 634.25 141.452 634.25 141.659 cv
634.25 143.083 li
635.651 141.418 li
635.785 141.259 636.021 141.24 636.18 141.372 cv
636.339 141.505 636.358 141.742 636.226 141.9 cv
634.162 144.353 li
634.089 144.439 633.983 144.486 633.875 144.486 cv
cp
f
652.265 118.449 mo
645.834 118.449 641.638 113.991 641.59 113.938 cv
641.449 113.786 641.459 113.549 641.611 113.409 cv
641.762 113.269 641.999 113.277 642.141 113.43 cv
642.194 113.487 647.608 119.227 655.492 117.304 cv
655.69 117.254 655.896 117.378 655.945 117.58 cv
655.994 117.781 655.871 117.983 655.67 118.033 cv
654.479 118.324 653.34 118.449 652.265 118.449 cv
cp
.466667 .447059 .827451 rgb
f
658.368 322.701 mo
658.14 322.688 657.981 322.511 657.994 322.305 cv
660.554 278.375 659.647 207.054 659.638 206.338 cv
659.636 206.204 659.706 206.079 659.821 206.011 cv
673.483 197.919 li
673.663 197.814 673.893 197.872 673.997 198.051 cv
674.103 198.229 674.044 198.459 673.866 198.564 cv
660.391 206.545 li
660.444 210.942 661.233 279.6 658.742 322.348 cv
658.73 322.547 658.565 322.701 658.368 322.701 cv
cp
1 1 1 rgb
f
672.039 242.978 mo
671.953 242.978 671.866 242.981 671.776 242.989 cv
668.364 243.308 663.174 249.357 661.22 251.785 cv
665.425 250.283 673.32 247.001 673.84 244.57 cv
673.924 244.178 673.791 243.838 673.422 243.499 cv
673.039 243.149 672.585 242.978 672.039 242.978 cv
cp
660.139 252.93 mo
660.021 252.93 659.906 252.874 659.834 252.773 cv
659.738 252.641 659.74 252.461 659.839 252.33 cv
660.134 251.936 667.125 242.67 671.706 242.243 cv
672.581 242.16 673.329 242.398 673.928 242.946 cv
674.637 243.596 674.67 244.273 674.573 244.728 cv
673.805 248.32 661.642 252.451 660.257 252.91 cv
660.218 252.924 660.178 252.93 660.139 252.93 cv
cp
f
624.467 195.807 mo
624.292 195.807 624.135 195.684 624.1 195.506 cv
624.059 195.303 624.189 195.105 624.393 195.064 cv
631.166 193.697 634.753 185.134 634.789 185.048 cv
634.868 184.856 635.087 184.764 635.278 184.844 cv
635.47 184.922 635.562 185.141 635.482 185.333 cv
635.332 185.7 631.711 194.352 624.541 195.8 cv
624.516 195.805 624.491 195.807 624.467 195.807 cv
cp
f
619.037 330.137 mo
619.037 330.137 649.777 328.771 650 329.663 cv
650.223 330.556 650.889 336.64 650.889 336.64 cv
680.667 353.074 li
680.667 353.074 690.889 356.088 691.111 361.211 cv
691.333 366.333 683.111 367.007 680.444 367.781 cv
677.777 368.556 625.649 367.861 620.371 366.981 cv
616.371 366.315 619.037 330.137 619.037 330.137 cv
cp
.968627 .45098 .309804 rgb
f
657.76 349.837 mo
657.601 349.837 657.458 349.736 657.405 349.584 cv
657.351 349.427 657.407 349.253 657.543 349.156 cv
662.23 345.829 li
648.747 346.91 li
648.571 346.931 648.432 346.829 648.37 346.679 cv
648.308 346.527 648.351 346.354 648.476 346.249 cv
655.426 340.413 li
655.585 340.281 655.82 340.302 655.954 340.459 cv
656.087 340.617 656.066 340.854 655.908 340.987 cv
649.856 346.068 li
663.528 344.973 li
663.714 344.951 663.853 345.06 663.911 345.219 cv
663.969 345.377 663.913 345.555 663.775 345.652 cv
659.022 349.025 li
672.794 348.363 li
672.999 348.365 673.177 348.514 673.187 348.721 cv
673.196 348.927 673.036 349.103 672.829 349.113 cv
657.777 349.837 li
657.771 349.837 657.766 349.837 657.76 349.837 cv
cp
.2 .2 .447059 rgb
f
494.667 173.851 mo
494.667 173.851 494.333 124.533 502.667 118.6 cv
511 112.667 541 115.289 548.333 116.978 cv
555.667 118.667 542.335 182.733 542.335 182.733 cv
542.335 182.733 513.667 181.672 494.667 173.851 cv
cp
.27451 .27451 .498039 rgb
f
535.503 181.358 mo
529.556 186.52 li
540.223 200.943 li
547.799 197.333 li
535.503 181.358 li
cp
.956863 .572549 .509804 rgb
f
545 202.758 mo
545 202.758 575.667 189.801 581.333 172.478 cv
587 155.154 571.333 131.919 563.167 124.126 cv
555 116.333 544.966 116.373 544.966 116.373 cv
546.132 162.572 li
531.602 178.822 li
545 202.758 li
cp
.27451 .27451 .498039 rgb
f
540.223 201.318 mo
540.106 201.318 539.992 201.265 539.919 201.163 cv
527.72 184.332 li
527.599 184.164 527.636 183.929 527.804 183.808 cv
527.97 183.685 528.205 183.724 528.327 183.891 cv
540.526 200.723 li
540.647 200.891 540.61 201.125 540.442 201.247 cv
540.376 201.295 540.299 201.318 540.223 201.318 cv
cp
.466667 .447059 .827451 rgb
f
535.717 79.2222 mo
535.717 79.2222 535.333 76.7778 537.667 77.7778 cv
540 78.7778 539 81.2222 537.667 80.8887 cv
536.333 80.5557 535.717 79.2222 535.717 79.2222 cv
cp
1 .670588 .313726 rgb
f
540.223 94.6528 mo
540.223 94.6528 539.856 101.245 536.889 101.548 cv
533.921 101.851 529.556 98.1006 529.556 98.1006 cv
531.602 90.6812 li
540.223 94.6528 li
cp
0 0 0 rgb
f
517.574 92.7778 mo
517.574 92.7778 507.889 89.6665 506.444 85.5557 cv
505 81.4443 523.301 87.6665 523.301 87.6665 cv
517.574 92.7778 li
cp
1 .670588 .313726 rgb
f
530.941 107.033 mo
530.85 117.373 li
530.85 117.373 528.959 120.329 522.905 120.767 cv
518.396 121.093 516.822 120.06 516.822 120.06 cv
517.497 114.829 li
518.161 109.727 li
529.105 107.421 li
530.941 107.033 li
cp
.988235 .639216 .592157 rgb
f
529.105 107.421 mo
529.077 107.704 528.967 108.036 528.796 108.417 cv
526.437 113.561 520.102 114.619 517.497 114.829 cv
518.161 109.727 li
529.105 107.421 li
cp
0 0 0 rgb
f
516.065 86.1372 mo
516.065 86.1372 510.523 99.0537 512.599 106.276 cv
514.674 113.498 521.259 112.315 525.193 110.891 cv
529.129 109.466 530.943 107.035 530.943 107.035 cv
530.943 107.035 534.636 108.26 537.078 104.817 cv
539.52 101.375 537.977 97.4502 535.866 96.563 cv
533.757 95.6753 531.265 97.2104 531.265 97.2104 cv
533.201 93.4546 li
533.201 93.4546 524.826 74.4878 516.065 86.1372 cv
cp
.988235 .639216 .592157 rgb
f
531.602 102.76 mo
531.484 102.76 531.368 102.705 531.295 102.601 cv
531.176 102.432 531.216 102.198 531.386 102.079 cv
536.074 98.77 li
536.241 98.6509 536.477 98.6899 536.597 98.8599 cv
536.716 99.0293 536.676 99.2632 536.506 99.3823 cv
531.817 102.691 li
531.752 102.737 531.677 102.76 531.602 102.76 cv
cp
0 0 0 rgb
f
535.848 102.74 mo
535.815 102.74 535.783 102.736 535.751 102.727 cv
532.69 101.91 li
532.49 101.857 532.371 101.651 532.425 101.451 cv
532.479 101.251 532.686 101.132 532.884 101.186 cv
535.944 102.002 li
536.145 102.056 536.264 102.261 536.21 102.461 cv
536.165 102.629 536.014 102.74 535.848 102.74 cv
cp
f
524.682 91.6313 mo
524.568 91.6313 524.456 91.5801 524.383 91.4829 cv
523.05 89.7231 521.393 90.5752 521.323 90.6123 cv
521.139 90.7075 520.914 90.6396 520.816 90.4561 cv
520.719 90.2734 520.789 90.0464 520.972 89.9492 cv
521.759 89.5327 523.61 89.2212 524.98 91.0298 cv
525.105 91.1948 525.073 91.4302 524.908 91.5552 cv
524.84 91.6064 524.761 91.6313 524.682 91.6313 cv
cp
f
514.656 91.0562 mo
514.547 91.0562 514.439 91.0088 514.365 90.9175 cv
514.234 90.7563 514.259 90.52 514.42 90.3896 cv
515.954 89.146 517.535 90.0747 517.603 90.1152 cv
517.78 90.2222 517.837 90.4526 517.73 90.6299 cv
517.624 90.8076 517.395 90.8652 517.217 90.7583 cv
517.162 90.7261 516.003 90.0713 514.893 90.9727 cv
514.823 91.0288 514.739 91.0562 514.656 91.0562 cv
cp
f
516.471 102.052 mo
516.305 102.052 516.153 101.942 516.108 101.774 cv
515.375 99.0435 517.159 95.231 517.235 95.0698 cv
517.324 94.8833 517.549 94.8032 517.734 94.8916 cv
517.922 94.9805 518.002 95.2036 517.913 95.3911 cv
517.896 95.4277 516.171 99.1162 516.833 101.58 cv
516.887 101.78 516.768 101.986 516.568 102.04 cv
516.535 102.048 516.503 102.052 516.471 102.052 cv
cp
f
514.659 96.0249 mo
514.626 96.0249 514.592 96.0205 514.558 96.0107 cv
514.358 95.9546 514.242 95.7476 514.298 95.5479 cv
514.966 93.1821 li
515.022 92.9834 515.226 92.8667 515.429 92.9233 cv
515.628 92.9795 515.744 93.1865 515.688 93.3862 cv
515.021 95.752 li
514.974 95.917 514.823 96.0249 514.659 96.0249 cv
cp
f
521.201 96.2109 mo
521.168 96.2109 521.133 96.2065 521.1 96.1968 cv
520.899 96.1406 520.784 95.9331 520.84 95.7339 cv
521.509 93.3682 li
521.565 93.1694 521.773 93.0522 521.972 93.1094 cv
522.172 93.1655 522.287 93.373 522.231 93.5723 cv
521.563 95.938 li
521.516 96.103 521.365 96.2109 521.201 96.2109 cv
cp
f
515.327 88.0127 mo
515.327 88.0127 516.092 86.9805 518.672 86.9858 cv
521.251 86.9912 522.741 88.8213 522.741 88.8213 cv
522.741 88.8213 522.957 93.4976 526.444 95.8359 cv
529.932 98.1743 531.265 97.2104 531.265 97.2104 cv
533.817 96.3262 li
535.717 92.6255 li
528.427 84.6284 li
519.667 80.8887 li
515.327 85.7144 li
515.327 88.0127 li
cp
f
519.038 105.055 mo
518.891 105.055 518.803 105.047 518.798 105.046 cv
518.592 105.025 518.443 104.841 518.465 104.635 cv
518.485 104.431 518.652 104.271 518.875 104.3 cv
518.962 104.308 521.023 104.49 521.92 102.622 cv
522.01 102.436 522.233 102.356 522.42 102.446 cv
522.606 102.536 522.686 102.76 522.596 102.946 cv
521.669 104.878 519.719 105.055 519.038 105.055 cv
cp
f
514.832 85.5566 mo
514.832 85.5566 518.646 74.7778 531.602 77 cv
544.556 79.2222 540.667 95.8359 540.667 95.8359 cv
534.317 93.7744 li
514.832 85.5566 li
cp
1 .74902 .411765 rgb
f
511.225 84.4307 mo
511.225 84.4307 522.258 87.7744 527.444 90.0063 cv
531.521 91.7607 534.985 94.0498 534.985 94.0498 cv
534.985 94.0498 521.535 88.4004 516.308 88.4644 cv
514.3 88.4888 513 89.2402 513 89.2402 cv
511.225 84.4307 li
cp
1 .670588 .313726 rgb
f
546.132 162.572 mo
546.132 162.572 540.093 148 537.38 132.667 cv
534.667 117.333 534.317 114.426 534.317 114.426 cv
548.333 116.127 li
548.333 116.127 542.931 143.81 546.132 162.572 cv
cp
.968627 .45098 .309804 rgb
f
516.497 114.829 mo
516.497 114.829 509.743 122.137 503.59 135.434 cv
497.436 148.731 494.665 156.304 494.665 156.304 cv
494.665 156.304 499.253 121.737 504.661 116.978 cv
508.667 113.453 516.497 114.829 516.497 114.829 cv
cp
f
606.796 203.31 mo
596.38 203.31 592.014 195.708 591.962 195.614 cv
591.861 195.433 591.927 195.205 592.107 195.104 cv
592.284 195.005 592.516 195.067 592.618 195.25 cv
592.864 195.691 598.826 206.01 614.114 201.398 cv
614.312 201.338 614.522 201.451 614.582 201.649 cv
614.642 201.848 614.529 202.057 614.331 202.117 cv
611.531 202.961 609.024 203.31 606.796 203.31 cv
cp
.466667 .447059 .827451 rgb
f
554.111 319.164 mo
515.327 319.164 li
515.12 319.164 514.952 318.996 514.952 318.789 cv
514.952 318.582 515.12 318.414 515.327 318.414 cv
554.111 318.414 li
554.318 318.414 554.486 318.582 554.486 318.789 cv
554.486 318.996 554.318 319.164 554.111 319.164 cv
cp
f
503.59 319.164 mo
468.496 319.164 li
468.289 319.164 468.121 318.996 468.121 318.789 cv
468.121 318.582 468.289 318.414 468.496 318.414 cv
503.59 318.414 li
503.797 318.414 503.965 318.582 503.965 318.789 cv
503.965 318.996 503.797 319.164 503.59 319.164 cv
cp
f
437.758 360.168 mo
437.561 360.168 437.395 360.014 437.384 359.814 cv
437.372 359.607 437.529 359.431 437.736 359.419 cv
489.198 356.486 li
489.43 356.448 489.583 356.633 489.594 356.839 cv
489.605 357.046 489.448 357.223 489.241 357.234 cv
437.779 360.167 li
437.771 360.168 437.765 360.168 437.758 360.168 cv
cp
.2 .2 .447059 rgb
f
527.063 356.548 mo
513.631 356.548 495.228 356.093 492.151 356.015 cv
491.944 356.009 491.781 355.837 491.786 355.63 cv
491.791 355.424 491.92 355.239 492.171 355.265 cv
510.951 355.745 539.465 356.151 541.036 355.31 cv
543.206 354.146 545.81 351.958 545.835 351.937 cv
545.993 351.803 546.23 351.822 546.363 351.98 cv
546.497 352.139 546.478 352.376 546.319 352.509 cv
546.21 352.601 543.631 354.771 541.391 355.97 cv
540.581 356.404 534.604 356.548 527.063 356.548 cv
cp
f
359.4 323.326 mo
359.4 323.326 406.957 312.171 412.5 276.223 cv
419.319 232 407.236 210.333 407.236 210.333 cv
376.167 247.413 li
366.842 292.223 li
354.556 301.111 li
347.718 315.6 li
359.4 323.326 li
cp
.956863 .572549 .509804 rgb
f
333.874 297.318 mo
333.984 295.566 335.539 294.209 337.414 294.231 cv
344.823 294.32 361.443 293.613 361.427 294.965 cv
361.405 296.689 356.469 313.943 356.469 313.943 cv
356.469 313.943 366.729 314.563 364.798 321.684 cv
363.316 327.148 356.709 333.42 353.714 336.042 cv
352.764 336.874 352.096 337.938 351.785 339.121 cv
350.446 344.212 346.083 358.208 338.544 358.316 cv
329.327 358.449 330.426 354.767 330.447 353.043 cv
330.466 351.563 333.122 309.267 333.874 297.318 cv
cp
.486275 .376471 .32549 rgb
f
409.198 207.015 mo
409.198 207.015 433.473 211.01 434.462 190.478 cv
435.411 170.777 426.155 164.44 426.155 164.44 cv
408.974 190.995 li
409.198 207.015 li
cp
.27451 .27451 .498039 rgb
f
392.139 247.413 mo
392.139 247.413 389.416 333.556 385.763 342.667 cv
382.111 351.777 362.153 342.667 362.153 342.667 cv
357.438 249.326 li
392.139 247.413 li
cp
.988235 .639216 .592157 rgb
f
411.992 188.641 mo
411.992 188.641 428.197 191.327 433.433 172.379 cv
438.669 153.431 412.788 129.338 412.788 129.338 cv
411.992 188.641 li
cp
1 .74902 .411765 rgb
f
412.5 192.527 mo
412.5 192.527 415.877 210.857 415.877 224.523 cv
415.877 238.19 417.544 253.19 415.877 254.523 cv
414.211 255.857 397.667 260.333 377.667 259.333 cv
357.667 258.333 351.667 253.848 352 252.257 cv
352.333 250.667 354.667 249.326 354.667 249.326 cv
354.667 249.326 353.333 209.817 358.667 199.242 cv
364 188.667 386.736 186.358 386.736 186.358 cv
411.188 186.358 li
412.5 192.527 li
cp
.466667 .447059 .827451 rgb
f
394.464 240.598 mo
394.236 240.586 394.078 240.408 394.09 240.202 cv
395.284 218.868 li
395.296 218.661 395.482 218.495 395.679 218.515 cv
395.886 218.525 396.044 218.703 396.032 218.909 cv
394.838 240.243 li
394.827 240.443 394.662 240.598 394.464 240.598 cv
cp
1 1 1 rgb
f
378.188 190.957 mo
378.188 190.957 397.221 195.201 406.754 190.557 cv
416.287 185.914 410.914 159.218 410.914 159.218 cv
410.914 159.218 405.735 122.655 398.307 121.875 cv
390.879 121.096 384.322 122.081 384.322 122.081 cv
375.159 153.152 li
378.188 190.957 li
cp
.968627 .45098 .309804 rgb
f
395.213 120.878 mo
395.213 120.878 396.458 121.241 398.307 121.875 cv
385.527 122.674 li
385.527 122.674 383.807 140.55 383.183 161.05 cv
382.746 175.578 383.189 188.683 383.499 195.08 cv
365.461 194.642 li
365.461 194.642 356.857 135.736 363.659 129.42 cv
370.462 123.104 387.324 120.989 387.324 120.989 cv
395.213 120.878 li
cp
1 .74902 .411765 rgb
f
414.813 195.842 mo
404.678 195.593 li
405.249 187.805 406.24 169.249 404.461 150.742 cv
402.192 127.202 398.552 122.182 398.327 121.885 cv
403.201 123.547 412.242 127.101 413.905 130.938 cv
416.2 136.247 414.813 195.842 414.813 195.842 cv
cp
f
408.081 178.844 mo
425.023 196.453 li
402.372 226.846 li
381.105 210.932 li
408.081 178.844 li
cp
.658824 .643137 1 rgb
f
410.88 181.807 mo
427.822 199.416 li
405.615 229.046 li
384.349 213.132 li
410.88 181.807 li
cp
1 1 1 rgb
f
390.273 91.6582 mo
390.273 91.6582 381.232 73.1245 370.872 82.5581 cv
362.205 90.4502 375.617 102.581 383.385 99.1074 cv
391.153 95.6348 390.273 91.6582 390.273 91.6582 cv
cp
0 0 0 rgb
f
364.146 366.885 mo
362.391 366.868 360.952 365.388 360.875 363.514 cv
360.569 356.11 358.978 339.552 360.329 339.496 cv
362.052 339.426 379.544 343.438 379.544 343.438 cv
379.544 343.438 379.616 333.158 386.83 334.707 cv
392.366 335.896 398.98 342.16 401.758 345.011 cv
402.64 345.916 403.737 346.526 404.936 346.773 cv
410.091 347.839 424.3 351.451 424.809 358.974 cv
425.432 368.17 421.697 367.27 419.974 367.34 cv
418.495 367.4 376.118 366.999 364.146 366.885 cv
cp
.486275 .376471 .32549 rgb
f
381.919 186.418 mo
381.919 186.418 399.931 189.396 403.489 192.674 cv
407.048 195.951 398.416 208.526 396.197 210.565 cv
393.979 212.604 378.171 202.255 378.171 202.255 cv
375.885 193.219 li
381.919 186.418 li
cp
.988235 .639216 .592157 rgb
f
403.489 192.674 mo
403.489 192.674 411.017 203.433 409.772 207.873 cv
408.529 212.313 399.46 198.587 399.46 198.587 cv
403.489 192.674 li
cp
f
390.229 207.58 mo
390.229 207.58 380.903 206.264 382.743 209.645 cv
384.583 213.024 394.549 212.438 396.197 210.565 cv
397.846 208.693 392.644 203.586 392.644 203.586 cv
390.229 207.58 li
cp
f
389.022 208.601 mo
388.979 208.601 388.933 208.593 388.889 208.576 cv
386.209 207.556 li
386.081 207.507 385.99 207.392 385.972 207.256 cv
385.952 207.12 386.01 206.985 386.12 206.903 cv
388.256 205.323 li
388.42 205.202 388.655 205.235 388.78 205.402 cv
388.903 205.568 388.868 205.804 388.701 205.927 cv
387.117 207.099 li
389.156 207.875 li
389.35 207.949 389.446 208.165 389.373 208.359 cv
389.316 208.509 389.174 208.601 389.022 208.601 cv
cp
0 0 0 rgb
f
402.406 202.048 mo
402.256 202.048 402.114 201.957 402.057 201.808 cv
401.436 200.202 400.234 197.468 399.652 196.973 cv
399.495 196.839 399.476 196.603 399.609 196.444 cv
399.744 196.287 399.98 196.267 400.139 196.402 cv
401.057 197.183 402.585 201.095 402.756 201.538 cv
402.831 201.731 402.734 201.948 402.541 202.022 cv
402.497 202.04 402.451 202.048 402.406 202.048 cv
cp
f
399.558 206.593 mo
399.421 206.593 399.289 206.518 399.223 206.387 cv
395.986 199.996 li
395.894 199.811 395.967 199.585 396.152 199.492 cv
396.334 199.4 396.562 199.472 396.656 199.657 cv
399.893 206.049 li
399.985 206.233 399.912 206.459 399.727 206.553 cv
399.673 206.58 399.615 206.593 399.558 206.593 cv
cp
f
402.931 106.791 mo
402.931 106.791 406.348 102.907 405.265 96.9785 cv
404.531 92.959 402.72 91.6802 402.72 91.6802 cv
402.72 91.6802 405.374 86.1426 397.25 86.5894 cv
389.125 87.0366 384.397 91.0947 384.397 91.0947 cv
384.397 91.0947 380.656 89.3218 379.05 93.6777 cv
377.444 98.0342 379.2 104.403 379.2 104.403 cv
402.931 106.791 li
cp
f
385.179 113.739 mo
385.566 123.659 li
385.566 123.659 387.466 126.441 393.288 126.686 cv
397.625 126.868 398.907 124.594 398.907 124.594 cv
397.521 115.955 li
386.952 114.059 li
385.179 113.739 li
cp
.988235 .639216 .592157 rgb
f
385.17 113.133 mo
385.206 113.403 385.321 113.719 385.496 114.079 cv
387.909 118.948 395.801 120.705 398.307 120.831 cv
397.521 115.955 li
385.17 113.133 li
cp
0 0 0 rgb
f
398.85 93.2563 mo
398.85 93.2563 404.542 105.491 402.759 112.481 cv
400.977 119.472 394.624 118.528 390.807 117.274 cv
386.989 116.021 385.177 113.741 385.177 113.741 cv
385.177 113.741 381.669 115.023 379.226 111.791 cv
376.784 108.558 378.151 104.747 380.15 103.834 cv
382.148 102.921 384.584 104.323 384.584 104.323 cv
382.617 100.774 li
382.617 100.774 390.105 82.3311 398.85 93.2563 cv
cp
.988235 .639216 .592157 rgb
f
384.584 104.323 mo
384.584 104.323 389.916 105.321 393.526 99.353 cv
397.137 93.3848 396.764 90.96 396.764 90.96 cv
400.529 97.0166 li
400.529 97.0166 401.292 92.77 399.561 90.0938 cv
397.83 87.4175 396.079 88.002 396.079 88.002 cv
384.397 91.0947 li
381.441 100.534 li
384.584 104.323 li
cp
0 0 0 rgb
f
398.643 108.958 mo
398.608 108.958 398.573 108.953 398.538 108.942 cv
398.339 108.885 398.225 108.677 398.282 108.478 cv
398.948 106.187 397.2 103.744 397.183 103.719 cv
397.061 103.552 397.098 103.317 397.265 103.196 cv
397.43 103.074 397.666 103.109 397.788 103.277 cv
397.87 103.389 399.772 106.039 399.003 108.687 cv
398.955 108.851 398.806 108.958 398.643 108.958 cv
cp
f
384.149 110.111 mo
384.052 110.111 383.954 110.074 383.881 109.998 cv
380.463 106.496 li
380.318 106.348 380.321 106.11 380.47 105.965 cv
380.616 105.821 380.855 105.823 381 105.972 cv
384.418 109.475 li
384.563 109.623 384.56 109.86 384.411 110.005 cv
384.339 110.076 384.244 110.111 384.149 110.111 cv
cp
f
380.578 109.217 mo
380.398 109.217 380.239 109.088 380.208 108.905 cv
380.174 108.701 380.312 108.507 380.516 108.473 cv
382.833 108.082 li
383.045 108.044 383.231 108.185 383.266 108.389 cv
383.3 108.593 383.162 108.787 382.958 108.821 cv
380.641 109.212 li
380.619 109.216 380.599 109.217 380.578 109.217 cv
cp
f
400.881 98.7988 mo
400.861 98.7988 400.842 98.7974 400.822 98.7939 cv
398.621 98.4429 li
398.416 98.4106 398.276 98.2183 398.31 98.0137 cv
398.342 97.8096 398.541 97.6699 398.738 97.7026 cv
400.939 98.0537 li
401.145 98.0859 401.284 98.2783 401.251 98.4829 cv
401.222 98.6675 401.063 98.7988 400.881 98.7988 cv
cp
f
391.775 100.368 mo
391.641 100.368 391.51 100.295 391.443 100.167 cv
391.347 99.9839 391.418 99.7573 391.602 99.6611 cv
395.177 97.7876 li
395.36 97.6914 395.587 97.7622 395.683 97.9458 cv
395.779 98.1289 395.708 98.3555 395.524 98.4517 cv
391.949 100.325 li
391.894 100.354 391.834 100.368 391.775 100.368 cv
cp
f
400.952 103.874 mo
400.794 103.874 400.646 103.773 400.596 103.614 cv
399.879 101.392 li
399.84 101.272 399.863 101.142 399.941 101.043 cv
400.615 100.195 li
400.744 100.033 400.98 100.006 401.143 100.135 cv
401.305 100.264 401.332 100.5 401.203 100.662 cv
400.654 101.353 li
401.309 103.384 li
401.373 103.581 401.265 103.792 401.067 103.856 cv
401.029 103.868 400.99 103.874 400.952 103.874 cv
cp
f
394.715 104.561 mo
394.557 104.561 394.409 104.46 394.358 104.301 cv
393.642 102.079 li
393.602 101.957 393.628 101.823 393.71 101.724 cv
394.642 100.605 li
394.773 100.446 395.01 100.424 395.17 100.558 cv
395.329 100.69 395.351 100.927 395.218 101.086 cv
394.418 102.045 li
395.071 104.071 li
395.136 104.268 395.027 104.479 394.83 104.543 cv
394.792 104.555 394.753 104.561 394.715 104.561 cv
cp
f
396.895 112.241 mo
395.369 112.241 393.675 110.605 393.452 110.384 cv
393.306 110.238 393.305 110 393.451 109.854 cv
393.597 109.708 393.834 109.707 393.981 109.853 cv
394.599 110.465 396.419 111.926 397.416 111.363 cv
397.596 111.259 397.825 111.324 397.927 111.504 cv
398.029 111.685 397.966 111.913 397.785 112.015 cv
397.504 112.174 397.203 112.241 396.895 112.241 cv
cp
f
366.932 127.072 mo
366.932 127.072 338.047 145.416 338.276 173.709 cv
338.504 202.002 376.793 210.468 376.793 210.468 cv
388.568 181.323 li
368.895 170.074 li
366.932 127.072 li
cp
1 .74902 .411765 rgb
f
401.224 122.93 mo
401.224 122.93 406.692 131.479 409.861 143.551 cv
413.03 155.623 415.221 164.904 415.221 164.904 cv
415.221 164.904 418.43 139.892 413.905 130.938 cv
411.688 126.551 401.224 122.93 401.224 122.93 cv
cp
.27451 .27451 .498039 rgb
f
354.667 249.701 mo
354.497 249.701 354.344 249.586 354.303 249.413 cv
354.254 249.212 354.378 249.01 354.58 248.962 cv
357.706 248.214 li
357.911 248.158 358.109 248.289 358.157 248.491 cv
358.206 248.692 358.082 248.895 357.88 248.942 cv
354.754 249.69 li
354.725 249.698 354.695 249.701 354.667 249.701 cv
cp
1 1 1 rgb
f
387.928 346.456 mo
387.891 346.456 387.853 346.45 387.815 346.438 cv
379.432 343.795 li
379.233 343.732 379.124 343.522 379.187 343.325 cv
379.248 343.128 379.461 343.018 379.656 343.08 cv
388.04 345.724 li
388.238 345.786 388.348 345.996 388.285 346.193 cv
388.235 346.354 388.087 346.456 387.928 346.456 cv
cp
1 .74902 .411765 rgb
f
351.987 321.881 mo
351.922 321.881 351.856 321.864 351.796 321.828 cv
351.618 321.723 351.56 321.493 351.665 321.314 cv
356.146 313.752 li
356.252 313.573 356.481 313.515 356.66 313.621 cv
356.838 313.727 356.896 313.956 356.791 314.135 cv
352.31 321.697 li
352.24 321.815 352.115 321.881 351.987 321.881 cv
cp
f
535.848 176.413 mo
535.775 176.413 535.702 176.392 535.638 176.348 cv
535.466 176.232 535.421 175.999 535.537 175.827 cv
536.014 175.125 547.275 158.586 553.972 155.891 cv
554.164 155.814 554.382 155.907 554.459 156.099 cv
554.536 156.291 554.443 156.509 554.251 156.586 cv
547.766 159.197 536.273 176.078 536.158 176.248 cv
536.086 176.355 535.968 176.413 535.848 176.413 cv
cp
.486275 .376471 .32549 rgb
f
550.097 147.952 mo
549.961 147.952 549.829 147.994 549.696 148.079 cv
547.878 149.239 546.94 156.714 546.611 160.975 cv
548.59 157.396 551.734 150.939 550.966 148.663 cv
550.855 148.337 550.669 148.125 550.395 148.014 cv
550.291 147.973 550.193 147.952 550.097 147.952 cv
cp
546.132 162.947 mo
546.096 162.947 546.06 162.941 546.023 162.931 cv
545.858 162.881 545.749 162.725 545.757 162.553 cv
545.826 161.194 546.51 149.223 549.293 147.447 cv
549.725 147.172 550.203 147.128 550.676 147.319 cv
551.158 147.514 551.494 147.885 551.676 148.422 cv
552.854 151.906 546.716 162.321 546.454 162.763 cv
546.386 162.879 546.262 162.947 546.132 162.947 cv
cp
f
493.788 171.82 mo
493.56 171.807 493.401 171.63 493.414 171.423 cv
493.974 161.756 li
493.985 161.55 494.157 161.389 494.369 161.403 cv
494.576 161.416 494.734 161.593 494.722 161.799 cv
494.162 171.466 li
494.151 171.666 493.985 171.82 493.788 171.82 cv
cp
f
485 153.567 mo
484.96 156.144 485.326 160.298 487.357 160.639 cv
487.604 160.681 487.765 160.652 487.828 160.555 cv
488.339 159.783 486.636 156.302 485 153.567 cv
cp
487.553 161.407 mo
487.455 161.407 487.349 161.398 487.232 161.378 cv
483.674 160.782 484.278 152.65 484.306 152.304 cv
484.318 152.143 484.433 152.009 484.589 151.97 cv
484.746 151.931 484.909 151.997 484.996 152.132 cv
485.758 153.328 489.508 159.377 488.453 160.969 cv
488.313 161.18 488.049 161.407 487.553 161.407 cv
cp
f
520.55 120.827 mo
518.343 120.827 516.861 120.458 516.729 120.423 cv
516.527 120.371 516.407 120.167 516.459 119.966 cv
516.512 119.766 516.721 119.648 516.916 119.697 cv
516.986 119.715 524.06 121.466 530.642 117.061 cv
530.813 116.946 531.046 116.991 531.162 117.164 cv
531.277 117.336 531.231 117.569 531.06 117.684 cv
527.234 120.244 523.32 120.827 520.55 120.827 cv
cp
f
383.078 178.559 mo
382.999 178.559 382.919 178.534 382.851 178.482 cv
382.729 178.389 370.55 169.137 365.904 167.494 cv
365.709 167.425 365.606 167.21 365.676 167.015 cv
365.745 166.82 365.96 166.718 366.154 166.787 cv
370.91 168.469 382.802 177.502 383.306 177.886 cv
383.47 178.011 383.502 178.247 383.377 178.411 cv
383.303 178.508 383.19 178.559 383.078 178.559 cv
cp
.466667 .447059 .827451 rgb
f
369.668 162.215 mo
369.523 162.215 369.347 162.252 369.132 162.355 cv
368.717 162.554 368.48 162.847 368.409 163.25 cv
368.127 164.839 370.318 167.711 371.723 169.294 cv
371.682 167.033 371.353 163.153 370.104 162.348 cv
370.004 162.283 369.864 162.215 369.668 162.215 cv
cp
372.098 170.626 mo
371.999 170.626 371.901 170.586 371.829 170.513 cv
371.641 170.319 367.206 165.741 367.67 163.119 cv
367.785 162.47 368.168 161.985 368.808 161.679 cv
369.589 161.305 370.165 161.494 370.512 161.718 cv
372.572 163.048 372.489 169.525 372.473 170.259 cv
372.469 170.41 372.376 170.544 372.235 170.6 cv
372.19 170.618 372.144 170.626 372.098 170.626 cv
cp
f
415.095 136.813 mo
415.095 136.813 408.001 146.045 408.309 149.708 cv
408.617 153.371 411.268 151.521 411.268 151.521 cv
411.268 151.521 409.668 155.624 411.337 156.483 cv
413.006 157.343 414.254 154.657 414.254 154.657 cv
414.254 154.657 414.241 158.199 416.242 158.273 cv
418.243 158.348 426.392 148.773 426.545 145.945 cv
426.697 143.117 423.152 143.851 423.152 143.851 cv
423.152 143.851 424.023 139.435 422.411 138.501 cv
420.798 137.567 418.43 139.892 418.43 139.892 cv
418.43 139.892 418.673 133.929 415.095 136.813 cv
cp
.988235 .639216 .592157 rgb
f
416.291 155.433 mo
416.291 155.433 414.569 164.887 419.897 164.839 cv
431.048 164.739 426.432 147.434 426.432 147.434 cv
416.291 155.433 li
cp
f
417.928 184.043 mo
417.819 184.043 417.713 183.997 417.639 183.907 cv
414.438 180.023 414.828 165.509 414.846 164.893 cv
414.853 164.686 415.026 164.536 415.231 164.529 cv
415.438 164.536 415.602 164.708 415.596 164.916 cv
415.591 165.063 415.194 179.763 418.217 183.43 cv
418.349 183.59 418.326 183.826 418.166 183.958 cv
418.097 184.016 418.012 184.043 417.928 184.043 cv
cp
.466667 .447059 .827451 rgb
f
411.269 151.896 mo
411.205 151.896 411.142 151.88 411.083 151.846 cv
410.903 151.744 410.84 151.515 410.942 151.335 cv
417.004 140.7 li
417.107 140.519 417.337 140.458 417.516 140.56 cv
417.695 140.663 417.759 140.892 417.656 141.071 cv
411.595 151.706 li
411.525 151.828 411.398 151.896 411.269 151.896 cv
cp
0 0 0 rgb
f
415.265 155.041 mo
415.197 155.041 415.13 155.023 415.069 154.985 cv
414.893 154.877 414.837 154.646 414.944 154.47 cv
420.815 144.868 li
420.925 144.691 421.157 144.635 421.331 144.744 cv
421.508 144.852 421.563 145.083 421.456 145.26 cv
415.585 154.861 li
415.514 154.977 415.391 155.041 415.265 155.041 cv
cp
f
394.166 127.102 mo
393.876 127.102 393.573 127.088 393.254 127.059 cv
389.374 126.702 385.517 124.079 385.354 123.968 cv
385.184 123.851 385.14 123.617 385.257 123.446 cv
385.375 123.276 385.609 123.232 385.778 123.35 cv
385.816 123.375 389.641 125.973 393.322 126.312 cv
397.195 126.668 398.528 124.499 398.583 124.406 cv
398.688 124.228 398.918 124.167 399.095 124.271 cv
399.273 124.375 399.335 124.602 399.232 124.781 cv
399.174 124.883 397.854 127.102 394.166 127.102 cv
cp
.466667 .447059 .827451 rgb
f
303.891 277.423 mo
300.439 319.26 li
299.095 335.517 li
273.829 335.962 li
272.806 277.971 li
303.891 277.423 li
cp
.988235 .639216 .592157 rgb
f
255.852 275.6 mo
230.516 313.463 li
221.482 326.975 li
199.402 314.672 li
208.205 298.885 li
231.772 256.612 li
255.852 275.6 li
cp
f
259.598 185.63 mo
221.09 251.653 li
255.033 279.392 li
266.603 261.44 li
268.291 281.491 li
311.201 280.734 li
311.201 280.734 312.154 201.056 307.849 191.621 cv
303.544 182.187 259.598 185.63 259.598 185.63 cv
cp
1 .74902 .411765 rgb
f
216.785 121.034 mo
225.099 132.21 li
238.142 122.191 li
232.453 111.05 li
226.988 119.08 li
216.785 121.034 li
cp
.988235 .639216 .592157 rgb
f
277.776 124.769 mo
277.776 124.769 281.909 84.5537 296.278 84.3003 cv
310.646 84.0464 311.492 94.1997 311.492 94.1997 cv
311.492 94.1997 314.937 95.7637 315.201 101.239 cv
315.464 106.715 313.934 123.912 313.934 123.912 cv
281.658 127.481 li
277.776 124.769 li
cp
0 0 0 rgb
f
232.593 109.751 mo
232.593 109.751 232.75 97.6177 229.639 96.6313 cv
226.527 95.645 226.752 105.739 226.752 105.739 cv
218.955 100.422 li
218.955 100.422 209.84 95.3818 207.697 95.77 cv
205.554 96.1582 207.999 100.083 207.999 100.083 cv
207.999 100.083 201.543 96.3457 201.713 99.9658 cv
201.883 103.586 206.176 106.665 206.176 106.665 cv
206.176 106.665 199.954 102.642 200.545 106.977 cv
200.865 109.321 213.655 121.916 223.8 123.985 cv
233.944 126.055 231.771 117.335 231.771 117.335 cv
232.593 109.751 li
cp
.988235 .639216 .592157 rgb
f
209.676 109.666 mo
209.54 109.666 209.408 109.592 209.342 109.462 cv
209.247 109.278 209.32 109.052 209.504 108.958 cv
219.675 103.742 li
219.859 103.647 220.085 103.72 220.18 103.905 cv
220.274 104.089 220.202 104.315 220.017 104.409 cv
209.846 109.625 li
209.792 109.653 209.733 109.666 209.676 109.666 cv
cp
0 0 0 rgb
f
225.401 116.96 mo
225.341 116.96 225.28 116.945 225.224 116.915 cv
225.115 116.856 222.549 115.44 222.274 112.705 cv
222.045 110.43 223.471 107.99 226.512 105.451 cv
226.669 105.319 226.907 105.339 227.041 105.499 cv
227.173 105.658 227.152 105.895 226.993 106.027 cv
224.158 108.394 222.821 110.613 223.02 112.623 cv
223.251 114.961 225.557 116.243 225.581 116.255 cv
225.762 116.354 225.83 116.582 225.731 116.764 cv
225.663 116.889 225.535 116.96 225.401 116.96 cv
cp
f
238.017 115.152 mo
238.017 115.152 246.811 131.68 254.189 134.217 cv
261.569 136.754 268.519 124.401 278.128 121.095 cv
287.738 117.79 307.086 118.448 317.413 127.434 cv
327.74 136.42 300.972 187.567 300.972 187.567 cv
300.972 187.567 291.529 190.9 277.924 189.807 cv
264.319 188.714 256.949 186.677 256.949 186.677 cv
258.52 168.434 li
258.52 168.434 245.282 167.88 233.432 157.587 cv
221.578 147.291 216.902 127.708 216.902 127.708 cv
238.017 115.152 li
cp
.486275 .376471 .32549 rgb
f
303.843 112.43 mo
303.011 122.323 li
303.011 122.323 300.988 125.017 295.161 125.001 cv
290.82 124.989 289.641 122.66 289.641 122.66 cv
291.413 114.091 li
302.057 112.67 li
303.843 112.43 li
cp
.988235 .639216 .592157 rgb
f
303.878 111.826 mo
303.831 112.094 303.701 112.404 303.51 112.756 cv
300.881 117.512 292.918 118.914 290.41 118.927 cv
291.413 114.091 li
303.878 111.826 li
cp
0 0 0 rgb
f
264.743 168.112 mo
264.715 168.112 264.686 168.108 264.656 168.102 cv
264.455 168.054 264.33 167.852 264.378 167.65 cv
267.35 155.118 li
266.908 148.848 li
266.462 142.5 269.794 135.09 269.936 134.777 cv
270.022 134.589 270.241 134.506 270.433 134.591 cv
270.621 134.677 270.704 134.899 270.619 135.088 cv
270.585 135.163 267.224 142.64 267.656 148.795 cv
268.102 155.122 li
268.104 155.16 268.102 155.198 268.093 155.235 cv
265.108 167.823 li
265.067 167.996 264.913 168.112 264.743 168.112 cv
cp
1 1 1 rgb
f
291.103 91.356 mo
291.103 91.356 284.868 103.323 286.335 110.387 cv
287.803 117.45 294.192 116.792 298.062 115.71 cv
301.932 114.629 303.844 112.433 303.844 112.433 cv
303.844 112.433 307.291 113.871 309.876 110.751 cv
312.461 107.631 311.266 103.763 309.31 102.761 cv
307.354 101.759 304.858 103.05 304.858 103.05 cv
306.982 99.5938 li
306.982 99.5938 300.328 80.8335 291.103 91.356 cv
cp
.988235 .639216 .592157 rgb
f
290.623 107.051 mo
290.454 107.051 290.301 106.937 290.259 106.765 cv
289.607 104.084 291.628 101.522 291.714 101.415 cv
291.845 101.253 292.08 101.228 292.241 101.356 cv
292.402 101.485 292.429 101.721 292.3 101.883 cv
292.281 101.907 290.424 104.269 290.987 106.588 cv
291.036 106.789 290.913 106.992 290.712 107.041 cv
290.682 107.048 290.652 107.051 290.623 107.051 cv
cp
0 0 0 rgb
f
305.05 108.853 mo
304.95 108.853 304.85 108.813 304.776 108.734 cv
304.635 108.583 304.643 108.345 304.793 108.204 cv
308.364 104.858 li
308.517 104.718 308.754 104.725 308.895 104.876 cv
309.036 105.027 309.028 105.265 308.878 105.406 cv
305.307 108.751 li
305.233 108.819 305.142 108.853 305.05 108.853 cv
cp
f
308.657 108.12 mo
308.632 108.12 308.604 108.118 308.578 108.112 cv
306.281 107.617 li
306.079 107.574 305.95 107.374 305.994 107.171 cv
306.037 106.97 306.234 106.84 306.439 106.884 cv
308.736 107.378 li
308.938 107.422 309.067 107.622 309.023 107.824 cv
308.986 108 308.83 108.12 308.657 108.12 cv
cp
f
288.842 96.8022 mo
288.653 96.8022 288.491 96.6611 288.469 96.4697 cv
288.445 96.2637 288.594 96.0781 288.8 96.0547 cv
291.015 95.8027 li
291.221 95.7817 291.405 95.9272 291.43 96.1328 cv
291.453 96.3389 291.305 96.5244 291.099 96.5479 cv
288.884 96.7998 li
288.87 96.8013 288.855 96.8022 288.842 96.8022 cv
cp
f
297.868 98.7778 mo
297.804 98.7778 297.738 98.7612 297.68 98.7271 cv
294.879 97.0952 li
294.699 96.9907 294.639 96.7612 294.743 96.582 cv
294.848 96.4028 295.079 96.3438 295.256 96.4468 cv
298.057 98.0786 li
298.236 98.1831 298.297 98.4126 298.192 98.5918 cv
298.122 98.7109 297.997 98.7778 297.868 98.7778 cv
cp
f
288.544 101.869 mo
288.5 101.869 288.456 101.862 288.413 101.846 cv
288.219 101.773 288.12 101.557 288.192 101.363 cv
288.938 99.3633 li
288.42 98.6489 li
288.299 98.481 288.336 98.2466 288.504 98.125 cv
288.671 98.002 288.906 98.0405 289.027 98.2085 cv
289.663 99.0859 li
289.736 99.188 289.755 99.3193 289.711 99.437 cv
288.896 101.625 li
288.839 101.776 288.696 101.869 288.544 101.869 cv
cp
f
294.744 102.835 mo
294.7 102.835 294.656 102.828 294.613 102.812 cv
294.419 102.739 294.32 102.523 294.393 102.329 cv
295.136 100.334 li
294.38 99.3403 li
294.255 99.1753 294.287 98.9399 294.452 98.8149 cv
294.616 98.689 294.852 98.7212 294.978 98.8862 cv
295.858 100.045 li
295.936 100.147 295.956 100.282 295.911 100.403 cv
295.096 102.591 li
295.039 102.742 294.896 102.835 294.744 102.835 cv
cp
f
291.837 109.973 mo
292.108 110.359 292.62 110.922 293.214 110.747 cv
293.764 110.583 294.299 109.586 294.643 108.681 cv
291.837 109.973 li
cp
292.977 111.533 mo
291.759 111.533 290.997 110.047 290.962 109.977 cv
290.916 109.886 290.909 109.781 290.943 109.685 cv
290.977 109.589 291.048 109.51 291.14 109.468 cv
295.108 107.641 li
295.243 107.581 295.396 107.601 295.508 107.695 cv
295.619 107.789 295.666 107.939 295.628 108.08 cv
295.545 108.384 294.781 111.063 293.427 111.466 cv
293.271 111.512 293.12 111.533 292.977 111.533 cv
cp
f
287.178 95.4624 mo
287.178 95.4624 290.653 95.0679 293.042 95.3589 cv
295.432 95.6504 295.432 95.6504 295.432 95.6504 cv
296.729 91.8765 li
296.363 96.0815 li
296.363 96.0815 298.031 96.5142 299.633 97.5313 cv
301.234 98.5483 302.255 99.7212 302.255 99.7212 cv
304.117 96.6113 li
303.104 100.638 li
304.858 103.05 li
308.021 100.552 li
306.622 94.7026 li
306.622 94.7026 302.718 88.1533 302.382 88.0513 cv
302.047 87.9487 295.697 87.061 295.697 87.061 cv
295.697 87.061 290.028 88.7446 289.88 88.9136 cv
289.732 89.083 287.178 95.4624 287.178 95.4624 cv
cp
f
253.896 135.353 mo
252.83 137.058 250.762 140.719 251.245 142.78 cv
251.362 143.279 251.624 143.634 252.045 143.864 cv
252.471 144.097 252.694 144.009 252.824 143.923 cv
253.961 143.18 254.09 138.659 253.896 135.353 cv
cp
252.528 144.763 mo
252.287 144.763 252.006 144.698 251.686 144.522 cv
251.074 144.188 250.681 143.66 250.515 142.951 cv
249.797 139.889 253.715 134.241 253.882 134.002 cv
253.972 133.873 254.134 133.813 254.286 133.855 cv
254.438 133.896 254.549 134.027 254.563 134.185 cv
254.645 135.104 255.295 143.203 253.234 144.551 cv
253.063 144.663 252.826 144.763 252.528 144.763 cv
cp
1 1 1 rgb
f
295.836 124.821 mo
291.943 124.821 289.453 122.988 289.415 122.959 cv
289.25 122.834 289.218 122.6 289.343 122.435 cv
289.466 122.27 289.701 122.235 289.867 122.361 cv
290.09 122.528 295.412 126.417 302.818 122.001 cv
302.996 121.896 303.227 121.953 303.333 122.131 cv
303.438 122.309 303.381 122.54 303.203 122.646 cv
300.448 124.287 297.938 124.821 295.836 124.821 cv
cp
f
288.966 196.829 mo
288.966 196.829 289.957 232.99 290.888 234.308 cv
291.818 235.625 297.099 236.198 297.099 236.198 cv
304.748 220.728 li
293.669 195.856 li
288.966 196.829 li
cp
.176471 .176471 .407843 rgb
f
290.226 196.807 mo
290.226 196.807 291.402 214.295 292.434 214.944 cv
293.465 215.593 329.607 210.731 330.924 209.819 cv
332.242 208.907 329.659 186.843 327.62 186.273 cv
325.581 185.703 320.699 186.395 320.699 186.395 cv
290.226 196.807 li
cp
.27451 .27451 .498039 rgb
f
294.35 214.91 mo
294.35 214.91 295.689 235.557 297.099 236.198 cv
298.507 236.84 330.569 231.606 331.708 231.143 cv
332.849 230.678 328.905 208.744 328.905 208.744 cv
298.817 210.164 li
294.35 214.91 li
cp
f
288.477 118.962 mo
288.477 118.962 289.07 133.64 292.901 147.509 cv
296.731 161.378 305.59 176.64 305.59 176.64 cv
297.242 182.293 li
297.242 182.293 285.996 167.358 282.61 147.997 cv
279.225 128.635 280.322 119.811 280.322 119.811 cv
280.322 119.811 284.75 118.511 288.477 118.962 cv
cp
f
296.72 215.121 mo
296.538 215.121 296.378 214.989 296.35 214.804 cv
296.317 214.6 296.457 214.407 296.662 214.376 cv
327.756 209.504 li
327.962 209.458 328.152 209.611 328.184 209.816 cv
328.216 210.021 328.076 210.213 327.871 210.244 cv
296.777 215.116 li
296.758 215.12 296.738 215.121 296.72 215.121 cv
cp
.466667 .447059 .827451 rgb
f
255.629 174.882 mo
203.416 175.804 li
188.657 145.516 li
240.871 144.594 li
255.629 174.882 li
cp
.968627 .45098 .309804 rgb
f
266.739 174.687 mo
202.365 175.822 li
201.289 175.841 200.4 174.984 200.382 173.908 cv
200.363 172.832 201.22 171.944 202.296 171.925 cv
266.67 170.789 li
266.739 174.687 li
cp
.466667 .447059 .827451 rgb
f
210.362 148.563 mo
210.158 148.563 209.991 148.399 209.987 148.194 cv
209.983 147.987 210.148 147.816 210.355 147.813 cv
238.585 147.314 li
238.796 147.314 238.963 147.478 238.967 147.682 cv
238.97 147.89 238.806 148.06 238.599 148.064 cv
210.369 148.563 li
210.366 148.563 210.364 148.563 210.362 148.563 cv
cp
1 1 1 rgb
f
254.908 170.997 mo
254.908 170.997 261.266 165.026 264.7 165.307 cv
268.134 165.587 276.481 172.565 276.481 172.565 cv
273.846 186.953 li
273.846 186.953 260.771 189.185 252.52 187.599 cv
244.269 186.012 231.235 177.907 233.775 175.921 cv
235.838 174.309 238.538 176.111 238.538 176.111 cv
238.538 176.111 232.026 172.354 236.453 171.322 cv
240.88 170.291 253.189 174.925 253.189 174.925 cv
266.739 174.687 li
266.67 170.789 li
254.908 170.997 li
cp
.988235 .639216 .592157 rgb
f
248.958 181.303 mo
248.938 181.303 248.917 181.301 248.897 181.298 cv
246.411 180.892 237.453 176.044 237.073 175.838 cv
236.891 175.739 236.823 175.512 236.922 175.33 cv
237.021 175.147 237.248 175.081 237.43 175.179 cv
237.522 175.229 246.656 180.171 249.018 180.558 cv
249.223 180.591 249.361 180.784 249.328 180.988 cv
249.297 181.172 249.139 181.303 248.958 181.303 cv
cp
0 0 0 rgb
f
274.164 169.032 mo
271.375 197.139 li
271.375 197.139 329.344 208.402 330.994 169.654 cv
332.673 130.197 310.664 122.791 310.664 122.791 cv
294.539 166.212 li
274.164 169.032 li
cp
.486275 .376471 .32549 rgb
f
279.62 168.848 mo
279.435 168.848 279.273 168.711 279.248 168.523 cv
279.221 168.318 279.365 168.129 279.57 168.102 cv
279.772 168.074 299.951 165.376 307.411 165.66 cv
307.618 165.667 307.78 165.841 307.772 166.048 cv
307.765 166.25 307.599 166.409 307.397 166.409 cv
299.963 166.126 279.872 168.817 279.67 168.845 cv
279.653 168.847 279.637 168.848 279.62 168.848 cv
cp
1 1 1 rgb
f
304.995 161.021 mo
301.298 161.021 297.49 164.331 295.773 166.037 cv
301.33 164.381 306.864 162.253 306.944 161.43 cv
306.938 161.43 306.824 161.272 306.144 161.134 cv
305.764 161.057 305.38 161.021 304.995 161.021 cv
cp
294.549 167.159 mo
294.423 167.159 294.303 167.096 294.233 166.986 cv
294.144 166.847 294.156 166.666 294.264 166.54 cv
294.52 166.241 300.59 159.24 306.294 160.399 cv
306.633 160.468 307.667 160.679 307.694 161.403 cv
307.764 163.223 298.596 166.024 294.651 167.145 cv
294.617 167.154 294.583 167.159 294.549 167.159 cv
cp
f
266.604 261.815 mo
266.39 261.812 266.225 261.642 266.229 261.435 cv
267.038 213.325 li
256.023 207.492 li
255.841 207.396 255.771 207.169 255.868 206.985 cv
255.965 206.802 256.189 206.73 256.375 206.83 cv
267.593 212.771 li
267.717 212.836 267.794 212.967 267.792 213.107 cv
266.979 261.446 li
266.975 261.651 266.808 261.815 266.604 261.815 cv
cp
f
300.439 319.26 mo
299.095 335.517 li
273.829 335.962 li
273.543 319.734 li
300.439 319.26 li
cp
.968627 .45098 .309804 rgb
f
230.516 313.463 mo
221.482 326.975 li
199.402 314.672 li
208.205 298.885 li
230.516 313.463 li
cp
f
301.904 359.24 mo
301.736 363.874 301.196 367.254 300.01 367.475 cv
294.746 368.448 242.636 370.067 239.953 369.335 cv
237.28 368.612 229.039 368.088 229.179 362.954 cv
229.195 362.164 229.462 361.419 229.889 360.722 cv
232.213 356.92 239.474 354.642 239.474 354.642 cv
268.959 337.679 li
268.959 337.679 269.521 331.587 269.726 330.693 cv
269.93 329.79 300.689 330.617 300.689 330.617 cv
300.689 330.617 302.313 348.371 301.904 359.24 cv
cp
.466667 .447059 .827451 rgb
f
225.933 327.516 mo
225.933 327.516 218.322 342.813 212.332 351.93 cv
209.584 356.099 207.175 358.981 205.987 358.522 cv
201.002 356.591 155.806 330.594 153.91 328.567 cv
152.014 326.54 145.289 321.769 148.083 317.479 cv
149.028 316.021 150.847 315.359 152.823 315.124 cv
156.705 314.655 161.226 315.806 161.226 315.806 cv
195.22 316.856 li
195.22 316.856 198.894 311.961 199.543 311.31 cv
200.191 310.657 225.933 327.516 225.933 327.516 cv
cp
f
301.904 359.24 mo
301.736 363.874 301.196 367.254 300.01 367.475 cv
294.746 368.448 242.636 370.067 239.953 369.335 cv
237.28 368.612 229.039 368.088 229.179 362.954 cv
229.195 362.164 229.462 361.419 229.889 360.722 cv
235.621 361.29 246.586 362.106 258.931 361.669 cv
271.975 361.199 291.835 359.918 301.904 359.24 cv
cp
.27451 .27451 .498039 rgb
f
267.956 350.174 mo
267.938 350.174 251.905 349.388 251.905 349.388 cv
251.698 349.377 251.539 349.201 251.549 348.994 cv
251.56 348.788 251.703 348.642 251.942 348.638 cv
266.389 349.347 li
260.236 345.882 li
260.089 345.799 260.015 345.627 260.057 345.463 cv
260.098 345.299 260.244 345.183 260.413 345.18 cv
269.639 345.018 li
263.886 340.771 li
263.719 340.647 263.684 340.413 263.807 340.246 cv
263.929 340.078 264.164 340.044 264.331 340.167 cv
270.975 345.071 li
271.104 345.167 271.158 345.334 271.109 345.487 cv
271.061 345.641 270.919 345.745 270.759 345.748 cv
261.807 345.905 li
268.14 349.472 li
268.292 349.558 268.364 349.735 268.316 349.902 cv
268.27 350.063 268.122 350.174 267.956 350.174 cv
cp
.2 .2 .447059 rgb
f
212.332 351.93 mo
209.584 356.099 207.175 358.981 205.987 358.522 cv
201.002 356.591 155.806 330.594 153.91 328.567 cv
152.014 326.54 145.289 321.769 148.083 317.479 cv
149.028 316.021 150.847 315.359 152.823 315.124 cv
152.823 315.124 160.696 324.287 180.894 335.322 cv
195.355 343.228 206.932 349.185 212.332 351.93 cv
cp
.27451 .27451 .498039 rgb
f
184.143 324.58 mo
184.047 324.58 183.952 324.544 183.88 324.473 cv
176.417 317.17 li
176.269 317.025 176.266 316.788 176.411 316.64 cv
176.556 316.493 176.794 316.489 176.941 316.635 cv
183.462 323.015 li
181.951 316.893 li
181.913 316.738 181.976 316.576 182.109 316.489 cv
182.243 316.402 182.417 316.409 182.543 316.505 cv
191.063 323.027 li
188.974 316.799 li
188.908 316.603 189.014 316.39 189.21 316.324 cv
189.407 316.256 189.618 316.364 189.685 316.561 cv
192.163 323.951 li
192.215 324.107 192.16 324.279 192.026 324.375 cv
191.891 324.471 191.71 324.469 191.58 324.368 cv
182.935 317.75 li
184.507 324.115 li
184.547 324.278 184.474 324.447 184.329 324.53 cv
184.271 324.563 184.207 324.58 184.143 324.58 cv
cp
.2 .2 .447059 rgb
f
142.801 165.988 mo
142.801 165.988 156.691 168.996 165.547 167.877 cv
174.403 166.759 177.158 164.379 177.175 163.042 cv
177.192 161.707 171.494 161.169 171.494 161.169 cv
171.494 161.169 179.786 159.89 179.773 156.959 cv
179.76 154.029 172.354 154.344 172.354 154.344 cv
172.354 154.344 178.087 152.208 176.624 150.082 cv
175.161 147.956 161.62 149.682 161.62 149.682 cv
161.62 149.682 167.982 146.629 166.873 144.97 cv
165.764 143.31 155.733 143.848 152.367 145.809 cv
149 147.77 145.245 151.936 145.245 151.936 cv
142.801 165.988 li
cp
.988235 .639216 .592157 rgb
f
150.394 157.556 mo
150.225 157.556 150.071 157.44 150.03 157.268 cv
149.981 157.066 150.106 156.864 150.307 156.816 cv
159.241 154.681 161.25 149.602 161.269 149.55 cv
161.342 149.356 161.559 149.259 161.751 149.331 cv
161.945 149.403 162.043 149.618 161.972 149.812 cv
161.889 150.035 159.836 155.31 150.482 157.545 cv
150.453 157.552 150.423 157.556 150.394 157.556 cv
cp
0 0 0 rgb
f
162.308 164.436 mo
162.057 164.408 161.91 164.221 161.936 164.015 cv
163.723 149.367 li
163.748 149.162 163.932 149.015 164.14 149.041 cv
164.346 149.065 164.492 149.252 164.467 149.458 cv
162.68 164.106 li
162.657 164.296 162.495 164.436 162.308 164.436 cv
cp
f
105.62 129.039 mo
105.62 129.039 117 144.013 124 145.826 cv
131 147.639 147.413 145.826 147.413 145.826 cv
150.395 176.732 li
150.395 176.732 134.315 182.884 117.667 180.928 cv
106.744 179.645 100.333 175.804 100.333 175.804 cv
105.62 129.039 li
cp
.968627 .45098 .309804 rgb
f
100.333 318.506 mo
102.556 335.962 li
125.667 334.278 li
128.333 328.111 li
126.111 310.943 li
100.333 318.506 li
cp
.988235 .639216 .592157 rgb
f
41.2222 314.725 mo
39.7319 335.338 li
65.7935 336.195 li
65.7935 309.667 li
41.2222 314.725 li
cp
f
52.3896 189.674 mo
52.3896 189.674 45.8887 216.027 39 266.83 cv
33.6118 306.566 32.3335 323.442 32.3335 323.442 cv
76 323.442 li
76 323.442 79.9478 304.088 82.333 281.491 cv
84.4497 261.44 86.5815 251.166 86.5815 251.166 cv
86.5815 251.166 89.5371 273.111 91.6016 287.333 cv
93.6665 301.556 94.103 323.326 94.103 323.326 cv
136.778 321.506 li
136.778 321.506 134.111 273.556 125.667 240.223 cv
117.222 206.889 100.333 178.218 100.333 178.218 cv
52.3896 189.674 li
cp
.466667 .447059 .827451 rgb
f
43.0005 323.827 mo
42.9839 323.827 42.9668 323.826 42.9497 323.824 cv
42.7441 323.796 42.6006 323.607 42.6284 323.401 cv
42.7759 322.313 57.3989 214.406 59.0029 196.792 cv
59.0215 196.586 59.1934 196.43 59.4106 196.453 cv
59.6167 196.472 59.7686 196.654 59.75 196.86 cv
58.144 214.49 43.519 322.414 43.3716 323.503 cv
43.3462 323.69 43.1851 323.827 43.0005 323.827 cv
cp
.2 .2 .447059 rgb
f
82.3223 98.8755 mo
82.3223 98.8755 85.9922 97.936 87.7124 95.7485 cv
89.4326 93.5615 89.7158 88.1514 89.7158 88.1514 cv
89.7158 88.1514 96.3618 91.7314 98.1084 91.3335 cv
99.8555 90.9355 103.279 82.8335 100.973 79.3335 cv
98.6665 75.8335 94 80.1665 94 80.1665 cv
94 80.1665 93.0425 75.1665 87.9404 76.3335 cv
81.9517 77.7026 80.4023 84 80.4023 84 cv
80.4023 84 80 77.1665 75.8335 80.1665 cv
71.6665 83.1665 73.1665 91 73.1665 91 cv
73.1665 91 69.8335 92.4976 70.5 95.7485 cv
71.1665 99 75.6665 102.13 75.6665 102.13 cv
82.3223 98.8755 li
cp
0 0 0 rgb
f
81.7275 108.685 mo
80.854 118.988 li
80.854 118.988 82.4614 122.108 88.4473 123.109 cv
92.9067 123.854 94.5703 122.973 94.5703 122.973 cv
94.3867 117.701 li
94.2007 112.56 li
83.5195 109.243 li
81.7275 108.685 li
cp
.988235 .639216 .592157 rgb
f
83.5195 109.243 mo
83.5215 109.527 83.6001 109.868 83.7344 110.263 cv
85.604 115.605 91.813 117.249 94.3867 117.701 cv
94.2007 112.56 li
83.5195 109.243 li
cp
0 0 0 rgb
f
98.4888 89.2686 mo
98.4888 89.2686 102.801 102.646 100.062 109.643 cv
97.3213 116.64 90.8755 114.848 87.0908 113.063 cv
83.3057 111.276 81.7256 108.687 81.7256 108.687 cv
81.7256 108.687 77.9351 109.562 75.8252 105.907 cv
73.7153 102.251 75.6182 98.4883 77.8013 97.8013 cv
79.9849 97.1143 82.3223 98.8755 82.3223 98.8755 cv
80.7451 94.9551 li
80.7451 94.9551 90.8535 76.853 98.4888 89.2686 cv
cp
.988235 .639216 .592157 rgb
f
81.5049 104.371 mo
81.4185 104.371 81.3315 104.341 81.2612 104.28 cv
76.9019 100.548 li
76.7441 100.414 76.7261 100.177 76.8608 100.02 cv
76.9951 99.8618 77.2339 99.8452 77.3892 99.979 cv
81.7485 103.711 li
81.9063 103.845 81.9243 104.082 81.7896 104.239 cv
81.7158 104.326 81.6104 104.371 81.5049 104.371 cv
cp
0 0 0 rgb
f
86.582 251.541 mo
86.5649 251.541 86.5474 251.54 86.5298 251.537 cv
86.3247 251.509 86.1816 251.319 86.21 251.114 cv
88.1099 237.464 88.5737 201.535 88.5781 201.174 cv
88.5801 201.014 88.6836 200.873 88.8359 200.823 cv
99.3501 197.359 li
99.5469 197.293 99.7588 197.402 99.8232 197.598 cv
99.8882 197.795 99.7813 198.007 99.5845 198.071 cv
89.3247 201.451 li
89.2778 204.792 88.7715 238.147 86.9531 251.218 cv
86.9268 251.405 86.7661 251.541 86.582 251.541 cv
cp
.2 .2 .447059 rgb
f
77.2778 103.955 mo
77.0981 103.955 76.9395 103.825 76.9087 103.642 cv
76.874 103.438 77.0117 103.244 77.2158 103.21 cv
80.3394 102.682 li
80.5381 102.644 80.7368 102.785 80.7715 102.989 cv
80.8062 103.193 80.6685 103.387 80.4644 103.421 cv
77.3408 103.949 li
77.3198 103.953 77.2988 103.955 77.2778 103.955 cv
cp
0 0 0 rgb
f
89.4326 93.9365 mo
89.3423 93.9365 89.2515 93.9038 89.1792 93.8379 cv
89.0269 93.6982 89.0161 93.4609 89.1563 93.3081 cv
90.688 91.6362 92.5029 92.1172 93.248 92.6064 cv
93.4209 92.7197 93.4688 92.9507 93.3564 93.1235 cv
93.2437 93.2969 93.0107 93.3462 92.8384 93.2344 cv
92.771 93.1909 91.187 92.2026 89.709 93.8149 cv
89.6353 93.8955 89.5342 93.9365 89.4326 93.9365 cv
cp
f
99.4673 94.2993 mo
99.3726 94.2993 99.2778 94.2637 99.2051 94.1924 cv
98.1768 93.1851 96.9614 93.7388 96.9106 93.7627 cv
96.7236 93.8486 96.4995 93.7705 96.4116 93.5845 cv
96.3232 93.3979 96.4009 93.1753 96.5869 93.0859 cv
96.6577 93.0518 98.3203 92.2764 99.7295 93.6563 cv
99.8774 93.8013 99.8804 94.0386 99.7354 94.1865 cv
99.6616 94.2617 99.5645 94.2993 99.4673 94.2993 cv
cp
f
96.9014 103.955 mo
96.8555 103.955 96.8096 103.946 96.7642 103.929 cv
96.5718 103.853 96.4766 103.635 96.5522 103.442 cv
97.9307 99.9302 95.5522 98.6494 95.4502 98.5967 cv
95.2666 98.5015 95.1938 98.2759 95.2881 98.0923 cv
95.3828 97.9087 95.6064 97.8364 95.7905 97.9282 cv
95.8218 97.9438 98.8843 99.5532 97.2505 103.717 cv
97.1924 103.864 97.0508 103.955 96.9014 103.955 cv
cp
f
99.001 99.2461 mo
98.8237 99.2461 98.666 99.1196 98.6328 98.939 cv
98.1885 96.521 li
98.1509 96.3174 98.2856 96.1216 98.4893 96.0845 cv
98.6929 96.0454 98.8882 96.1816 98.9258 96.3853 cv
99.3701 98.8032 li
99.4077 99.0068 99.2729 99.2026 99.0693 99.2397 cv
99.0464 99.2441 99.0234 99.2461 99.001 99.2461 cv
cp
f
92.4697 98.8208 mo
92.2925 98.8208 92.1348 98.6943 92.1016 98.5137 cv
91.6567 96.0957 li
91.6191 95.8921 91.7539 95.6963 91.9575 95.6592 cv
92.1636 95.6196 92.3569 95.7568 92.394 95.96 cv
92.8389 98.3779 li
92.8765 98.5815 92.7417 98.7773 92.5381 98.8145 cv
92.5151 98.8188 92.4922 98.8208 92.4697 98.8208 cv
cp
f
94.0024 107.84 mo
93.9194 107.84 91.312 107.814 90.4185 105.395 cv
90.3467 105.201 90.4458 104.985 90.6401 104.914 cv
90.8359 104.841 91.0503 104.941 91.1216 105.135 cv
91.8418 107.084 93.9316 107.069 93.9961 107.09 cv
94.2051 107.09 94.3726 107.255 94.375 107.461 cv
94.3774 107.668 94.2114 107.838 94.0039 107.84 cv
94.0039 107.84 94.0034 107.84 94.0024 107.84 cv
cp
f
82.3223 98.8755 mo
82.3223 98.8755 86.2578 98.1665 87.7124 94.8335 cv
89.1665 91.5 88.9531 88.5 88.9531 88.5 cv
88.9531 88.5 90.9399 90.7549 94.3867 90.3774 cv
97.8335 90 98.7793 86.3335 98.7793 86.3335 cv
95.6211 82.5 li
95.6211 82.5 82.6445 85.3354 82.3223 84.9175 cv
82 84.5 77.2783 93.2163 77.2783 93.2163 cv
82.3223 98.8755 li
cp
f
79.3252 121.63 mo
79.3252 121.63 79.707 115.926 81.1035 116.046 cv
82.5 116.167 85.8647 118.567 89.4326 118.867 cv
93 119.167 94.9087 118.841 95.6211 118.837 cv
96.3335 118.833 96.4888 122.791 96.4888 122.791 cv
96.4888 122.791 104.167 125.5 107 131.167 cv
109.833 136.833 106.611 190.027 106.611 190.027 cv
106.611 190.027 88.9409 195.418 74 194.833 cv
59.0591 194.248 56.5 190.027 56.5 190.027 cv
56.5 190.027 63.5 127.106 67.5 124.303 cv
71.5 121.5 79.3252 121.63 79.3252 121.63 cv
cp
.968627 .45098 .309804 rgb
f
170.916 360.57 mo
171.554 360.484 171.983 359.855 171.871 359.189 cv
171.338 356.036 169.442 347.226 164.456 343.486 cv
158.326 338.891 145.484 337.053 140.815 333.989 cv
136.145 330.925 130.92 323.528 128.133 324.929 cv
125.346 326.329 120.093 332.764 112.504 331.844 cv
104.916 330.925 101.414 329.087 99.3711 330.925 cv
97.3281 332.764 96.1602 358.499 97.0361 360.03 cv
97.9116 361.563 108.6 360.147 109.531 360.396 cv
110.461 360.644 113.088 354.516 114.839 355.435 cv
116.59 356.354 118.727 359.229 121.307 360.549 cv
123.714 361.78 163.264 361.596 170.916 360.57 cv
cp
.27451 .27451 .498039 rgb
f
94.1035 192.324 mo
94.0723 192.324 94.0405 192.32 94.0093 192.313 cv
89.6221 191.178 li
89.4214 191.125 89.3008 190.921 89.3525 190.721 cv
89.4043 190.52 89.6104 190.401 89.8096 190.451 cv
94.1968 191.586 li
94.3975 191.638 94.5181 191.843 94.4663 192.043 cv
94.4224 192.212 94.27 192.324 94.1035 192.324 cv
cp
0 0 0 rgb
f
36.7778 334.278 mo
36.7778 334.278 45.6665 323.188 49.2222 324.205 cv
52.7778 325.223 58.5557 332.139 60.3335 332.458 cv
62.1113 332.777 63.8887 330.319 65.6665 331.549 cv
67.4443 332.777 73.6665 352.542 72.7778 355.327 cv
71.8887 358.111 53.2222 366.36 41.6665 365.125 cv
30.1113 363.889 23.4443 358.765 23.4443 355.327 cv
23.4443 351.889 36.7778 334.278 36.7778 334.278 cv
cp
.27451 .27451 .498039 rgb
f
130.112 338.612 mo
129.99 338.612 129.871 338.554 129.799 338.445 cv
129.685 338.272 129.731 338.04 129.904 337.925 cv
138.598 332.146 li
138.771 332.032 139.004 332.078 139.118 332.25 cv
139.232 332.423 139.186 332.655 139.013 332.771 cv
130.319 338.55 li
130.255 338.592 130.183 338.612 130.112 338.612 cv
cp
1 1 1 rgb
f
138.806 340.844 mo
138.688 340.844 138.573 340.789 138.5 340.686 cv
138.38 340.517 138.42 340.282 138.589 340.163 cv
144.955 335.656 li
145.125 335.536 145.359 335.575 145.478 335.745 cv
145.598 335.914 145.558 336.148 145.389 336.268 cv
139.022 340.774 li
138.957 340.821 138.881 340.844 138.806 340.844 cv
cp
f
52.7778 342.134 mo
39 342.134 li
38.793 342.134 38.625 341.966 38.625 341.759 cv
38.625 341.552 38.793 341.384 39 341.384 cv
52.7778 341.384 li
52.9849 341.384 53.1528 341.552 53.1528 341.759 cv
53.1528 341.966 52.9849 342.134 52.7778 342.134 cv
cp
f
52.7783 336.337 mo
52.7578 336.337 52.7368 336.335 52.7163 336.332 cv
47.9302 335.533 39.1226 336.327 39.0342 336.335 cv
38.8247 336.347 38.645 336.202 38.6265 335.996 cv
38.6074 335.79 38.7593 335.607 38.9658 335.589 cv
39.3301 335.555 47.96 334.78 52.8394 335.592 cv
53.0439 335.626 53.1816 335.819 53.1479 336.023 cv
53.1172 336.207 52.9585 336.337 52.7783 336.337 cv
cp
f
123.986 146.987 mo
123.218 149.299 122.186 153.329 123.116 154.885 cv
123.328 155.24 123.633 155.438 124.048 155.491 cv
124.532 155.553 124.744 155.367 124.861 155.222 cv
125.862 153.987 124.772 149.529 123.986 146.987 cv
cp
124.228 156.253 mo
124.141 156.253 124.049 156.248 123.952 156.235 cv
123.303 156.152 122.805 155.827 122.472 155.27 cv
120.97 152.758 123.54 145.979 123.65 145.691 cv
123.706 145.544 123.824 145.44 124.006 145.451 cv
124.163 145.453 124.302 145.554 124.354 145.702 cv
124.637 146.513 127.072 153.686 125.443 155.694 cv
125.228 155.96 124.85 156.253 124.228 156.253 cv
cp
1 .74902 .411765 rgb
f
86.8799 123.646 mo
83.5981 123.646 79.3994 122.06 79.1914 121.98 cv
78.998 121.906 78.9009 121.689 78.9751 121.496 cv
79.0479 121.302 79.2661 121.207 79.459 121.279 cv
79.5166 121.301 85.2905 123.484 88.3594 122.744 cv
88.5586 122.696 88.7627 122.819 88.812 123.021 cv
88.8604 123.223 88.7363 123.425 88.5352 123.474 cv
88.0322 123.594 87.4707 123.646 86.8799 123.646 cv
cp
f
107.239 178.593 mo
107.032 178.593 106.864 178.425 106.864 178.218 cv
106.864 150.852 li
106.864 150.645 107.032 150.477 107.239 150.477 cv
107.446 150.477 107.614 150.645 107.614 150.852 cv
107.614 178.218 li
107.614 178.425 107.446 178.593 107.239 178.593 cv
cp
f
94.9233 205.862 mo
85.2964 202.88 li
83.7139 202.39 82.8281 200.708 83.3184 199.126 cv
91.3828 173.099 li
91.873 171.516 93.5537 170.63 95.1367 171.121 cv
104.763 174.104 li
106.346 174.594 107.232 176.274 106.741 177.857 cv
98.6772 203.885 li
98.187 205.468 96.5063 206.353 94.9233 205.862 cv
cp
.27451 .27451 .498039 rgb
f
97.9478 206.8 mo
88.3208 203.816 li
86.7378 203.326 85.8525 201.646 86.3428 200.063 cv
94.4072 174.036 li
94.8975 172.453 96.5781 171.567 98.1611 172.058 cv
107.788 175.041 li
109.371 175.531 110.256 177.211 109.766 178.794 cv
101.702 204.821 li
101.211 206.404 99.5303 207.29 97.9478 206.8 cv
cp
0 0 0 rgb
f
89.4326 179.393 mo
88.355 182.87 li
88.355 182.87 97.4727 186.829 97.4443 188.76 cv
97.416 190.691 94.103 191.949 94.103 191.949 cv
94.103 191.949 94.8374 196.106 94.1924 197.459 cv
93.5479 198.813 91.2568 205.455 87.3442 206.206 cv
83.4312 206.957 69.8296 197.158 69.8296 197.158 cv
72.2588 181.871 li
72.2588 181.871 87.7651 178.822 89.4326 179.393 cv
cp
.988235 .639216 .592157 rgb
f
91.6025 184.732 mo
91.5771 184.732 91.5518 184.73 91.5264 184.725 cv
81.4849 182.651 li
81.2817 182.609 81.1514 182.411 81.1934 182.208 cv
81.2349 182.005 81.436 181.873 81.6362 181.917 cv
91.6777 183.99 li
91.8809 184.032 92.0112 184.23 91.9692 184.433 cv
91.9326 184.61 91.7764 184.732 91.6025 184.732 cv
cp
0 0 0 rgb
f
73.1826 122.193 mo
73.1826 122.193 53 126.3 36.6665 143.983 cv
20.3335 161.667 18.8247 183.29 35.3335 191.949 cv
51.8418 200.608 70.4116 202.427 70.4116 202.427 cv
76 178.218 li
58.7573 171.287 li
73.1826 122.193 li
cp
.968627 .45098 .309804 rgb
f
72.8638 177.333 mo
72.8022 177.333 72.7397 177.317 72.6821 177.285 cv
72.522 177.196 56.5239 168.361 45.8203 166.382 cv
45.6167 166.345 45.4824 166.149 45.52 165.945 cv
45.5576 165.742 45.7485 165.604 45.957 165.645 cv
56.7813 167.646 72.8848 176.54 73.0464 176.63 cv
73.2275 176.73 73.2925 176.958 73.1919 177.14 cv
73.1235 177.263 72.9956 177.333 72.8638 177.333 cv
cp
1 .74902 .411765 rgb
f
50.5273 160.521 mo
50.3179 160.521 50.104 160.537 49.8857 160.57 cv
49.3804 160.645 48.7588 160.821 48.668 161.235 cv
48.3486 162.688 52.7612 166.268 56.0254 168.492 cv
55.7759 166.831 54.9883 163.024 52.8633 161.342 cv
52.1738 160.796 51.3901 160.521 50.5273 160.521 cv
cp
56.5 169.635 mo
56.4282 169.635 56.3569 169.615 56.2944 169.574 cv
54.8018 168.596 47.3828 163.587 47.9355 161.074 cv
48.082 160.406 48.7012 159.987 49.7754 159.828 cv
51.1089 159.631 52.3042 159.942 53.3296 160.754 cv
56.3296 163.131 56.853 168.981 56.8735 169.229 cv
56.8857 169.372 56.8149 169.509 56.6919 169.583 cv
56.6328 169.618 56.5664 169.635 56.5 169.635 cv
cp
f
105.369 323.221 mo
105.174 323.221 105.01 323.07 104.996 322.872 cv
104.979 322.634 103.262 298.789 100.601 277.47 cv
97.9419 256.175 88.1899 226.968 88.0918 226.675 cv
88.0259 226.479 88.1313 226.266 88.3281 226.2 cv
88.5239 226.133 88.7368 226.24 88.8027 226.437 cv
88.9014 226.729 98.6772 256.008 101.345 277.376 cv
104.009 298.717 105.727 322.58 105.744 322.819 cv
105.758 323.025 105.603 323.205 105.396 323.22 cv
105.387 323.221 105.378 323.221 105.369 323.221 cv
cp
.2 .2 .447059 rgb
f
74.9087 122.323 mo
74.9087 122.323 71.4526 143.983 68.3335 156.565 cv
66.001 165.973 56.5 169.26 56.5 169.26 cv
64.4551 125.001 li
64.4551 125.001 70.8169 120.646 74.9087 122.323 cv
cp
.486275 .376471 .32549 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 24.2.0
%%For: ( ) ()
%%Title: (2112.w037.n003.45A.p1.45-temp_01.eps)
%%CreationDate: 12/2/2021 6:51 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KB3Q$RfC8\5^97&L&eG2.0YMugKciu$&F;A%"%:R2dA%eThu9dapWTED*^(r"BHUHalfr9QP,5!KX^*NEWn3ZmhjXouZ#1s^
%_D1D1o%3o-QCaG'rT;H>\QY\4nZ/de7]kT-S(UuUenAqJZ9Q!:@c+eP-XPf7?S9sE-Sf8:E!pg:]B2Pr<;,pk7`B-hXHZ%:rIQN6
%DF,pg!8e1ZDRE;Y(]>SWmh^0un@V=gljNZ/ijW)F4Qoea&KU=NU4^9*j1glRa8U4\fkPc6;Q]e8'oSr5/ai8LYC$0I)M<4kh[2J>
%jSUO3?#K1G&n*56gKI<Z'5NHB3^T97bCYaRqPT.!r(2#4JGcmZir?5bmlPp#-1ll,r>Zj>YRc^$=A$FaiNX^ZW').DA;(5E3'?ja
%os33?M26n`Vp*)jVC:p]qEYl$l;0b]#&-&78kV.TQ,#>Q6qDM$>KQoZR<\.H7DC"ERr5T.8j@laa<n\T!drcUqi04X;@ARt&^4hY
%n(3GGRE6hVkK=nZ1l;qD/PDU[NGH94]NHbo&c9pRd*"_eZKM2U)bo"YHZ<0^X/E?])X+c#1/1+j'<[MH<Du\,.1MC&Wd7"^CdXB.
%G2T.^Qj>11a0r2ufnYR:3<D*$Cm;(qe]i6e"QGkZ3;1<dUJqX^e-8V;05<T16sd$DM,=?b=tRK=VkIiAg&8-$+P6Udki;<4?+I%_
%-,cM>+E'5!WXLS/2<VA0!8G)Z!g3IWA:CmVHkcA'Fo6)ZptKr]G;^tF\rM8_*M;UX51Oe)Ra4oTY%Cg=bd-`%ARR=:_IAgrcc\d`
%(X'<@Q>tl=Wk0l!F'U>On*i7Ob@\"]2N(SA=aZCW@[VTbTB>a27Fh!T/<J2!,p"lRR7G2Dnl)V>TBeO;a$3Z7kCp[U(sYe"QCm-3
%n2HZL8`=TV]0lm*`d-N]r.L9Nhq/VfMjq^XiGY/H^-OHu$[ZHTnd)H::(;\_R=$&aP"IQU`\c_=;2)cq.aO\6^r,?_EW7k?8Ldkr
%J$9d8&V":h9Lta858/^f2cpLO-n3E>iQ=,Mr/I=fK$4Jp>7;Q=p`#.M*:Ys$PM(YPb9Oed,qmX',pu:4nIQT4=H&@iEPo-G$..UU
%B\YDQ/]l"$j:@Qm#tc8X#uYo;3BtMDibpBf]T.&D]PqH[NFd'\:gJ+PPU&^?pVE@Pfi^(ij?"8BZOAXD'G<uA`]fHEER-d(nn@NU
%0QMV)Hn6WAkN9;UIa1/en1:N^fh?`^&3#`L+(jV2qRI)8QdQhqR7(((#L)F1#!u(\l6/)XaUb@&E?.pZa!B&(eO,SBiQ<=eT"/:4
%Wi?F)i*W0-<Ulhur$_Kd5DI"H_nZ*OeP25niEuShD>kOSjWDP%c]/\2mYIKWRNI65q'VBbcf&71Ja0ccK>PD$Zb=VU_nZ,E"@#6!
%,7X0%e!E;B:])$lW#8aU"PfjFq6Y4P^M(RR==*e[RI_5qrlO$G:)8:ke&22`olrq&rPe':=S:S<4Y-$Mq3QErs!Z1MJ8i9S`41+(
%;((6"b%l1#:QE5N^\>h^f^\]"3<D;AhBtp'a'X78"Es^V:QE6iQJQUR^YJ]oJ^*@>*rT,jQ*39JMc$5UWnTP(h(L7YrmI$39eGgI
%G$9U:^F$0^,'CQhG1Or9FW/D9fs\4^<ZBRN?ic%QGAJeeYLfH&OMU[K%_hKo`IMQAdALICn\d6NQn"db?neU@DkU/NEXr*Y='>#g
%_i\JbbBmF3"uXB@%+]u]Bh9oK/^dGSGbgdF>>`o+;;O/l:T/o38/+Fb9LJ\;`C0L*AdENneMcr)G">KobL14BJhi/M[d9DBh:-`u
%2,Ifp%;F?e"1EtV=ZWU=dL]CpJ5+:3dmaOgm]9$JE-Odpb!X\_Nl"NNBEkLF)@-2Xg_>5HMl9e7V8k]+c,)1i\&\%li4"RQ\AJJ1
%:VCC`*,&O?<"h5egWI)s#)&dFAH4XH=^&(Ec+t9o.W?Z3Z3Dh[4ED)Df]AMmc@TAYW3Vq1=a:jJeT^H[,n$/]\`".oSOh`Qk1qGU
%=B8/V&jrP"I>>OZfu"r'6T!D/.P>mpe_P[C5r%V+&-U-NCXLN1'!Z14YVM"E2kA(%-n`EN$\En`[kl]22Q[6j2o7!/a;aV%Qd8=L
%!'#Ms8D`qJMJ&Q]TaVEERP=3A-mCRVQcZb?OgXS(kCDs$B&tnjb%ET%Uup;0J^/+u30G?9C-I\^bebp(,L&Pc,2E;.a8kY91$biN
%TP;d4UPq#!]W%'kjk52F<__BQ;A#'C-;77TKmt!SdaZ-2oMHDe3t:=el@=dL]Q\5)UF@$k>1">,4:X?7Yq71N#-TgeKXB?IZtsWK
%E=l3=4U*qV)@u^%TVW(0>ShbPOS?inLqoIJJRccoGhQ:g$kD19+PbJjW,&&fX5Hf430VUeQuF&'K]IZrMWQ)e1aeIjqVuog;!o>a
%(^:C,7&?Th3+u7.^X+rT)Q@RM?#68[1C_eEq,gS)\"e$0&5Y\@ncbd*?dPT,1)p:p"\o&,!q;>)rcB8*0aju.>i8n\2+;%`gGf4G
%i,1u7=F__<Htdj_,oWM<5sjJ=bdO;]1c\h!_'hgXDUN@A`)JW'/;jc7dM[3L?eeWE>>W3Ub6/7.jS@hKi]:NW*F@5ZituVRMC2%A
%fc2_fCqp&+JRG7o#\M1VIh"7;1Bipt98ZE!F%#o[gS-_b"C_Ac78^nIp,:'`Uc`Eo@c8k55f1X_$3&YuRA26bJ_OlXE3bJI!SH&m
%p+N^4UD9g359m@cR$Pt4=9lKs%^<ue))@=&%c@Tphr>E,/I4Wjft\2cj9X`O-#,oT6=#+jQOL\`<5O5Q>Z3""k^r*2j8s^kGJQXu
%LP"MFkHml<c(bJ6CWHs8)hnaH,*7#70UrMD)<7(`#-YCU=U5O!5::_h1nfXI%B>gGY_<1h#:tu5!+sNV`!mWb$IPD37LIj:Pooi[
%TFA'9j9GU!A/VfM!g;9U$]=FjODo65d"<?bR5iB?qC65%^k%,_5YN<ZhuOW/U8`p$Emrk"&A4)7BsR2YP=\Y@PfP&C^_!PW><uBl
%r`/"h`!pfTd6sG3%G2h6O=bJ!@?BW-k3I23KmZ\]!b>p_OPqs)Um:-t6]3=$*g-W`!ZP,iUWtSgTdg1T7/RBtE^;)[BQ#_HcSAXs
%0!GW9P0b0^G&@0%D?Babd/+4[LDm+LF@8irZ4tI&+a]r<>QKj&)%>$&ppWUraM2DeR5%6,\Db5[.jC:>oK5Ya0h,>4pEN<lPRum]
%<>"mSgo/G\\j.!EAC:=DRW)52jLW2,Kld_,e$A'@/4_[n2#/d6*Sj*\AEnc.a>S\S:lnor&P!$S_BtoVCj8^B+GC.X@[lS@;0C5-
%?',Is&Ki#$&fb>q6O$jDRuhI)KJ;]^BjS[k8qKbm7PHT$*u'_@bQfHpBrnP"J]^oYO;q\8NUd8b:aH4'.,Z!&YUKja'lZrZ;68nl
%N#Z=5j9%k>>QT&(D2^%>^qJ,gNVJZFguP3NP5hF'<cF:6@Jfj8m&!/[1ZG,j>R?Q(rF:ZM2A-[/PE7GZV27NH7*rD/cba6.N%;NV
%j#!0@(be-LX2Gf,^46U^8:P(f1^7YGe0OD28e-MU2KT`:/`\[N+lO+KQ"$=j_(bBGnE<`ql#)78)N8PGmmbAV0sVMp+^mJagfg9T
%(HP$]*ZX<'1sCa`'Nl#HkiBCge-qURJYajWKP5pl/(KEp*6=Y+Gqod5ATSSo>*:cIIfgHCa[0F`c9*7c>ZB2jd]bthq!56)M30GZ
%,'"AhXH<t:JZ2:\%YQ_FFP]JM/+R<JW,Tp6:hg`S6d)t[$;*\-,O\ZJ-0BJ]\N8kB2Ossa4Zh6[KXtue\Hk$oo[Ga?L7F&M2Z-!P
%?oVg)j.d.jd_;J>"Z<IQDMPS<2@so"F?^`_WJFWRb`aAA&"iZKNDu4W\R%-*2TL8"g3SrZ(g*198]h>9,-3@XkgJbil@]Xi&IK`^
%9e2pfdi8ij3=N\MYlbJ*!$,A9S7hR@7&p%:RlTH3-cuk=oCP&p&^?+DOhMFm9A"H/J9u>Pi/D-,-@):@,j6LY\s%Z]G>],T7Z_Em
%TE?c&hoN1Z*!et*94qATLD06P9.\qo,%.5Yi<8*3%]r62PFQ$dJ[S8[rqb\'!9Qa1!>>LgOs<FKD.KD:!]u>NdYPOe-^&k-p.Wl6
%E-A"B*(-Jd,Hr4#>eq$h3h`6"M`<9?,:Q<Gm6IVSKYXH:DHeI5,<@.q5boHD8MjC]LcXLLNCZ*"M&/iQWf',9;5[hfcBuCs*R2*b
%5)--krJ2N`"d<p<=,$.h7K]n;9t^,Y0II9$\rm*4#98],EmWJG-),++SVA8qFF!;J6q9$LgJZLRYGe#T7KhNlXPigGf>.Q&.^FX2
%m"heX/F%?A(FRt"!"C4Vl,.S?3?'uXcNbg6UJ=.?mbM';oF?U"Z>od]ET)T?#1Y.XG<0uamHn3M!5#6XM@>9NQlc`og4OVm%$^<[
%H)I$8%on1>el\CPFqR4:5g!9.IIF2ob5;:NW>'KueNa`/KF.anMSZFslQVdELOg"Ml-OZK/E&'HRS7qt*m.VH&r;[N+@S8)6mD=f
%1rtmp&7c_rkL1%GS:&]&i^L4c[tA4^9t>\!a&rZ;93-A%;;9RE&^i+>`=NG1PW6*b@;sM:Oe7E4KQ9=Mb8fba8PF>R(L2o*bSKH'
%VVHX;*,:tG"cbiBF?'fY3=U?Tehr%2U9-q3&()3$m_Z\^Z:S6cX!hN0/=L'h)=p^%5U=dUbRpD*76%#GgIS4*m+2a-M848\]"Eqt
%ik!YCkEWVaLIf]_pl5i^qP<.!)5p&*"HjiuEDr`<%uYRdLK"t6Zl.FQP#tn[^HITE2BB`&C63i,;@oXY"1L,@@(Og,#i%aT-;6.(
%+Bk/Ql[$*./*IZKLM@ns69L'3'[NajOQ[I:n46K`HAC,!nVUq[,VRfu>Yp`R;\)aEd-8jb2A_L`8<U5S)8M0S7m=cp5tiG/_G#V#
%MMT>sd$cajm-+_%i!'M]4q:+sFTsl;1<$A=qN,F'-OJdAI#Y9b8(g3+Nhkn%5M2!<(c\DZ`sY46U+7@l<nT,*>n>B;<)"jH[";#-
%M[S@pKfR!6iW?%,E<sbkk(u,3%9_YIF=Jo4F:GDeBQEOZ(qmXNB2g<#"j/Y=JXK'p\D@?s#3Z$.a2$^ESB1+0=6UXe&OgPLfs`,!
%lE\M'd4oN(/t&;NfqW.Uf7ja)KNogs'O/ntLM6+m`?dPZ8E-d[RA5i'5Ug*bA;6QY1sA-r78=0ma/3)a+cXn^Lo=RFfP9Df#%fe?
%=JgF!i?XXXhp=d^6c?\L0GOH%'e3BZ'1$,@Nk4i$.1X3]3pUrQNAqD'eVV=HZ8-okkCjRQ@+uIrKs#Rn'WanNiBQlL/XP,NL'aqS
%lQ0/noUpUKR$Y.uC4OQ+3oF2J#OR&YFic2<7D^,_>L3%i3(R"@#(d#/EOhWCbL",g"[h?a[65n>>aROeB=qDaD\L>0f`M^LAH5'@
%9%e0L.KN=d(l4[TBLQ+`bdD!8d!g%Yi&5hVfk$9qCJa:`O0$(SW_8[s6i*B*@$h)VECDW1;Flo0.J8LNE`2b.Ws.I^!=^)KCmoI[
%6TNU`r\C3^BH4*'EU0>mI?;()7@uUd)dlbtB.(iA;5oU9-ccR,XDk9ZF1.VHKF*P>Mi_tK(XQGdmjq)"+6i*IFL%YJA.f4Y$&pJc
%L#N.4J0l7hD9UN9_F<%3dLNH(&F*(C_E\+=6HfjWb)>I*H'+9@RAi_bq^!5,'olX=RU3gjYI&%T5on[h>)EWq/2*/YUhFXa_BBq&
%AEF:Mj+pN%gECF$Tl#OeJA[T]QVi%<neI:2*"[H-d`0CqOl6L*0d+noq#MujOor;Hi^qbKJhJcA#t9hD#=0=@7D4^J50uFV^o*FB
%N&8nPhKt$Rd2lB&GJTD?]i"YZ<^:o[QX3g$<^DHTaZ*IPVO3[6lJRp>Qe%e8[.codeH:tDaJcDWo34@U<0&rfl+qQJ#XVN$:+p^c
%r5m+TGZMLHqnL)@]_kI:b=;XYQQEk3#FVBjhE+jgm<$6-SV7([2Z@LeP1H:-rf?b:ZIc89LL^sNrZ.SX)#8Bo9'CMG+%"18#!,f4
%IXet2_!h'mhs"DPBYO@^JGJ%lEW1hQk[/199YKV*H&R&`]3<,\42fliXb)n@i,p&fRE&1"<j#_dVr7l,G2g!botU9b&cu;Xe=].-
%MAM$FotLTXk$/mkg[K0[;/=d-X&l^DrjS%Ceh6p>R9sXX)Ps'T0l_I6"[9"7<p5"'`+d+>5TB2Q.$O3op!jW`k0%)K:[h;]9-<9Q
%3;%@l<NT+))dqlQop]<keKYNE\Mu/^Q+a3L8C3!^_7e8UGiAaq_BuO\hg,s:9u#)W"'VW<.aurIO91P7Z+@gL?lIS6G-M0L(sq$a
%1+1tm<oIYoFP2W%?e-`o9@jWVIT%^A16$JK-?34iQ%QgI4:a+_I7B:%k3u,SkVlS>C=-rF:>2P1+8/X6eF=$K`6"!?7rVT$j:6Dr
%XCAkl'9PiORR=[6i]8eA0TP"A>5`c!LXXbr8V&SEYE-t!5sGE5J\<bCb'pbN%%?@?@CrI`(`$oB5:W#-EiE1JLDtdaH&Yk(;"d\6
%1gBqbA]S%;Z!/O9K3G!H94Zf%<iptl%.sJE'"^XMh\8Sk8FL<5`SZu$TrEpH\;:_HTT'Tr.DVk"pJTNs5-0LV0e^=]71I`BqFHgH
%.fAesCaWR>\+#]gNSo4o'0a+_h`IbOI<qM9(%=[HYOQ,@UTMJWhj&3s*j,Tj)l:`$b6M36KS&GX_s8pR\1*]$%DPL][)Bs:fSeZ2
%rbDBsh=M9C[<n#gf5J;0FZ$FD!_lb"4,\RZb&("a<#e`3l;b>"Mua;L*7JG_V9tM%42r9>*o@ZHjN^/r0cW?O.q1-BX"MEI3_GHK
%QDtRQ<8U?fekM)PM/ng(F['>/j2[tEj2N`Xhm?k:6l(.eDp4EB'3jkDAK,Gk_&nXMXu-h:6/uIEd-.Gcr+<P\LV0qN\>E3,S[;!#
%)iU@dPKMi!TlF%A8*R9mPE]O:T%Kmko^`OlCE'c?Nc+)25H`+BUM!VE<t5Timoq?#717.82M24:%NG1V)sj2W;At[;%nHY%.!&:%
%2[]No#Ji-"_.jrkYW=sC)`YXS,\hJ:iBbBn@k(p7ak#FIl6$]),`FX)H(dVtP>Wb_`8qMhJpcP)"5(]j=,F&Y$0@+k-oV[u-7a2*
%LN8SIO8hg#GLc2u5:do+9$MW8f69"A@.''[F"u+C;]<iun1s.2gcUmla)\qp_WS2ZIl`n=ptu#?ac0B'I@lA8\TM`n@QN&,TkGep
%74(1SM+*R,9"]4JD@b0Hdhj(/-UV%=)=V-FGg+E51$=$:d22Pr$?Dl[a6WurGjT+LjAe!gH#U(fk1\?cdr,[5r\TL/%&PPp0tP=Y
%>2;/ZLh!<>A$f2)2"P!pfJmI@O@3Y0V&ZrN*ju<5I2YPeN%PM+:FskZaF:lA*/Sg*RNLWNfhPC^>a()N)5>f%>^6MQUu94]:e1'/
%d0F/bDMUS#OLTJeCMa#VY>tO9*0KNg1:@M/T3o$-D77)=bqH.RV#^gMHZ0B/R..>/S\?7goJD$:R)[H,:.(""NVF[q3.6a\>,g60
%M\iier,]b8&YciaXR+a,R0]]<p5C?TK[/BD`Z;BDZan45Bc<XLC=0lF),^Ji>dIWt`]UKP\E4@?>2Kf^IrroNR-ZgAU/f5Re8afU
%fi^-*)Pu"Z`G`_`bZ#IH44sMD(m^"Y?u[N54%%#-)M?t[/0%>VL3MNn>l0?!)>A;dP9,3q'_>To^MfH7[T4nk)SZ5-7`KoJ\+l=`
%;kFEpO.=p#B5&GdX=Z^/I8!T#;8l*H9tE6A0o,!b[A77Oh/7JV;EKmGPQf)Hm*Eh_Z=9g"`ED^1eM)KS?>lrC^VQrQ@qb<;$q'%@
%nt1"]2G8hMAkS-.Q.K8drCOhtKi9@=-8@CCCOINf_TknODMiYScJZP6b8@[9o(?!&#A%*2eVp-fO$Tcp4kh(%oM<&6).Vk)r.9Oj
%Yh,OR3E)cR@n^?H2"aNJHn5M1noof+i2^JFUFtRij-#G-.[.R9W`?f]ig8p'p,Ise4]TKZ^Z-03STg]5Dj<%]Rp;pq07*jE^Y`V[
%X&#S6WHccpN4%I*Lid7fL;u9;Qlc,Ba.o&Eql(k%^I6CP[H$Z<ajSp'?F;=DAf[5WUU0j8Pf.+u\'#W9cK)$Z(mC=.Pn6GW:V'/S
%F8GQ:\?]YnUs0mTfqO>u34GQ"WGtco#3d<F$9CDEnW02D=8?i1Z<XF+?Asls&1SFgCN9("7Z*4A;@T6\neabF(/+FnI<"Hc'HNYF
%&jr`QrTdQh;j86Q<3!?@*9n4Fm7M`H$?uf(,)+&p/[,*.q[nHQ@!l0b,GpmkP2i"Z<Qs:N=/BpthY,gspa-ZlJSN`p`4*.2p,T8o
%[7VEB:pI8p(1+CJM'_!hs3q<di*s.3/F5c]1Pr(;DUtBS:6b/HD8$\F([^\8m6iDI_G6=TPF*8:2<-bqB)!kYA(gj<:SYnMR*YN$
%N/,/[@4t6C8PG,HSdC77jT8-T?Bc:Erd6BAHnWWi0?Scf01oXgp7fKn`:V^.RG<^pcM+&,Mgd2#_HrHdPF*DV0].f:f-R!<YKrWV
%4Z0LO`g!:ZVu-%t=F1A;PaK0(*i=](IrlCb*5S`4?^RVc4"bu'&p5,[=.Buk[+m2gCU[`uDjd$Z[9q?tem,Dt5f$^/c1TdqY>'^W
%gMR"%m]Ogj[7OD74u2A-X3J'+h6bnk=dqKgF0.@PC9sYbU+8PH^Nl<f1b,sO./6Ri!7&RImUB_Q`@(otk$g.`UM_eI.fJb$O36=?
%Mci$!q;:t9-W<U(0fI,C=H?tZOc,Hp;Z3N5\Ro:XDJpC][HYH;V-1j^>=MD,IW`j3lB_7r/cWMb>8hse2GcT7mHU!8[HLt_We8&Q
%\V!@oheV=_fr.HpED9/%W*>^R:eg_e,iH'6n)<^N4@m]Mrr'IapbHQdd:KtoYb#t"52J,nB(u:@I9keor@lncTMV]=CJ?KML[>pc
%T0>,!'N;D6](?CNi,;^`RZ:C^]:>92V]s2S3LY7G0M<4K`L+j9TWLN-H!m>N`S*'/0PISi@h-LhcX@Be3p*)qD[putPS7t=]LJlC
%;t4(3eF40@R+VE0`*^Y"7u,'O`9dsNa_>"9\>,%STCeVFoUC[0hc[JFEk_N7?iQ\#rskLLKWP4!^Udphrql.[A\S.*?iQ\#s8I1#
%"BU+2ALjWN110XDY_A32GNe4*^([#?S?M``[LO^OY--Ju^4'SOe\D^1>crJs4csdLqPFE"edH`UArK<(<uBNlA!:YB<*bI;k*k\W
%'uWcnEN^;L-pH<"C#X8ZN6JZea_\'d!C8RQch5eTi7YA_`9"[mdP:.;UmV=-7_[b<QBIl<al[<CH(&Q@-C^pTk%V-kVTCf@ft)(r
%IWZ%27t1mn>IptSI4NjjIVZ"C(Un,gY<$W.H_*G@a-A_@ZC-.Z5/k`^7*:P7.<]1Eano5@Zs/0s;6`KjbE?@1e)X+8D![is37bbl
%3KAR^KR5bFC_+[%L9iGU\mGG-UbQ(d+Ok\:A[55dETeW,F8PDe38h')/\P0(2Sg5R7?7'OfqdISo>Jg7nM3nQbS)Z$`61:51/GR,
%'/(T.L1qDu]SJ*Ij^7/,QO/[;b<t:aC"fjH:E[mq89Z&pM$S@'3eK8Y3L2bOC>q#^1O@lq+#s]k:<bWOQVE];XWt#+0\%t=C*:h#
%#4m0g-=VJV`8<@*CL;`LZPQ?ShaTd)QV>=0rr:[u'4Wn[o37UEeo?-Hdm%gnkD!tKK&VVGNq43WILY%1Cg6)30?nEB)Aem?G:u^/
%]OL:*r2Y$jjm&[Ve4fJolkA```OGnbI[khF_Ge(XCAKM%I`!hYA@e`PV&8*A=WF584#RBD4kXn4nPukoBO#WRrHjRF.J&<?1B5<1
%i)c/^Zr$F5_8)jDjq"VA9Fk"_&__=qBX;Y<m^d-cNLiTZ-Y&*!`dd$'?e%t^OQq1l(i,n;-o]h,(WS6MUL0tbE@>kfa4j!!'V+>@
%-6`/QXZV=qcXTYU"$G%X$tfe8(ie[lcXY2j(mCsNVM2&A4N>kaAY-r0Q97X[MmWS"ij0KnFljN3\nZJDQ<-8KQ/_.7k'A6a'/Vq>
%.2?G<"W(ea;rd.ECF?5^X"Yq(eIc\.\^OG:ee.2-dc6ddP)=6pc_]7co*t_8gTMCP"9`#la2WhJH"5XJ?92&&<t7M,IZ)0gdDAh^
%p1NHXTf?L=^LjFjbi[Lcr@(Au^RJkb2pW=gO;QlZe#LB,h.u&?`=1WX'['(\C=F_Q=H/3WF?KOrdc2t3#5tO>cY:"2fe.p9T?a6?
%X=/5>?0h=Z+E?U$D25ddM:0e1P2<kX(!spmZc^a]EJh)<A\R8A'"30:1UQ6oc;Z-=_cJC8r)Ye([77]<e$bcs':S+DV^3._b\f1"
%`b(u1S]78AErSBnbbM^uHU@=;DB@($68TLrKZp4%Gr.I@k2t(HX@I=f\34XLcV7>#(ZVBK.1PHLb\S?G9sBA>LNELhK]_7K4Ih<K
%cCNR%`Tr6p7g:;(Q<RGRdG2)sF63m"F7K$Cdc7l?'`"rNF"n4&::`oba]g''k6jI_KJrFK-,tC5Hj95Y9OEl9^Z]`f6,r@p?GGZT
%N:C_PNq[,U'<efQc=:T'eQ!K=m<+lJk%33rghnDT<3(A";X;A8X>Fh$oqNL>og"`\ZP_eDJl=*e9tI5X4!V$fdiLbZKfA8d^s$Aa
%J*jD8fh=q4RXU1p-&e%jgV2R`3XT"*?NRr*9O1'Le6QKfo8?>BWDV;&G)eH7N@V3jT+nq_hG-T2fa35LP7*B_NA=:ACXm%?)u-7]
%*MI1kN<u0sb=>golR3e&-;Bpd+C-o6(ID7ZDR&`Tn0qs=2,\U6%'.FqQep%dV&a?Z/1<MjpF0/f7BdSH7Hrd'*!g8U4^mcVd[Q_K
%+6ZJWN&p]ck'kZq;7nW"M.Fit^[&;-+3P>_XYR_qO<!U-4MBT$e*IdnIA48Jo\]7s:4s$O[8SoO:;\*e,_!UIm*+S(kI[oF:_Uo'
%Yb*'r&AtC&%_?R-3Y*bua`A<+,i16\A"nD8gHfC3k+I`=B?e`A9!;*,h,O;Shp3uV`[1VYh44tt`!V!a8_hUNj4lWnJl80Za2s^d
%U`7ALi\@p#;\Ba>]PWV&^]&#WE>gXSo.M&QI]$g:l1%860pN_5K6R*L]O57gIJ]GHa_-nmAt?%WKqF%%9D_X[I*+)hWd)lqN/KKh
%6AP"pmH0Md5LZRJmp_V1?P+OtnZUi^!&AktoJV`,O9NZGfp-?4rF)uifkOtc:W(GCR@W5t1"em836MP"f4X&[M=h\t`Pc+90q0W!
%.DB<oe%/)7e(M;Zp^Z0S`1,&?gKO>%[V!7kmbcV$1!UA+NC(.ESsstqTZ6eZh75m9AjL`ajYub,`[ms6rfCQZ`^SjPG8UVp;j!X#
%&i%hm1uYdNfr^:_A(E"&G-u9OQ"jiqQn2erPf0Z0g!6,4`m&,\lmoEd=>u"3LkA3h:E*WJGnoM3'IJq)E>G'TT.qGTDQ`0@a#Z#C
%s1%YTSU'M\h]N;DGtXLIImt)F@t\o)%66$9qJ"\nq1hFYa"K_^9(/e&`HJX+Hl3R59E\W@e>c$c$JdGD0&RWI\l=YQq<NM8FaE3>
%Z_MO[INR!>jhQDp`S./\a>DVqS&E$Bore6_iil:50ogRIi29_]>V9<g?55n)CUN^;r,*<gqE3V:9r,^X?kT$Jq#aP70Ku#CTFn?T
%c4j9Rs,'.HaM6UsI[?\')m'ddH+F=Qpp+*#?DUFGPUl3R+$<A8++\PEJ5&RH:J-mufaeE=M*q1eGL>?`2]b;GiE+/[>[%:`4_<<L
%l5K:a!>rIh("G!T;=R@!X2n!pDgpWB(\$i#^qKn#')RO[+-f7a06h`#iW-Y+@5,&5**G2B].P9P19Jt!3V(=AX6&q@N\9cUns/si
%cpG(hTPQ)c$E*FV-Xs:N_-d4(._mPJN[O&`DM6_r7QZFT4)$><MgPQ":Cg6M<%_rtD!M$h<C.LD:_.$^\QY\4JbUDO[=Bcn/iFsT
%Gm?QW(cVL`XC%U?K5Co/%]mdee]_ssAWY>I\eo1hQS)=)X3HQ@?DG%gdUGRPHn[;W%S"q6r&FAJW^7OA#>=/^iRT)r589)F(4A.S
%'>,krnI+PMDd.n#^b[?el[WR\A"qB1^QU,G3DtV.78"He:f5)o:FsVD6g:j3!\/mj]@j2arh*G^LfrS/okf/95>*PS-Vj]:/@sO,
%d-!_7$??uU;u[<;3>oLNlJEZ/Cl*3(lMKY3pIPp[B":m.*AsuF2NE3h4H/4gLclmggG/&W1Q(kuYr%4)$Y7:BZZSVQ9rsK3F_Lh?
%-=f_gAea^'ASD^<n!5!ogd'7tC:.J+]<&EUH.qkn>)/*cp#o@&%ApV_`:sk=(cf3$?W0**%KtFlM&8b%Dg=e@XFA&pgj_GR`M,na
%`8\<ukt[_1.JnQ+H1<H6Gj!Q)>!;`/PRhu\[7d]Nm+:"RVVE6F?2#2T3Ek/m:#-MI:[bk$YL0q_H&Z9b/tl(>M9CofYl(>A<Abq4
%O=2u%AZt2_8Y>"p/n)b#>IXlCpDS9)3cWt('bej?:VVf"HFoNleu`Y<JQ0;ED>2u$E_2.f+^0W?A6ZVknPT%<1'=2Ed\N&FH7@CH
%D4:-$/#6Er2j&!eC5HH(g%$*@/54=8SAC$2&re$m0G<PWd?1P;2giBo9-6)ipZd20cs1:O_qh%A)B;K?gM3j0>AL^@mom=EG>?P:
%WZ;Nj2>j?/puWr!rP)Qnm:*'V?'`X0Q8GS@V)s"M[*1jK^$7P[GnL`4'K^%eaAtW0dB4kfJ;':r"dDi-X[FE^&r6f'I,Al!"N2V1
%-'!E3n91jn9OWXmG,l+o(gTR(TQb4!?M1ns?2KJR>!5,a'M!?+Ug:1A\=8=rr:5]_iA\MKDj1I)Nslo5/d2kEVBi;G>Q>M^V5g/$
%!Tq")#,`f0L.HaCp5gPV4o_!Ym[]PbE<9%TVc7HN\D9&INS85W<26:l8859].OCa3:DPdX@(o-["7N""Q+m&UTN3[9^MX#,$8q.2
%_Ph'.b-#DI8kVT3-JbPCoBgR$''p$1!1LdR6)pp-1H=pJcb1)nhl@L)1@e\6$M=';K$o0M^Tj9o-l[S`MX`HF4_P[/36:!pUCI/#
%K*H1S8iM=uRkO^^IJ>?cUUl]4RcLl*FGeWtPY6-1GKb:/%4^]_`ma;9P\?$\aisT?TF'ff0O>e@;]!mdWYK9.U0m7Ca2Gt`Xk!5P
%We`fO1bH)\DQ^1_ffhGgA9"tZ1"tZJd7+LZ#uLCab-&D7pPYkk,pMk$=1_EDFuMbf6l7!T%!$_63Bf9tO[>KLC654=hgQF[qoTG:
%@J#Xp;Stu"7P.3>(@j_b<$`08*@-&fO-AriIPn,*Z-_G`^(NkfSi@20PAPKP_hrZuN0u*C_*l]!2!JG&eZQ2F#KS3;a4J3jZHPmq
%XrG@(;IDE"csu*/m4njr'Rd))PLj)8RU>QrY5Qo0D)Q<*oh.QgmDr>o\=t'Z;'""-@Eg<HgPP?-%Bq.<VI-)=!qBHYo84g0KF`XX
%q4`&C>J7$_,+>c<n:-E?rK5NEQ$I%l,N@UajSUOlTpW@fOiTDqg-dl=7&tr7:IXP/\t1[QZ0ErCWW;Tg*376QUIr"1ooK<i"UeH'
%HVGK=*Du7%UR^RN.;*ngNC`1s)b/CO&_RZU'e3@u.[<MDF4"olY,bkNf;iOV'U?VUAJq"l+\[c`:ul29_%;/UNbl\u`rmg=54MrD
%QaE(hd>Z9\Z:<8YVJE'96*lIblo-XM,:5;OT3-tPY(EIC3g`2ojtKoC\A<L)(_c@(_'-[!035kQ/OuUSYe$lYd%cq_b)KAs_qFE/
%;FsGEWn+`fGbUfi5Z)']d&6=kgIQ[Faq(JU=%];2?H#PWm:j#0]h4A*%P!UZj^HFi'kIsF@=(kNl<atd8@+Mm!sTQ-a,lV"C:+hF
%AM9*@.Hr0;LT(J1frc*F@.s&8W[Ye4qWbd[.?8A3]%S";%5\^4MCu>J6d>&B'9-J$egQ+@2H!*IK,&-$YTGI@5n(X5((Hcj0]iP\
%)s2Y_O9[_WH^HUD?=&[7g.18OS?>eA,#JO[UP"Ch_#aLl=\$?WOY)#$`gKf+:i5oNO^7p/L*2,If.*'GhudRfp?KInp&6bG2cIs?
%%m1ta(k(`%Q.mqZ)VOYi@I8V.K5*iC(sW96E>*Pn%@(]Y`Yr<^2PIFL?X'@-B['JEfbZ_P(A'\7Cf*h_E2\I[XZhCOY,\U'Yrk?g
%;aZn=8JtO,&_SN['4D!@;=PR6:%4mOY/K7DTFSa/)U2^?%L7m9Npua'$[7V><9^>7(Lr%;,O%EW$meO(X2f.cdHUDt-#Ku:fc4"h
%=KXTcC11)>pD8m2,gk/o05@@:9,K8iQa3W@m:!kGPUqE->9-QH]Pk06,:k#K>t*H?L76aU)q[\k@1p4G.5i)sP*s!E[U(QhM'[4.
%He1FJott]]"ZT-la8?@P!SC_h1lO)]7'0doNL1rhUA@TdnT.Ysc!f+t'#f$aR)`uKQ<G#AfYFaC([=Mi;6o!i;T=g9Nq.TEUSIX.
%e'HPOPaCe[[&7K[Nj.>ujOcJTZIA<#kVX[!C/JO+]4W';Z*Mq%LAL-=f:iG'Sm%\5EK]8*ST2%S^"mrW?mAU5=c)cBG'DOmF++-k
%iULV;RG;\l7kZV6agY';kdc\jkO)C->A?:GS6YG7mcdp\a^jF:8M1t.O.U815&7^*r;MJDcJdOO9n%A#YQ".VcX_(hF"Wl.E.9%!
%>^<RSbrY"Dp>O?e#J*KAcPj!1<HrSgJKI\:p;cJS]NKOa^D<?1bVOa(8$mYr"jCUl+2=tqS,;sEj7_ZQmL/s&73==sZh5"s*cg5g
%GD/ch=J1^hkETA/2_,9gpnP3;o]6G:XZjacVpN]6rD`V:I!C1<(63U)D@^i6p[A0`DeD_fdgc4G6T&qaj7Ob3=]aj%53k/AilB[G
%EII`UPHQM3`e.X$RF,n))t]8*j20G"ZP"%pB<OK_rb9'Pl8RIaVoh@*;6HHbl$H2Jka@G'U\*g&k#-Xio0<D*YC,->]XR]#GBNr]
%;XS+#s$Ts6I-T'@;.(uhR(Uge]DB7-]D$bQq0]%\s89E4^Xm^B=YED!f'3%cGM74\4gT-,H*Sc2!nHfO&K479qFZk=_<j;g7\8IP
%!-T+o&D(\6"N9R*IfWK]s7-i=DbID*_BtH0n,f3J*esj+M.n`K:7aNCLP(i&PBm&n3.5%Z\t%I1=>X\Z/#hj<T@S$YDBEdMfA8XB
%aaC<VB5TYd&"e8u>KT>n.W"eiq$gPgTV/fBq__ZY?+9Edo"0[Cos/P&/NnQs\[K2dV`t"SZs^(Sn)Y'2rEd,*oB4-\MjMPn-`r+T
%YZ-%UR6GokXI:_H(\'>9?2<t8Q1LJ@mHo+!q961iK.j\Q0<`q8]CK9Vh)1f&Xki.2_sL+Y@6=GYmG\l-o?1<Lh0nr[[p.Y$&'\\.
%ccUR2CbB#Ip."XG:H&WmlIrB;&Hub)eI1SfYEh@d-Z@QkgY11Q>&C@E4j2]s9KVR>L"t5T#<eF,hga'K=@(?,`6:H0MlZ,hEY61R
%j?iD4QXhjqD?08dZH;1V(G-WkJfr_2K9$D^eUoefP7KS-#K5t&>ppnmGNC&u>0O2"*9F)@^0Y,mem,n3nBj9PH#bpUYl&Js\bIk&
%OM%Kn>pbnSOQ,BBLF,X0rCpiN\am-*5.S7Q;G02u\Wodi]irK&+.dmA9<NcsrfTr\Y-002Y"Oh>9',8:;Jk-:;I=7r9Btor<mk6%
%oHJ!4>l9hneVcoFH+'n(h7W8?\bS;^.CiHO_beIqbNF'>acdNraerd4YER;4l<5sLq&l$J^0eNDDD*s:-1aW6T-^*_eNY='&*o.q
%Qg=$\EmIt$800m!>>6.j>J&!YQg%E=A9Zp%^/j+':7el./0s-&*c<@_>s,j;DEb^YD'qQ].Xt!<4uFE/0@,YSP/TBQHc`>JPJ-$O
%c"eVDQ^-aUb3%H^akC0<-i(/hr\`ATW'+KYmX"8S`Hl-G@6([(]WcGJk4QSpp8P@%hH]oiT^7#0$bEoVJSl7I0:OU1S:g\h$X9+N
%%gu2$H]Jr62;WdfaPIo//EB%/1_t7!mZn[_5!2&73%XJ:$ch@1eV2VWZdXW;$8hAu?!^XC3([F->ZRN`X0#ZEU%B6AW%?La0%>rP
%?0nG2s0]8EE728*\84:@=^3OaShI7==O.d`rN3D>0'd;2:;q!$55Mp7[J9+`bIbaK_2H4Mk9ilNEUWi!n`%rO=2s7aQcJEMD\lLD
%07J$/$]El(f3%[K:F_90[$P-mS&OZ4p1CS?SA)_HE;9(jhYi5_l[*E>G&H^s>;*bH1R#!mpY68q?gg.'=\mntk1';&T'PY6Hi%UA
%k.Tf1c,]S(;k#lC5&?`0h=EN@hqu'"IsH,(p2dQgYMRu)/L@m[O.i&>jYmEk95Eql+-tCYYI\8PdVDL:%[N_<AX'6ZV4F)W2bX$$
%+0R;ffVrLVD\lSqQ9LRP^Fg89PcU]7(S?bSl;r\^EjFmHbP,q5YEi,1Q27dp05N4Y*i\UpT9[hTd*;-AFnTj$s35D'q/lGkj5kKg
%FtT+EV.;,aqr[e;C@43lgg4>N^VAPd?baADDnNW!S:+)ehg2^'iI9p#c+(N8GZ)2(o\mp@qraf@qYa4WS,N4cf%[V0Q+c"3qlSUc
%:Ji(fJ+>S0P.G\kXB;X5\aoNRdotGMDnT<,#9C?q>!6"pq=)3NX;#$kpK#ES`EHte?7r>9chN4ENU5BHWkGn9AG,2bAnlJOCTb3o
%Pe&HL^3Pi(?i=5&^0E6Q3Q5l:^Qoo3_,B^eg4RoGqo&fka5#8O:S/T8&"`+]r!0EkCYj]Q2?2-XbHgm$_/8GsqZj7W`V['nea&93
%RT$h#gNpSQ\X*,o>cf#/ba$f*pYRgY]S5Lrg6[48[FSM@[\91G.i4,3LK]0$i8LI(gA?Z[c$\d7@A17,nEn7@rF+Zk^AY9VH$d9>
%:d)Kt?XJ,b[Vg#dVq9B&?dI>2QEP&hBBBGIrUYg9rUnppn]cCWqONdQbIl_.=j*/ne?bW*G*@5t[W7s#gO"#qjh6'?4B6i-/T32Q
%cl[,++!4j-35n=-,MR\HC#a0=V/O"nrSl91YbSc!p#sl$ZEfXBV!+uuDj@5tQWIM#NY[ndleK$kq+<T2.WhaEmB5eA2l_2.\tM;O
%=hR[V4_7uK?*cE];U*eBlLUc,D<YgbX_EjbYA$dIgL]b`p=!75c%FN+<qK1(mH`WgI=3ts;Um@/os:5I5JPd1m*#k9UO2HtrakQP
%0c&%F($NZiBP#eSa,fRuj2Kc\"lmj[HS*-bH`q-?om9DSmIiihFO0=XF!mG_11+r>Y*t(;CW65Jn:>F>G`[2c3U5ej<^*j0@\"R4
%>Zd?SQ*U)5ICj;[pg@44]3<FRL"lFqnr8(k7(]jbNS4KH=[Zc+IsCBDHN(SF]ZasrkM;?("/ke^fb\l&n<rERrlZNFZ[>et?Z"[_
%E^0Hq5k:I9%lYSphS._!bV(5-I6HE>I-]\>2bU'0F3r1_]pIj7QBC"FDrl$6Rp2f$O*b*Mo,%/1>+Td686K(P+$Ier.6T`'.I97h
%S.DZ]^0\MMr-82)g[*rJ%uREK&%nCKj,:6j0-AeQR/3#%4"hOK*p5.?4uml`@/%d^]7"4@-hUAcq<@a%p@da7K>ts0L\8?UVdB@2
%mV/Ha\^*/DG;c%hD>jI?PEi!*ZXW%)Skab2Gam9tpSIM*na1Jqr;-=@rT1b;PI^_Wp.NDReZNFhes/_e;eBYs;f<B$TUTc_i.7Io
%CO8j_-`tsXm+(4C=mk.9FtmVO*].pk%TB@^a7GdBY5W_HA:%h^8SL9H4BUEgr?7Tc/j6/Gc/1bcd`cWHgpm.^s7UU7o!$["8T([p
%hD*WQ:HQ1h#M@;Ha/-ZPcI]JS`cK+IR=1YgC>;"&F0ki+H0%?fHM?C_b9spde^Z=bYMU/%]3j?a`f&BUG4=LJ^UX!sjRhTpMjlO&
%aifsepW]%chgIP4#sj=Sb-TUO>B(R"pE![TGVjR3jF6sAhTaaN0Dhebnne=t.?iRPI9k:p^LXd9#Aa&+bsC(;IXc<S/fl!3*du*M
%VY9UcLUg3<G5-N[rUB=Bp?hf'mD`?mg3rgkI<<m5e9[DXGh%9)jD,.,%c*BrkiUFGR^IISZ>lZ[5LmO$a(N];e)STelPCofrpoB=
%SW2[QP>?t7p!`!=LUC(Do]`."UWo(Ae*GT8jm*/*Zc1OapFeI4^H6`7l?2-/lh8R#oN492^Nm,7G.#!]ja8q,@R)m8l0GD%kO4q;
%L%E=7PO1<[o8d88*3QD[]t(l50>(TfI*[82qtU$YmDnsio.K9mY24$Plofc@qJ`e7Y-PaPpKkOJ5'[**^]*l>q!%@kLXjG!jG3)"
%l.q+*Qh;^JP93`Hd*9V5K?_T#Y@!jeIB9!*m8&IL/Uf`S^:X5@Z6-`n8A0JcIBgDYg)#H%2f#$eNSX<kCfS1Ir98X1i8*/$r89_d
%G'<;eHZjMj[<I[<?#CZ)*F56Oc]0Us%k`nNc9^b)\ga.+eb=dOb?_;b4hUblHrWu]`QHm2<Sr%pR/YLnG8\/ch)`9uT78Ft*M1#[
%?eo$Oe$!mghn;39=h_D#fK4AR^T)2-*,S[#DT]GJ7`kG0\lF(LHLlQaHE`0bkniZaYl!PC_cl.prHe5.Xh.gjhO`iWp20Coh((_D
%IcZgO[T1)Jn>>cPo'FaqV=I4$^Sp!rEUQu<n#IP1Kam-`m@g(ceQtAicYGJ+:EJ%Dj`%JRFE6o^?<^(:J8W(^T:_KXcZd'V7T*%X
%NG#5OB8qfSp.f[Ol,rt>-Xht;75h183`@4m)g45n<fM(-=hh6i*LfHB*WMr#e^&0lBs-ECn(:s`cYrb(-bS]ka.6H!HJS<6S\%"q
%)VVBCK6Al9r\\lUZO*SB>hs2O`8*;Tnp\&QDGu;"ek#_]6?(hIME>XLlBe/0A09q((VFf$pR5)d!p/)+;6=(1Z?Z>SJsa3d(A;Oo
%>2c>UX8'6ZpF;eXlclUABgD+bN1^J9J-'Vo?CeQVQMb?RL3=+A5kEHoG3-$pQ--CqAm3*P27t%+2,o"uOnQ\\\/F3pFL0In'V2Ta
%RslkpX1"%.R:&Q(DtMo1;)?=K90+_!eR>KpUUF877fn@l5U*CUcb_qJHen<CgNVAZF>e)!@X$O?AE.p9TeT>UCXqFCjirkjBtMC!
%f=3u'S>-s",>6__;TC-GiG:t6nm-W$BZWou3Gk!132lH4Ar0q?5b3RK(u^!R8g$ID%`,oticl9ai&U6SN66t02\R3U_fc!eKIH-s
%d6E&#g9N?gF.NUOQ>X(Df,D-=UTkh\e*BPZkV')+[9TVkMbVmp8)&ORoe?(NG%%j`!!V3',K#8icSS%&3L$7DXP?0@@q]`G3iouP
%gUGUt[9sI3DZ$^T/sHiJ_2j'Oi,1\j7P1u<)@:#m`NgNth+:i=(;UY4?'W9d9%j:>UQ=4'i&QhR:DXqW9<YbdrU:c^Vfmf9<I`u<
%)hq.@Fm@p!m:+*tc*U^'4(U;[H$UI;R#9lUVL\1mkYt-g_VoL?(cE/B-8];Oeu]$!![;aS?_3P\n$.YQ2gfP@7-@.bWtrCg#ZMXO
%'uc?41kqne^on(66P?L?59Vp)-@hT4<Ga(shtY_ie&1q\I&R6pZ`@&$])EDhGYNS,f8N!C_250k!o,#:(k+ES?:VmtC@+D0SGEBP
%'VE'K)?r-Hm?O].;O-Po,*)<5"EYV?:kdRJ=uC,pi$V.(PM]#t4g+M]cZ=C)3bT#S>tqus$jO@Kc-_:"YVGQKoESo@_l.?PiIFPF
%7([c'f9)m6q[:jF-o=QhR%]+r+ctLs%OX5r&G_<)JO9I_FR6@P=B>9/6[.X6Y\&Y'+6nT4:>$(8`!jNdo6dN`)g`9mU4]rqT^8:^
%K7J#Nb^37W+qFLRS6CGOQCG!UU"0_GMHp2=XkkDo3jRtdJ)lR-M>,9P#;I`[#"s1-qi@<dm92o]He%?"*H&"VkSI!u[n"sgHE]jZ
%0t)27I,ZA?"2<OTK;?R_G?n:O/`A!m3/>6m(VPrFjEpJtEQoR([bZV:3=3qeiId!6^!"1i[mHq]$S_=T6nfH^^[!U\n)f.N>l"Lo
%1I[N9./l7e1PGqE^l.mLL;,\)E=hBG]JhO@R$OK)21)@#)6PLH==t(<j_CrlC@K6Ji!6IBF*(K9R$2G*N."tShE=061fU\%^"_SZ
%rq?+qn4#UR)E@2'^ku4Ig]Z>]<OhJ,=<6@I^aUWi?JXMoHk'2Plo-,S\$r?ml8K9=@TOd?j-uOk=p#a`$nsV!okq>->P?^%n>j+1
%WJ],alDc:S:_b'^fJe"h=HUU?jPZ*hKEaQsiN'^q:\H.pgiX@gXd3q41&+7`C8o5Ykpi69Rf1Z"ZoasQMqq$j`kPP)5"VKVe2toF
%n()+,V=AT=n"o0M@TTu[\V[,_r:=Sk"5.uK;nnS$_eWqsb+2$\#&j0jmuc5k.a8!T4&oRUZlQ0VP[R\&VM!_\/_@um6W9:_(b4Ah
%Wp,geTl)Y+9=$qaVKCQJCfH,"Af<;d3872B[UUZ85q/[I(N^g60[!0NRL?]!<Ggqcd1`C>,5hedb`nhMDW9DXs"i/hU0@WH<N'XO
%T]K*5quFZdmSV[&/pqV4*0cp@r:N9Q'CBI@=)ADrY+`Z:70cP'-@YS+:RQ=dCY#A--**;5=\ZOh(MMa=@8iKP=u9Ad[2%M0j_j%q
%&HScg3]M!OUDPh+;mucJ3(H\_;jq1,3-!Df`!eKA8L]C0,QP#glAh=]9a><K!Z'BfM%hKB<Wgb2VLTRg_DHfd\r"m4To]A?`5r+Q
%//p;F?!;u^-;;4BWMpAnZX>naJN2jL[Wk=C_XiG3^5Cl'&faEjOn]\22Ad;/"\q?7(bf;c<H.01T!D<4&n&O0/V)PG=W8asZqD5q
%=+qbdb#T>eL8h(Mf0FWafdt%k'8E?]1`/*%*3c7t&JZ7,//*$cQmkN_M5gb(a`WG-N0L?[Es)NPYTF\NTrL0J"(\eF_6*mq%#s7k
%>iJR.B>L[[)jn1:4,>g)aoT[o3CV=p"p$'\4W(<$R*9fT"oVV>8i'`mTF8+`<&n\\Ym`/f^$.@:(l>"[OJQoC0PT(A"V;M)@/rJ"
%KpW"?VH?U1!/YZ2K@n7qR/r_+,7Js<BKG2(1dQj)gOuS[!ds/2IX^o8<-a91Z!sLc^pb9]Y1cPr>lZhO\CPYk7qe-\S/)'aAR[*Y
%P&!Y;3&\#U5R"2Z."Zt@*<q'/R)D.j972?P7tJrp>tdP"/p!(fJN3!N'L%upeSS\h.d4BobuE/t#m<dW(o0,$Bd&.5Na`BpVG]Fp
%2+25[As`^A/QHnnK0nM4+TEBiLaoF04TVrj;t;Lo%>$-(c;%G_Jf(pCR+?@"Q,`r&W$*mjEC&D\X=e%+@5U,M-/=W%TTj7_E%'pc
%P6hIje^bp@"IZ,!'Qb1&TX#=Ue)I?X106k(d$?dMf-N=u5XNkY(mYA9@1dIpSsUEt7I@8d2.AUO%Q&g_+Ad,3Ym]&<(hBY,kS:K<
%Ba]G0-o;2B3(B!@(^)U:iY?9)G=>dO3D4!rDqd/U/kc=#7SEufJ=^?UW$J)C![aVPTIV$e'a60c0*[4^-m4dZ1N;1RZA@`WK^Yih
%%#,H4fbanB*eM03Mn5>\b^ptheMU22)2.8VDCn:B9iX^NK>M6C=b%Y\Lgk-$io8V$.MG,L@gcj)i*==dU3%2E`8Nbt<1u+,V*O8`
%(ia7>9HGc>^i>qGZ-iQ)IgrX+\graQ;?\:(K6\"F6c4b_X!jhl.VqGF@C#u(*=QCc1Z`]m1E00S8n/>tKe*7j>*8f>W]FsDcn5um
%JlW,'+4to'dPfd)3<@X[q&O-innY1:47IPmp@2E1d#[U?r?7):JfiqiB\RWr['!Qmclpm^5==&E_/cc0duY6l!G<2CKO%F-6Fh$H
%0kPs=U.H>4_N5f1;[m[V^^$WkJ@fBTmqQX4<9U!;!'$qIF:J!`U3L8R*Q/Th$XF!72'!a.U7tAXl%,-c7!1h-$g#+i`Zp0AG$h^]
%Kn=hQEW?iU67t0@b*L-O&"*^81;Rk4!<iEf=3.HK(DH`0J:58c&<8J)<Qmk(n-j>kFUe!lE"Df"MA]5\E'I(IOjtJgoE5=\@&"4Z
%CseLS%Za2ff.8H9*M<ZDaom]TJ/KhXYGm*ldK8#oF9*il79?F4pgIP@#3,-0Xm3&\2Tg"ReR6jZ:,2?0nA](K@4%,XKO;s>Lhf/h
%&\;pphU+mXkiAGlL\M';&JZlokicuD:H%tKkiq?[mFT2I!j/Yi`l)OZQU-5&TL(H6%&c\HOV@kIJO\NP43=-_!+;82E?Q227!Oo+
%cuhe@(eHM9@rQ82B?%]QIDN,m\k>I.S5<sTJK)++VQ%a7DTK_m)(H+`?mmGU_8CeNKcFkK]K3:O&1CZ!k5qpGqXSnR&>@jE@fb\/
%$]SPer`2$E!1Z-N24-,70nG_1E7s7U^R94:0-9+,1"^o,Fdf?j!>?D-]4_3C9UAEt)*Yns73VqhNXCR!a=t&tBahDrOsA%G8X'6d
%i\DX-1f76XpBkanilDi8$8;q]M;B\M/X;lFN(*gc!c$q0q>b7k-JC]24f3!K811kS9;0>d+O)fI%KHjC'daN_/Xm+$m'7d*e$qEs
%6":U^&L@ku7Dl!a%.Js*hB#$9bE,P>]b1UV%71/I*0a\0i@TBZEm_?/PK$.W0qhf(2[DZ!^mIFSUN%\1ESZKITruXmIn4%3GDo53
%_phq\ZOI2J0^&e8">V7<&-28Y)8uL]=9cpo+:No1;%7]063[mi@L>&!oLFIc.'aDM.NEF0e-=aT:f-F8'a-p5YGMD.2[g@hdiI1T
%OFj_TeHK%1k.2ZT(5=;0Fi@bp9\X"u8l7u"`DtU/`P>d.>_["7-TEo?9Y!X_NaiXAEA`Y?7$IbJae]gaTanXT%!$Ip;929N`RGbS
%Wb0DR%WJejSo/Kh2L,Is8FN>ao7EFPZ-k>IJDecpSS<imG7;KQJ?nfL!fm]2-=I=NKg95QNtCSl%!@\T&S07]9OqQ9+Fc,aeq#9'
%ghEYIYdLno_1DCh^_@I=Zuf5+\Z.+jWscmsl@:?N:Ilh*TPBBf\R8?mEmt(ba\W-%%!:?Xl'"jBN&[9R1%u_70a]#8*hkB1s%'"d
%N65up@RGu)8kMP?e%t[d-3c2U.0,'fZHs1N#=/,W@(W8Q74-_$7Ks/A*<>'e#]'X86Gc-cAfuHbd[L<5O#[KHZPkh$&U+>S$</B_
%O-5>c/Qs+J-"dajW54ap+/Y6.6[K`['CcD*?m:oOFbf%.NA;d]-d92)'UV1:"PS`b<)+-C#oeWfLnMr.SV,h((l00o7_kpR+@&`T
%i'Fn'[AMCtE9[0)jd0+nD2:\>P;At9Uiur+@SG3(JR^]B!Y+@6e7?siT8lJhnpY*h-1\qjPraZFD!!.>cQHK0$:8%j=&$tX)t8J.
%G<k^u;_pL`AC.8G.\.4TP!"0HN>GDO3j!!tRd8=n;:uj;#?9-BF2=QFKQe7MK"_8Z`H8er.`"5`?q#jX27f!fLbTSt;8@;lUEC8G
%>0NOF&BOprSs%UE-Hgg!MWLOTID)+e:neEtD+tB>=kcE<!#9t``@`1J],m!6s0R*AN.Z.P<Ab#l!l@En"@f^3a)Yi>)'TZ%(^P%;
%2u6"B/7)fe##KSa1^B7%ekj/<HRrHr.O'\KE>a47X%Mjq"\Q$gH'OuDO!'HZM$m6!8TH)G!ki;(oo-gn_?N$Ye,nhK=*WX5jn<Of
%846U2(auYV*t@N;)&,H&-Z:b$a1XH[X?2m=EX:Z44G)6EPu8V0VP@,=6:)YX@MLuK)DOuKOBD=B8B`hVTn`dE*H2%:bm9nM;]$\c
%#Zse?o7O4@W$T$0)C'lhG#26tKCU<"H8r'`f-6%a("82%#o*T8LoK[@MCO%-ePVPRS.ktm+EWoJ4]#R8>5KW1mHD:$]#$4jjZp`$
%NuWe,]/.$k>sn"Ibb%Wr3XTgh&_(B/00TH<!%f1L<<Q[V7n#NDDh'rN)nZ;JA."-$5`%Nf!L+np=/_?E7Yn'cKAaT"kjc4-X5KW1
%8+nZ:E3ZB)3f1_IETfDs7+7ma:e\8!7fo+1#3Ur!=%\2V$u9jg!=+Dg*:,i(plM2s*AnZ81UOue@>7oAn<Rp[0!Z5M3$Sc44b+`r
%#07E<XFA"56&_5aJ:[\PHpj<bA^)MS'/?R#`("k_iZIdgM't@k^GXbsC(=\a@@J:TA5r\kMF,K(RVH43*JfI77YMIf#&5KK<krQW
%q1cW1XbL6(!bh`(!p7H=#.t8d04J2r#`!1D+NpE#KR\W"C6Oa4HHL=1cet:^-IE`uNHmZ,l=tuV'kl_r"C\(kl<"1@d:3jI=D/hI
%E#<>?F\ABk!cabXRPQg),t2@EBZG?T'j#O?R[QOcd#N\c.CNag9rFg0i)GMTN'nb0r>;sOM0^69qX7RAr.Q6o#Ab<i=@b2e)d9'?
%l@`omL1n]i4HSU/T8%AQ3Y4POOJbIake)(JMfKA'RC:=lb1)Z.E@(#d&F'Z-&,HAE6o_cDVV+l3WgJbIW"H&h+H;40W.B:A,7n#b
%%\PuVr;@c=FA1O)DI:b,?J$REJ;9ne*!2i9@M#aY#6;isR-7[CBA"UF.3$1+P/%l71i4Z&Lqj6)WNG*9Qc%fpgS/7L"@VJL=Xo.i
%(jq5n,`_B-f4cHJ/p:X;NlWd*:9^EZ&SS!b.dAEUIf8Ilf/W!DFVjcQi#<VZ'>PR-TiDWm79'gb33kgL?'lWG!PIQ'UHYS,M/%aL
%#!+XRN764@bO2NcUN7X[gjhZULVQJ(WKcf:dor85r8Sed3#J4\<eq'4Db,.%9]1Mg'@*@$JCXid.TOP1>;05-VmS9l+:o)=&W-bB
%'J26'Z87!K9HJZD$k%)%M%b2aA0?^rZ!F`'%_9"Z)5.Yd$;?SP=_-siUWFT0SNgle;7G3W3b3_?'3AG<JBH&t#+B<h7@M$-'bP1%
%F#@\4fjfRuX+BmVrkIE6Ho.f+^c_k8>T;:-kp%BN1fb1?dmX3?\YinQ$AoD)[9+F/EZR=q?PpGAWi.1QQ9Z2E&fA]3)>Cd0!?nga
%ai6b^.%p*Wck7%edmpcL<7kX:"r"`/Ylh?(4C&lZ>8Bt+6\4EUKC*38D__##%$dmI`/P7E`'@fCQB#b^Ehe4P0k`GnU1bY#8p.t;
%-6Yi+T+4A+)F@mQG)A>X^;knb0HrhWJSSF,QOql)Jh_d(e%oC<E>Tf<>--Z(!-M"N7<`U+5J^2P/@0Ct'sM522R4RD!j69OVPL[0
%(,.L@N.>V&6\3ap>[6.NJ-&*Sb\Y:MUH>K_5@*Zrb@]D0=:A4F0UH6S=GD1=9",JFk%#,,<*"6/&J!].mB+M3)Nk(4%FLeaA6@pr
%\;Wa/D3Skac=<"%fCLl`E6sUj9<;-NN145f:Qht^=l1VW.4>N!`_6ZHe;4sJA6=Oa,d6Bd#b*]K-_LV/'2oc-3&kBXZHU4+<SkTj
%+b_>4&9oDX7LVuj=K3uSe(BWR:*i[#mT82WLa-I83FTi;9p_NkS@0RrE?K>^+c`+P-.jqV"7^J(bt=ctjNSWq=?hV4ADmAUG)*@V
%BNVR5`#k`,e7=?E,qX*+*1>;5<Q<6hhc[m%j1S+6^kqO^c)/@/,)h'WWT+VF+]LS)4NqF,%SBE/BYq0-8C;Phb3@Wi&X,I,/u&8O
%A"smH+7T1:R9u3"&D1X7)Q6]Y9G/jd@Mldj0Hf*UQjFa8fqL(25EoL5]1:Q'<!+nee>o7K*A/d2C-%7=2;f9Be8HmtP18j,E7P^l
%,Tsa:"H=:(3eD`L$!+^dQ'Ghk,j@[mTn3sUs2W808>rO<K]ok^())Y@6EUEp,ueKal(C0`fg5nYB[Xoe#D6tcT>_+*<5u)81K:\0
%gdN5pd:R=D@E?#u77!p_!O",!HX\Y>6Tu<(Ph%\"fKI+lG-GS4E^(Zbs!/N]-a8)tg71DB,-&mb9Z^QWn3c84Hj<8;^bIX<"T].:
%T->(3RM)j2`W\(3-UI)H3e>:k>])Ho%%N.?"Z^jmr#hF48'g*6^Qu`a:MV*h0.3N`A_"9AGAdFQU_7[Z.t*rY*iH-hZPO0B^<;([
%#W.(&@D6[[$Big_1"*U.d"r&\&afVb/olB<Ye<Cnk_MMn5W+M;&8E)O9qeqg\,t`#<Y4;9g7L$0Y/%jnd$9WCL`Ko;Y:RhJiC6JZ
%<B5)t?.9#*9[2]bW39n/$ujXkq"O#UoKHRA#Ws?l32Yb(MmenMGR+Is5u;<R"^Are#F8J8!"m[/L]LD`3ekp&Tf*uKd)^(4.GX(A
%#'`66[u/<n9kXJ;BV@GN"\(h_NlAZ4_Z$6]lQIP0TNsAh'0Ha5bN>X'*S7JT3TIsrD;+BYde7u<#l<GS,=2_U>)8&Pa$t-D1ItC<
%A.3XUk]CW/5m?2hbRQY'PaF0nD?g_=>G)_dMrM%B5m?=GiWrK>R[WHZlaJ<QWOn%4(TJsT/>Km0!4>b$"_eQ<UpX%0.>G4R/ff]J
%A-&NL>-ZN>ZiOdh/>;2T4@&l'Jd/GZc9.e%8,aNXGE\'?&rUo7+@O+!OLjc[36.o7SV*@K]5V"s-<uc@PJ+s'CgOXs@uC0\ciG`m
%Sat/!0VF%t"$DP4S,U$r>TGrm6)"`&dP3`d"=WXP$@nAhTu@<@JL7f3Um\A6"j0*+MJQO=crd[mi#.WRk)DVSHB)H;%!$(&#%d.C
%<r@()_6Fhlim(JldrCoSF\H-;KNSUA#$)C!3>=Z'6Vrk$Q,p.D''*M%/>Td"&M)-s;0soU*!eB$FrE6nhG7(C4d!+BK_D79k&GBf
%\YuRU5"!8=K#_`,TGF1q&KhA=9EDF=>NX"O9,p6oZYGoHLJbF&Olpp1b+\_Mmt/Bsfb2:D(Y&dA&rQ8<lE2\:?po_=KOp'>)Qqj'
%YKj#)?jKbOLDb_h&e9@P1=bH&/-)sjS[4[n7VJeU940/-<lJT2DOD6ZMTg\VUo3Lfc3KRWO=^j>iiijn`Q93,rGuYr#]`@"'3"$m
%eKX#$^3%ug_<@%NEH8S&CJR2Q>tu8uU`r?G>7Y`(NRQc\2,&&U66:9RbY0qM,A'Dq">S+#Ub\f\ooN=6cZu57dhT=8^rkSGn8&OV
%TI\^PF_GA>V(_qcU5TXIR"\"4OiH:o:u5_2i=SAE@LDG'R?X1paAm@NF.2,kOpu4PB[O%YaTen67ugP8OiE^D#tBPm=TY#-4D[q5
%Igl<M+`*U$=_mrh7a'5kERfop\/TV[6ol8]"fho;7PUe!IQ9Qo3j(TtX-.r9;c0B0At#_EFWMV\+fL!](-o7=Q9]P@Ma5.i!rV*<
%Q`+\hZ66[)Cb5h:d`tp`5d$aimX2EY\^[ehl2WGB_'ta#@0[gH\D5#:#udcY9eeYG2bd"C7mj+Ti4;/[=VmF2nHc?jb>1Y8PW&_2
%-n;7F7UK$C0`n;3dVOO:YfMX!.'&dhRT"L;L8e=].]H^*3gOKDo)_[`/I<#c;e3KmDd]7i%+J8GUpcp?m8IUZUS!,cM&b(]"s2@W
%=boGFLf0F\9G7JLp6>+:*nh`)So"h2@Q=eIeTjM)JACp?D*u!hft5G9fXj-O(,"5)m+d0Z(X@VdrE9d]Y96]8LG;$)h#t%)P2X-$
%6Wuc\2&/C20R,1ljl;7!1@`-eG+`m8'LB6/4j+%oGMgjnX"Ns#R.-f'9EZhYC=)l65N)MEh;gsJ?rX5R)UeG#Gjd?f"!?EtrVQqA
%8@,((jGM>FLq,'H!2;8>@R*EW\5-04Y\!E"i/Q3:WZI]0G$De0S"tP7.!DhC94=kKTErt:l>V6^A$[kGF.Tc#>L=_BR2hkU?<ims
%2M>Y\!U?brFP7_\Pd<B52`+%S'q:Ph6+.P"2T',aBFB?Bi?g:jXpI.`J!&haJ=@[u%5L:t%(0*t+n.`:6YHX)7!1PF+pbGY#r6IP
%It=Y(a@eX(guUeL-u'Qi\e+`8m5sHU<+4L4h9`;q:XVu?)Zh4ga'"=rTA<n%[-jaBlmf/?L/8U?S!\?WZk3!]VC>In*bCY>M+nBV
%_f_%J6P4Nd.(%a?GI2A@=asHG@/=.sTEnOs/HR586-"?YUlkDsmQNul.kak_b?'cRQ5!--3eGX)A**b%0,)Em;1sQ6Wt9MS@D53p
%iEC8!*Mc#7-tZ*Ucr%pX^jL`&+Ufh`=7@%T2B"E%P%XK&aJL2m',;^*)4+Sg\pFK11lar0V0IT,jO%BO72)GkgsDXC\mfWU6Z]Tq
%EGR\@K'NVC#WKrt`5Ef,l@tX>&MF]u8c<6>N!,r9.RqKW)kf_;fm^\^UYXj[C(Tl=dMs3\m$OFKiYsK]KKJc;'TC>&I[,YccpX8b
%i/JV]7?3C*+in-kU^7hZ+9i<-.sq>KTjMS;;D$;t*2Woeec\s@+<BK1er5V9EDL63W@m(.K?StMa8tR"%QoZNbB[bf8NA8HlF:=j
%Ym$KQb!hVE:N9_A$k[^]lnOT_b99])'_[2RMn'V:%YNR\a_Q-n6ni&)\+S/53gWpU&IknYZ_Pu%2dfEKVWgE^FHZ%#EsAbJMR>#L
%lH/F(QGH55!_OSp<'5_*#+9@2=(,abe,uYca/&DG$IOGOTX7O.l7t;-;'<dgQY_h]Z^*%rWb=U'C15PVqHuV.4!e_(2*B^3Cl4.J
%i(C=T.KL5_^+$K6TQ<P)G6Hns2qj\8fi^sQ:dQ;\'HkX8gI2](Z!c3n+0i_q^,g5`J^`LP2-S?QS63k-VVHg_3+TBA'L=W)V_)5E
%6O<K>]UGf<Y"VDiS-d'-=1EiU<=MYF!/qe6A!338nKnrM\iQVk$(p:#$O.E(+,&W>/ILJG;jFH#4>0$9]R[t?2(?1[Y*#BM8mG6D
%Q#sBd^>\1!4FF)rdc%$m#\*k<GnLUj.e[HSe4)lY#Rhi9n:A2JqV.u]C@'mKU:JJZ"-hYt:g./f1]Tt-kS)t$"k+4pmPMQXf+lC4
%\kp4^\?8FtJ9bao(4cmZ2AFNG7=o?_$cEca.5:H/4/,E3"$A3pC:kM>2MdA1rc5GBP;+1Lh27#T&^"(Z0p]5sNk-]THNomcD[:3C
%<*;`N_0/Nd';eXo$%1,9CP&9j5p4mah1;X[XT![cdC'=#lO@emYJfH)>o%9jP#0qki/.sTNl^OSAq1YY*mJ:48#S\Hc)FLA.sF:H
%]GX)u97QFT.h$\*ZH3O_QD&tRdj_bVXuJ3o,2X"UMmBr,_O5f#;A\;"7^VeQFWH35fZ&#S---c,5hq=?.1J[r37CXdP1Km=\+'q=
%&_)N5lG7291H@Tg>_ML@eR'>lB5tH)ZtprgV-)BGl^Tf$%r)`5SNAr#l<:>!E]H"85/(`ML0<X!MoI@\Vtru'Bp]aFK0>bLS"ns8
%:c9s,5jt!AWSAEHFKB6"Xg2h:;,phDJZ3P2X`34%MhCc6>c=X/5_l1$b_&>P<u$-C)Q!UU""7qI"EF?*q_:P+!hPi2lT1Q:j\rN%
%(Si8a#bn^pg8/NTdP>^F2f0EAM8331D/!ZROb'#4[.i#3QcRDJ(s$gW[Of[c\QhEc#t9rKPsn8JSO#XF]!k3:dbZ0$C5E'CV:JXU
%;N#ECj@m)"([3(K*FhrJgq-tAL)>]kDMW8c`&#=s<JQU?kn+2lYd&JgCU=eR`,Jo_Ss57#BNnY:0*$Sk_o9,3LgZ4frWIo"5e4bV
%PX*CL\oOR?Wk+_f(=IdW6Z+*VKIJ&!._MQ"1i3r_?$(pk&+1_uT&+G-\&&RoGi'g&o:Yq.dZ@9.$%iO,bsC[Z"u.!G<**SG!3"$V
%B:1C8r>7p7/ab",g_eX#"HI;(#R3O7dh/AW'8m*@1qm%QGFVl*"HuP2J98H`csU;`_m.R`7r)le*PKnbX=&Vhas[HsgmlZh5ZsEe
%H$BH)PMAPn^?j.`baQB>[97c!<`Dd'=Up1,%6QS\Uob;W?"f8ZD&p4[KTSQ%ZWXrU$)YQ9>pU0q3n^M_`p)D-?+,Y1p6dNCY9ITS
%%%>1J#d49GXcKhpb,/PH:WJl\9-@.BOFbu]_#(-*^2aXU\g%Sd!k4tN&L>qskb9$1<Xk`Ha+7a?Rt#Bt0&;m+R7>MMmrDo)0,*r>
%B-GU^ZAA,.,"X8X#bmSe#)OA$F@.3;1s(LQ'mJWq7Wo26$r*nbdWIgbJ>)"(&DlfWZ?4RC2IKs_M6GpXTMS_1UM@@?;=%)T36DF:
%;+fDNCPaDU0SMf`(gL,S-;)>?D*ron4aM5BS0N'QldG>^U;\k+i=7sOLKi:DRjAi3KAZ&c<Gh!5dUf8R=U?@NY7R:Al#n5A$mmq,
%i&ZlNnS*eSh#PD,lWrTIAT_PeYrQfa,:JOQ[TI\UMBKW"&0Z;L_pIJH8-#>6A7u%E>SY:bY,EN5!2OM$ip`CnpV%eAUhgH%/Yhmt
%&]tI_!&`,i8!'Rr5]GVi6!T!h<(ZHG=Ll;8#h]E",,TSr0ClGh<Q`*W"\TQ:'Vr+0aJB3\%PC)aRAb5%$p2;;j_/\A<mAQQ2F*?K
%VLeVgomf[T44KD:fXAs3L3Q#Y$+I1/MEir!?&>Qm<_F^u?!%4b]!1$[T'5_ZcB*ZA6l8aQM5No#,,#8t=Q^n70,#[o6=W?D.h3LC
%)Yreu_\)\V"=^/B%'dJH5nkFTLg29(=#F]a"5\W_:)\/*WW_mJ=(DqrW1(Z+,LU:\b0#]g7)QX$&>\g?TSD6kJMV@`3F?'nW>U7k
%8+T0Q*'p+EMP?aO=*IN(\?3]CZZ`J]2Ns.0)&f'8!I^#F!<DYIhU]JtE,@crle3OmM89`!>9VLnh6(j4M^hX-Q6qoQl,9\KKEPd"
%$@_2^5.p-9%W,#rMH;nZGhnobC5/nK_5s6MB`P`"JaUn%)m;*=ih-ZJ_5>Dj&?6;tK'WhHD3re>]TX+:0ib56)CY]$56.;#:i'<N
%a7Gb"`?:07>Ylk<S<C4t67AGVU/a:["Vu\2ELATLK1$8t0QaQYA^sN.02>9]/5Li_ncCQ%S4lD'No8=X;%C/FN)LO,:H0XR:kXi]
%h62`5>GZ_Z-8P<`,#oV]#0KSBi^cIC9;VM9<,l>&&`(jGW8#8qEJ"'pj>jk^N\ZST-=np-Wc4=mMBi2mjuU)$!YK%=]#@)=_EWT.
%_i\(Z`Nhltg5(:$IU5o<&D\g++EDH66l5W=>m:;<Er2kR$P9l4I,`9`NRNKB9]VTYPYk`?ADlb4DH\'io<@+%mh;S0XtG)tQbu=J
%P(08W@ZLjRLZqtD&Z=&rH"@D8&E(*.=sj*T=ADl7O<*,I6li3,Q;hkgJ0C4C&A]oakdFCg3Q-1rD;m7d5JDB@l^4b9SjU(g_]ok;
%CkbtY*PP`74I9O#@kAU*i'9kFhXlJ&)X-,t/?u/Y%q)DT\96[=%b%(#1%\k?D.Gc6DU/&8@6e2R@Ii@pH#Z]DaZ%KN&0?k0$fV/<
%-6%)dDMn2j6+ST!;TDMnFI`V&%CFKnanl&DUuK3^.Rh(MNj4ln4;<I308`R3U/^Q6'K:Up]H!2k,+@!Ec>QS1<LNO-0;2mmkkL=(
%;>re*DmHB7Q>PqNJ_n5t(F!")d1kI1T&;pnKd0D=*/#42nb08,N4Ed)]1<GcG'IWa*]W>9O)8LDfdc0R`>HF//f27mAiq#-k$icV
%^R<0%.T(92"_P@H;aiAVK&$t0I)\#]AD;nMjNLt$(6]'^@`:n8e206/L*kJ@/P"JB%it2OCVFL4r3Sr4pkN*\`<&-&M_7B-%$jg@
%[1B>+Jc;m7aji+)]("Xpg:j4#oc2(N%&;?`7n&c?(\j,.'>Ne(UQB'KISZ&IPJ"#&:QdnEcDQ1Cb&\V[TV$YYY:+MO';?Mq\nan5
%eg4IQ;X.tec&moc/+$Y<BW>b7_pUp/_LS9LBfUHKKon#9b2jZs]U'GcJj8.?]cZ5R1+`P\%qT!/PqFT\LDqPuE/TMoBMe:Ea;gqe
%9F\mV_$3"'Q*$t<#6e:^7'm8BXhMBHS),4T"95K%(#qps]MJOVo/9Y\?0d9cQak*>FoPZk]DPk\Ra9ANMAm;l3"Op19^"g#2b/0:
%7hZ%`7jQS<Acee88qaoEHgR_>;D?;X`;%\[Y8[(hc`QaRMs_:&TGjD$Oh8s4J80Os#&4e*fq1Xr\:>%(@^Cs_REh"h)d(CJ3BqdV
%B1u(r4.\&U-[pM/mY9"_4ojcRmO(02r9LP64T7LV&1=8$JrEPA><40opAjnp=Xd.nh$+Ai3\A(j:Z<D\HLX<&72n4dpMcfuA*`18
%*hdYEJZ%,2TChdHYJ9Z*Hs>J[kO\^0_Cef0]%O=]\4JHo?YVb=phZ6[pE/s7f(^U&W0d-[+5`Vql]qK4gWq+uo+<]L5a-R##\(iD
%&TX&C,c#HGrTkDLNepQ$CY+gK-uZ(;FA/=na*"$riQVZNn2@5a;u+CQmYI*U7E2U<!C5p2R71q+,@3#9D4iOZ=$_p-,Ngfs;nTHP
%8#@j+U=r248gYnV?I]K"IW8VBHu4_tm7s#Gm"W)0^[i[d+$dNCBMa,QTQFLc8$3H5p)7Td"Bd^daLHJ2p?0-\6X_Zg?Kn`6'tdlT
%Cuf*_W1Yt;5kq_),:7&WTG.U9FEU%q\)!&o</d^!VKW5Z,Tk"S:.Fq2Qa>)rHuCd:DMsH+qSZ@s5e#cm7`u2,<F^q$Bc5k]8+_C?
%&C3+n8lO_nCHE?t8?/k4]@?4'<cR<Y^FPAiB/`gmcMU43j:8AgM"u91EXN$G7*7UcLKjLeQY>I:?FK^:hYEj/DPsX.O(lFaQQgkS
%J=d5sjVT'Ng:LWcMs6W!$oqP\1CuLg_ilKN-m'L[d)a8jY@d9f_,>K*\G&=Sb'uYT)/rpA)5qb-GZ&q8X1%f.(-Q"(.S[C$a(0S!
%&m46;T*cdnb#286KE,;`WhtG!:EOdB/fm:j7DUWAia1/agj]&2(FknJIeiC>]7"K\8tcqEU[hp-F>]WLclk&)NiBDg[Uh3Z8)]"Y
%3XS_]0jg73\p]U]B!D&h*(.Y<<0hX[j`O4EbK9<f=_%bR+A6Jp</MA<,C_[$%FLOg@0;s@+J6*#6B0t**/?OZ1mn-C1!\GVcL+/`
%ofD#iQ6OfWO\bcR4[8rCS$2I$j=fCB'f=:Pq='>Lq*9n7&.'9BS<IC]4?O)aBZW3(c-%L6!iFNl1S.Y7m_$9^U"$VRhQC8E$E=DS
%79"eb*!Pc:E[V>(R14t]N?_gTlWBl*TD?,e5=k2Ds&'&%n7L%n\Xq]UDi:ZZT>0Bh3:Dn7HP:F.dp_1XXuXdf&e;a_k;e7*E,./'
%pJF(>G!I9pOS8c-e5O+s8C)7>e.VbC;%G_octVuh]2,*ponCn'`J*u^[Gf!\^Ua3>>pK)YiqgIUZZG\!QK.;Q,J*.8#Ccide.9fj
%j6Lu"l&;K&W&,Ksd3IL@d4Nif'_i3UA'm1jNAFZHa!ABmHSA?7VM^JmT:o*NV1.(fgXF4bf[B%4-('br*rhrihqCJ:I)<?E0&M!s
%)j`"##V0k+RR(W:RsZZ?\!i_.)CEJIc!aP&J9mG-b,9Zo1^smu<SX:0a57,:TA>*L:F&hJge'ad86j3:2l,t!AikX+WDBt?Qo?H'
%be#DcnZ_TkB-t=keo)LYhqb68bda5kF/0Z0X`D0H9[k,C>:E,P9YHA?XDcn)WjQ>Z6<-QFJ6h/nC'D/2SP)H9okMU"o?*cf0&E<Y
%Vk[r9[k7Q'R*=j_l$VNNhj]pT85G3I#:7H$:@I,:4L4C\DBO-ZL([@dpR@=?&hV(Qi0-n`mCQUFgJ,_7!VCF*3$T5+H$p<nbUdi=
%"NeneKlj^W5l=(H?-G%o%N1q>s%rMq,/`ip\)-k[`"b_?H"Hq"KC[>?I&'83QTJK$]9:CjJaGR''Hg'/p_,&e&L@W+o$@J+aAnil
%iKHj4#4a<JR1q&(?EJpIaRW0$?LA`0s5^Kb;!21kjptR7%YB7PSWs)r:rBdWYX4)+NP9`5YHePL7sk89++2u@If3DV%U,U`k?@ar
%B+!(.'FJt<R"2'_Je]oHZXVhsa=a:>;<quo@\9Q!0H>;?g\p1,[JR_JKn!d#GDNB"BY\[F>Ttn%%R`Bg(m2cu<3Tk)'!)Ub$ctpH
%8e+kOZC%j\M!k?gpnn$u,>l03=gd)K,9!et[M(8-/3f2!QQ7hrM`7WHkaWBY:0%&8aXbMO#?d^'MAdC?d-/9fE6ZCrK,cB^&c$Qd
%ANX`Oq[-%nMZe-&XK<[9[)9u!@QKuNRnUgAVB7->k8'GlHbPOm91b1D$PR*"h4A!8@/:gt`=L3S8it\S03_2.'OM9[3r4@LG(=Ea
%*=a7<`nDW5;8LGS1D6Wo8Ks,kae3>^[[`-F#mkL>d&@YlcLsVNPY>fTPd@\tkW(ZN!'@1!+@Ys$+=-9(3)^5C2X2_T`_rb@2gG@d
%WV6B9C]i^"X+*dQrW6WoJG<[#(Y'R:[Y0SZ+-,SS^0K'd5.&T+-@G:A(k&mc^54V,XS9],?*OW6l]Y8ND_0Rll<U1sm##;\[7](0
%'K+*8)Hn",S)E5uUac:XV(kHGk"$+mM3opn!jn8^ed]lP$ap)CQ2PX?gIXD.Vcg3+,Vg\J;em1T2JcDFQ%T4+H\2"90(Iu@Y+@Ah
%<;RAsen&:5YA]l.Vl"amK(%Pdi_m`@LX_q:l\iS/JtW9u3$iuEQ[&j66A,nl?U"?VQhDkjc5)neZ%RD7NiPa_QN.>erNd:f<usmN
%J:g1JoPTIsEn/:J-)#+C5"W4(C%d5jY)F&'A6cBt4J?3%d9:"u`!YKn-YEukhWJDnhFh1Uq$g<-Y"NMe+$?&=4Da7t+;</sOaBJD
%p>g<S[7bb_!DOi8k0%Yh/q;\e'0krBGOK;s<Kqr\rIRET^P';$`5r+5GgM"L((1_BbE?'Y)Il8H"cY7AE!V6Lpe!9[#Z5K4&:4ie
%Vjt:S"uVnncLL'Q;BA*W\afIh!C^'U+&Pn=X-CPt=31A,-NGfiF*XASFS#U/A9+UU_S^4h`l&+N1eBuWZS2E_[Gn<MQkuKCWhk$'
%(,q6n/`YiDTm1,$d=B[TfTd?KfZ;D9ir*N`]r=/r^3p3*e%N\M.()jo&Bh747XM5``MJ*"fG/0Yq,M0VOZI6>cFts_<*&3=9!F.m
%luX-Y7)H<GPO?tZO>`8]T2SJoki<%$,%d2RQ+l[b[Lo76E5F@\X>Q/d<DQ@l7NXTV>uu]7a\Q)t?uUrQF+dP_>9j8bN%E^e9a/Oa
%M)-(&Sg-O*TT\#CQQ]QRD:($kmM:9.&V%j>:?(J&dC2,K>ouo?'*dAE+LG"P9]-r0![nW30LJeeV62/CbuOTAV-/Zl.r1!u=6$WA
%DJBaG4pIj6$$B#p&un\/KD*7.]$2b))O-q/qliqeQ6eQ(.V6A11Gc539F`:m-H;3L.]Loo-cNtK/<\7SWO4/:UH+VCm^Pq:r-.26
%C;T_;O#>pWf]iTG^DM&PpjaL0immtZ)Gt`^Ml/nP(-_IjnX;qbDCZt</("Gkl3E`A4dj8fduV0.koMkP_[hR0j*$FO=t8ff1tF0;
%0fb8o(G^<(<kUsSd"ZV:`p"S;nan2C$>\BaF]"]$@[He4eI:cMcWHlOA"3a<rm?acn>pc(2r`^LQX9QifJ(6+L1!X5R)sXt;EPe7
%Y=#3`RGtUk!\`<Rbrq;&5ZMM.O-No#:"]fKiIVrr.o^<C_^!iB<M(iq]:f1^ZQ?H/9HFKS(C,HZLm>Bbg.2efdcSZ`M-AB%&(O6[
%j\1ONMPMMPLp]YU$__t>q=3A%(Aje>emfn^&ZCEt[^Va0-r@K%M?AF82MO_J/J[N*F_]arc.Y%'R5ENp^;)*C"'3rCWlNcZgpbM@
%]:XQ#"_q:sFIVVejb**iRUZ^ULH%]L/T!]=<9sW;4flQIr!7^75+oVr>\FL@1g`:P$#2bEP>D*Mk_M^.LstR-5q6&Sk.?3!G\G6\
%VqLD-#(G)9?Y*)aVgp!h/6V&\DP^oi97h`4[;<nDc@mtu,'6X\q;S?t^tgp>/cROH!b"JoduhL<_/6:2%CVVfe:^\b'S(T.kV9>X
%<7m'R`XX35MXEI[%Fk_7l25n'/3i4&+"G@G9tnkB:/gE<M@hU.][7YT^b,7)Yn,6ZaS5Hp@m?WVE29VX1N27RPYeet*eP3mKD<jm
%mFZ(^eR]Ap'GJYcYr-:DmYdNY=mT&@G@\1TB&'*J[r)4.?K^sY(eY-.hN8G+=VO6o>GKmGiJeBFS)Tc?'\tB@X_-s$]_k<X9A/CD
%ARh=o=R?mKA#,]sid6H*q"doD#uRDq0[:NBYG+P%o,\C&*c76&hWrq9d.b.s?bE),BCd9WT3-i!c@CG5G*UMX;JmTuRK!jC%X0V4
%&3mN9K^<b(RnnUo"[f@1;UQ+sg_Z,8YGG;HpEtOQ:V1PkmoS-"4\j]0O#,,6NLdSOauNJUg7iSZp?LGuSWuF>5N^&/oDEi7W^E0V
%ol13"Q?m"t/Xd*h'o,:$9Q-OcfP=N*`RDK9p%^@h(a8C8*V1lR:d;RPhe<Nf3#^X%Gq7%N$:9H!X'j`U+6pnDRKt7K`W-H.`-5`q
%J]H:@Db^V%Qa+&\Waup?5H[kITcA'Z$44usn+J]B$)h0gM8S)Y\T6*+T5mt/+@;qAbIt4TnG&>]:4LCsoQfq!W`8K!Chh!XnXfAE
%,rC^a."C?dV*GYHh5_1]^RV\\Pc5r)L@MgQGEo`l8,;6kZKO#T'f1ie0mo@rT+X$9`@@L^Pt7,)2P<IJUSgsV>Rq47C<J+2g-H$i
%fidW'Y3-PO>o(NpgApLZ+3Z+"6R!QNn1m?UNXWF5$ZR-SRs:gOW[E8(>!W&9=@.F>,OGNXj7l^O+>5h?X(F(Rs0DR[8T4@8LoN)6
%VjCIINu-O8iLDa2+PAj=G6$XD#B[J##<h;IEi-q32I0Msoph2^,tn'M,-;GF'Oue6n/U[^gj]#cerG^fP$F'M\-?L=+EnMb1_A9Z
%7XZ^E*]DF3jUV<<0WBF\H)rTr'h,2SW1=]c2g-\L@3,:[EWI?h<mEk'*5Np>*HDDrmI[,=htnhEcjXY\dD3B;nkE.&+@mq1il.4@
%aYsU*MWZ/k*jg0\Cq$P7XX5r[VhfM/8[D@s[D4qmpHXKQ<)H*PI6)liH(t-b6Qa$P4C+hZlNO5HZ@jCmR-aDn<MMCr,i2kGmc[rq
%l*"<,PW(=gfV=/M(`&Tg!KaJY&C$0C6bn6Yb0tSJ%=>S%;Boejq-Co2\SH0QX,nh:jfGu"=90sMT\$).Q&FcBF>pnTohg._B\u".
%gG`eGkUhCk5_lOJY4m7rG<#5b/O?0?q_7jD;boV"&F]&cE.):7/]qf*&nk:7*#.U?qKkJ`&diZO!p+AR@Jd+*(0%A%5RoFJAL0ic
%Q%qniA(aAE['E7e.NI%eru9Co;WHAFJV^!F=!^b;gspNAb(o,4WsIF-p:\Y>/"j2Dct;iHJ\_W\J?G&>"A%j1hBiC<1?l8-I6STC
%@n"kFKD?;Gcp)<J(X;gU_:Aj$:V8r"!gJW'J08lt)o>*IlX9ku)%i$AleP<*K78=)S;cWtYoiupVO*?`dta,[l[5HTW&_:j<T>8k
%^>"DZ&*1'6CpS(E?.Mtrp$eb)5em$?[i)5Y_UKNHP<8Zm]FHo&5<f-f4>unq^1.Qt+3oKP%"!Cl>Y)lE24j=@i(-r,YP8QHUB6_/
%_q(1<9tXkqd#h>V9>"^q`(`(3FlRA'e3*H[o+(bc+nPk/L:EkuYTsU1B,6ZN+6aS&TL.Pd.:T6C,X]!H"BA)o-m[YmA/X)KV-XS"
%\g'tKVjT8qN?FcsW2hpQKpJcp*Ncm4::lkO)Y1J'T3.;1hI7(S<"3g_WL(Q#0^YWM(,-rg4QOdQa0tj$[+G_I_a1l\JW"tmWka%m
%a16D`pJ1A^3#TYeQ31$ol5,1>""-s6G<jp\=IeR9Jl9&>?B=LQ\po1)p;Me(e`U?UP6Lg%W;&N/8t&KE.i1mEifLSkIACo/fq9S8
%@eR^_3`_5r"&(3!:*D268>E&<dlaotK_@Y=:1o?B=I4P+@]&'\Yo`^[\_0KFj+>Wl8)hT;UVjf(E]"Q]J-gFXI;ba&0feK&4"C%F
%4ZpFaNE@?<P>OZPEB=kI70!,W_^pA6d%<tAjX)oL%_?9m)c,Ne-%m`XLEHdK]/6._[b<+(@Kim>)R[h8,)e#NG3_N)"Cs!Z]BA&7
%bcd%`YEXSKe]qWZ'k0U*VaqJ??0.%qE(<Wc+Nh&2EbksBXR-Jub'aCB"$mJ+X<>K2IB+h?jK_C%#X4a+#\GUH<?ugI3kg^'`"XC-
%49c/7?-QD4BDK8^TOPH/<k6E:aU<_s7f>!P"),#?7fV4d\=R='IR0F,L&I'N"1ldr`R$0=q&HjPc=KpZ5DQqIgh(@aI4kA6MHm03
%;9^!NU!C!3#;)_td/p$IH#!***VAm$JpiG\qg>2S@c`Ebo3WS:+:hjG9Q7E#'FU.uaHhrhN(,HQ.a7X\6>H0d_j6cHTU#7L<$Bf*
%+[Zenj/S2,KIu1i:ea,2CWY9/-AF"M-]W/=\u#\32NYu!T,.81Ret5@!?t>[GFg-(QqAE_7RM\!q6/N:j3R3ViaHpt?cL?Qm&L.=
%gA)5W."h1[Uj^o)"]tFf/L:TEW/?O".n6K*[CVWD&t'5o6c>GE/[HQ5-3(l)FThDH:fbl@@^&u]Z)npBSe'1j1p=sj$9l3>XD&ME
%a_]^&A.MgQ*>cfe6AGmZkd<ZMUXus>HWBk-ho/0^X6b%oD`\RqC3NEJQCt%T054g/c#(bKiG1$\+=YOJ:.%%(d>cpdmEdDbp=Sdd
%qWF>kc0p^HAEb!j<upF<i<2K[V]Lc79s'#(Ir0+&$6Q0EGBM!$J515/25],N+=j"O/]_M$Mu33r.J2XS-k\RtC.HOoE(o_!3!3T@
%rQD7u(G[B&oUD<TBL[$e]W91_@W6l0-i"d!%*LpaWnpW-1@1ssQWs8TCF02Y\uEE_Zi"=?<D%%)$6c7<dTq``-kYZ+Tuq3:ELlZK
%KueB:e5s8gdJCCP*/VDTL!(De[Rb7NEG+^Jg@8XAOTnDYSO\s/\q1S;,(L\m1naeZA_:!`p'N/dODY<7)YXe#b[Wf>]@]?TD?TXM
%2B[I:@:ml:E7IH@=0,[D(_43Wm*IKp=Ibc3%l7IK\o:ffR\dU'muq,?2$?_aF+VVe7i"IQZA+po)1cFJ]".$mI]+`<g6PT)]#`;Q
%2tI1V3j[Kb.&kR">=1$,ekZ!\JTd7Y'/-ip7]=C+6*X:8?&e/29Et?Efn2m`[G[0('l8,3>:oB/pYnPWYq4BDBM`(fCNHdijlrfB
%jht4dW_TLe#`UrEd,;]AFu"<K)c>!6X-Fd2P=#n$Ss+=XB71W]T+7=eMt'#%IlSf]baiZ4I/[X^W9q4jE%97+7>da623K!+;h(b&
%<-kje'AY%=pli1H$r+jO+89s!9Cn8Aajmu9pP6f->o9@-E@uqTPQB/&*G\lTIp[QU)t3VT,$l^pY(l1[jKaGE#69,Tg1;l=d:`2V
%ii8nnVR*P)',QC2QXDOCBlQ7I0sY^&FPGJMMUVaQ(YG\uhCH+&%]e4Ia8UZ7nUB\h<6<C/be#6'<%.H_Q[>HTFIB*\(QZohU&4gg
%&R$@;\2MMomeA-;;mCDrPf"lmfpa8A",R#-LY0S?C_2ShDYf4@a`qN"km@l"*cB*?fDh01q>mcnFCL>L8_`0];7$&QBWjpi)+]bh
%5mjHE)/E?D[1hiNa'-+;OaL$!iV6XPWp4^giDE6[;(@5^$a_I+!?"]hl"bLa4AZbe>V#FYXB@q5osj+VTC:U]puG)<r?lchiXH.b
%3"V7V'pMXE1.OVAZ``SOfg7q#<[FgRKZ?MU\CZ%CXOjTND,t(NN?VAI\/#sY*!PDp73@.5apOohRA_pJP0[Mer*n#?FUhVT]nQmQ
%Do]lo6f4QBf!o0>,u;j3\pT4ba!]bY!\<WXf0B6d#1iPDSY$Z6<^81.GO_!/Zn<blGdSsX:)'A?pYk6CeMb@J09[fMYc+1&.K&dW
%hX0B_]AMN@j_lZ7s,N\7>H^MFq/hUD:Vg#0=M+9_FQa<<^H!2-'KSm:\/'9^,M+B7"H(f,s6BL]>\[,1:23g<A#`;$!*pB'PY]aP
%YY<Bd_H*X!^Ta*1L!WsY1l"ZJ3^-0Z=VI1YfBo-'iZb*Z`C20ejuZeKYLcXVR$P<6[4Xt6E>C(ndePm`HVjqh?BSX0rDtLOV.Mqa
%rK!oiIcIbDZVD)b7)L=:`]ZeE<"n=K5]`"-@VD:s[F,\0)rVV%n.p5b;ooOAOM61=ks'W(e,Ob6q1j\c'Us-',45P['2>$/@9"Zu
%FBU_lZcsq9TUU@aQCG@L1j3:Tg1Zon,4Dfn$I!\EP"oV(qA]rHr5<G`)@p*9#V^5PnmWs7U-#aSCWN`IVg/Ng$(LtR<OCqa""frd
%/l^5uWYC;KZG8+6U:0?%Crd7;lcM=ZKgs6=VLZi1jTkS0=%Tl@9@cuIJXnn`]LaMb02LfpXngKkiP0A/r5c8:Y&Qju3PTqrg7/Lp
%:nTk0?L7?ti<J&GS9&_:$Kt>G/O"gQ_L/#X+iE?kOVj@`i(%_2k'g=lXr"NS"H1EqX_lLC"X%S"Z"g/A)tptmX5;Lj]t<R80`rl"
%(>gO.?0,#[SB@nCJ5r5LdlqBGLs5MeoWjq2MF!;_oV+5#4,0lRgu^^Pim<>)>6J',baMQ#2qD7"+]C$s@(Z/Z/LQWMl?g$?5UGb9
%<l^kuaf9>q9QmpJ=%*Hn[b(M"g`)un=\=tU%;/!uY.[e#ld!#dr:-PsA%*\1/P2lX"5/R3T^Wq9=H&G:?aR<F`Q,ApFZ8,:il4hT
%mF:ZfKR^J\M^ElH?7YE=D@mH*??%up.kfn4+Ak"Ybl\J#Am:@O)N^94qMunOin?R#YQERu9j&.i</=.*0F+qb/cct.Td2,4XrVL,
%/ZHo!C4`NL>1>F?A-1*bD*'b`,K+0FaU,D%Pgj"T=_,g7iYS_P[j^aU[OGP>B9S%[X^/It91dZN`?&f3+=VOTY3'$D;NbK\1^3!\
%\hQVk?Dh2iF"GXpPgHF%08;u'<J_7Rr4G,J]u/ML`Djo;F]6`i=q'PD+AO0a8_Qn-*F?,=c463BROsbQj0:psF@_GtjeusqbAm6I
%O-^IP3*'k^ko()!kWR!`(jG!YN[AjIhUP[k8h$B[m&+;O>pKA#"/j)+bL9&t/ookR0T.^-k^J[E-N,A'W,uUT(Cqk?IV;YSA]L9P
%J+5Qe>cu:a(b7:TkX><YEr*&#T6J9OGP87g6**k%Ia(A<k=1"h@@+A;HX2^H/kD"nQLa=@UZdgOHC7WF+Yn:1^VPl,*MlK3QrZm!
%R_(BupEX"C*gbF[#QZ])>][<X.^e;+(SU;bMcdbD`UCq:jq9&@_Q+?>4laBo^tm+HqAp5AO[,Im5C/l=etVlkNO,@>MU1.fUEiFo
%`Z`SFa=F'TYb#8d@MB1r-mpF.rM$E$FNWJsajhj$7C@Ojq9Uf)9XB2KIVh&/5_t>8a3=mkM6HiUX][_Ja3BIh?'I!Q:\1\:5PV!l
%ZiZ8DEJff,,bCJ"UH"eK`5u&lQnTR,Z:Pd&Y@lp!oM?jp]B_6:LA:S^LsfU/J%Ih<r/8ZaJK<rQ]UF]bpng/<4NuE4ep6,,n%\T@
%W1<eo&qKon45j:;R(('J8E).B@c-T"8aOGd(q&&7)-,N!RsSkmeLm^dm6I5T>5+10ig+p_L@hADF`^Gs(?Pr#-2XacKf+n4^!sL%
%X'&m')C.!!+@@'\bPuPSV0ber.6p%-^b]e2rF"m[ZKlrGPMEAV<LXKTJfYinGn[pl<9iH3KX`410LqT4Btc'qKi"(8C"UEB?6]B)
%%dr!R`*<4:&q!k@IE!b>lB-k!:QO5q2/)@:Pp5"C-fGT.;7G:s?#=uV?2s1t\>0/5-%409@)/@%OX>0?(()o<;t\G2f_O@pIc6^m
%rE0g'(mdq1DO8*fT(qQfjc=TC2I!I(^f3Jn`I8LoU"uXi94e66%KXiAb2%MJCN[Uqj<t-'@^1Ob78AB!QD$j\a(Ncb\[S[^(J5!)
%6`8g`F2[\B.PkgPC.e6&<i\%!ZHGj:cHeE6Rl)^-Du!p@nsPf,DN2!kR?t>$(8`!aTQ]5I,,#?Ck%^+^GP`*#Z0@c48T<GIgq<*&
%.H=Y&c>2FIcaTeB;p2r@U2P,6Q^+%\#d3SCLHs_SWT.DbdH]riI^m<=-SOrPB*\n`]sA_,rUEi_H^%^to\9q$`@j\?B/D?\-WEek
%7<nXPO-`*,rZ:JIV%$'B.CP:hq45csK?&SR:95ap/;NI^Q'.bVHKkdQ8*m(kQ>B,KrFuM5_o8@f34/'49<eA^Dc.>PIhfJ\%b7I*
%nc\u?lW*s+B&#<HIh?>*<bl8u4'#:N(LG;0@k5=NTurAAin^^r?lMb<@Z-;`kA/oF!\7kA/LP)<&a4Q6-@\hY[]IU6DINc18CFjF
%4<t)fFB$]#<>U2jRHruS^.@di9?e.`"%U7i>&VBurf[_T'XJc5R&'V$ehtVR73#X=PBAfpFa<'fYP9]#X<5Q5Vf54)%>=@Aa$sRC
%'@-Q4??Y.E[U9HaiGd%p=C-![69<$d7KNCJ@t&Wgb36]_P0jscj`*:pW$o.$M0ts>6,',J$Krqp/YUH"2"HO)b'iGNeu%;8j3a$3
%Oto3mT4T'.opnO3V"j,5e0ZN;LdZqHd1We"P^o:A$FD#&4PIMfNEfP4CNuFul`Q81-hpR2"'*IR3)-`e@0Ts@291DTBu(,UAnqqE
%r^I.k9na.l7qp.bf.=:>pm4LOj[S9(P3#EQ;&p4Z;utZqpNR"d`>#5F-^5s+Hl>9m4mhKH"8_fj'a+DF<3beFgNsWo4T38UjF3G.
%W*fD[C$3rO\'3a[#@;H%o0-ht=YThX++TfimRDb4np#Z0F6J#GF-QBDHs/Adj3Kp]_8@ceoDolC>7#4l+%U7XXbT)bL>74H%!<XS
%4RMdWl^%@455;DDaX/cB-[mB_0#&7iU9cj&Lg=IiHs5.n"^.4\'`[NB9rP'o5mQ_ISlVr)[;FL'RrD@=)(aAe[WMku89EBirFE9<
%4r9H@6QctFK+-&?6FL5J6rZAIeff6RQ0e,8c$Ghd5bU^m6_qg@aTo]+oJ%7rlE,hu/O(70^M"GtEBQ[\[HQN"He<7N=Ku\p\"\SX
%>.*K!D/:;ga\`O&+oTEpV"-N3GZnf:2DC%uJTCGh$BZ<K6?/qBdX34G/f^iWGCYY]Im$M]L+4p2X#]jZ1EC/9#[Jh@F:+R6/D5#4
%i_B'B^"o]"0H-eWXJ$f%N&I`ZG-Z$T\6:=7_'u93[iRfB6uA:YQ_[]VFQ.\'D&+#%5_YjAq6WM'eP]gOEUPT*jFnAi-Nm.&E`%^W
%DRGMXKufGj\!FO$.E[%Sl*+bsDa)_E7M:n(Y'j5$Q"jY_(K.Rc3`:;E!cO$TD]+-kT!G:dr'@&$8'n,14tXd]R\Rc)(;!@.if!C@
%(8d<W[\ZV]1s!ql^!c*Q<gKd,,L_^ZP*VZa8?2KKS$D=#$RjJO5*XS3)=jFG7#G*@iWJh,cenNP13@tK+/Z'f;_k&BB',qO>#e:q
%EXhQ#NiS_5L$FqnK*"[lXDZ*8M/Q<`0T(u#]l_=#<V6e9!MYjk+G*YG<#6g\PcOLs<M**iNb(kD+b.k;P#=`Fbd0;[QF<A/8WXKG
%,HHh?c4=HA7aOpS_cX6e_QP-(JVj\YZ<uMA86_pp@>\Vi!a2\LXJRd1-JCPCCBB8feRgR:QQLX[i`e-u5S^i4;ol.SJW3U=j9-JL
%ZWQ.'Y->l%D\%b-eA=M.7P-Fg(gEa9C(_2F-fR#I">hE+;j#JO%P#tre6Td[IKC6jeTekRU0CuIp?/Wi_1!WUE/i5Z1!/Efo<o;O
%Zr8V*>=M^&,(CT`^:d8`f-4S$ajI?s2V]`W5iZOG<NeP3I+1A;oSU5?P63SYU`&&tSX;Tk_2E6:S2YopYIob'mb-I9X8!nG99l'N
%C2l<C(R#jA6qIoJ%kUfsf;U]rp>g@pX.7V/*pPo?!e]"]Gdrk".;dJcU1UTN\Qdtdol'H&I&l/+Ti`J`A=1J<rlJOrMdFhG2u?jT
%nPN;jMqe[UJjojV!))2<GFT&O*!ucs9eCY+htWaLfC(qEZAEu^DlFM!2af-/Wf'D!]6`ZA+eaM[ks(bF#Fk_,k!N&uPX&9#c.10h
%<KDL3^'M'=e9.Hj^JX_s,q^G9dlMEGn!fTDp*V[Z=H'cm6(!+LLOtjlVNu,MML%8G<!0/$-)DQMFc8bKd%gGj\GOG#m?5s.EHdi.
%b8X!1DUu]@_Uhs\TTAQmG@E[FdEpb6n#m]/S&Y;_9$b)$-:>pl@N5>V[-4S8FC!]3Pf0:",^"&lbGDAn*(iYT[^qNGDS^*1!ApKn
%FJp2@)Yu]OSHN]SL0(5HW>_-kA_?0G!lY&1e0@t&O=FZDP4Yn"3LGA@15Q5(W8_!q,;-c-J]e"cO!.=sjlJ#gTcr9+S%klDZ6C$l
%/9EJMZb$n5TgFoLm92(1(7B].A<Q?h`[5T1):bTgk>[HWG3?\XSRYYk6ohAmFtKO-BQ^ASY1efEVKi9EkcF5XBVlM5'h(\u6r)*p
%Q'k7HMQ9c-`t]',2nnF@DHbr/Qto78P=ZT..nbjcW0](7p<kcm?a\;]A?5!eF`,E+Q$c\65[m>&LqtuD-P[UUXHM/o\lEpbBla;Y
%;)UI@\'JO!aVa4s7:HCq\TLM7#M^$bPS+Mn@t#:;5ZbC:mEQoW,&.kU'%CUH"P#0C!'$M"?L=5akYRK^=n3N"J:G;`5(AhbrGUpi
%p4/E$pmP7q`]&;81ORW!RluN5:s@b$VMhLC;V18I?k:iLbq*AYlbek"BT<of-,b*69P.ed^uuCt;,C]_QqoK@2--#`,qfpm)mW\\
%F$O4!^'<3]drLTt:et?uRFWNA^uWe<Lf&Wg?uj$Yi.(_eirFD3:)@0t(^VoT%Rsg,jO?+#Oc.HfU\7kAG^1d_>510N%l?5>-<n_Q
%Fd9<`j+(XBeb^tGLucE?2H'/=[BH2!eJ74*4A+X;0AgJ[^=YeUD:d2Q>.@PKrh6?n.#]`Q6(bY)K%<:><(p\4kqfO)[>E<4+jQNd
%It..H?hg&HPuLSND<gc7dGp0]I2>e:^JX5g\<F=58^Ha,rd$NV/J`eK@;'kteibK0oAT-*Gb8(Fc"ot[>*S5N1/<1QdK!AW?baXR
%^L1fhUU+Lhbu:H"cCSTU3*N71o33Vrp%V[6QZ2caAjceXI6J$ga%7qFLL);IbaGOLm*KV/"0++Y_76Kp_[NJ\B.NJ`aZj6te*D3$
%p^rVi'ID-#aUZtq=.J_7\T-9,96>hbE[IISLC\&u)/tlF+%7^B?7tp^C7AfQjQ`c;PBOtJ0j4p+F5g_=SYfX',lkYsZj1B2s%?A`
%ZR:nAn:/>-[cESdQcX,/BjSiI/nh)#Th%c<ZPP.2NT#]'XLWL[L;&kaHt1%QF[;,MC"-/)^P6N+<p_'$BSi%qYF!4:!1Cd^otq_3
%r`,!c3S`5qN;p7_,pp7IE]Kl$.-\F6_DDe'IBEo[,oEdqkNlY)@uOOf)sp%AI23sRe5bFaeN[U'qjboCTQE:J!`EKn#?;s.$rZre
%6tAr7W=l8S1-$sr*\;$?^\Q`9[E)\'C\Ie<%X=aS^\HlWnq`ZS]?[0GN6A@:L,dDIlV26/h2'YuNcd]?+rsE4kUuj^o2koQRnGhs
%fSh)o^+:^5(RnV<T!e\T\LmJ6`t'#Zs6td!QeMnZC>?PO6hK'>fK&W.#40:B.3@+D%W9k:Tldi>5\RY=?GGL7Xf[)k-<Q$m7,OF!
%/?;<paeaE\Ju%P'R80EX>+9@51nD2$VGbj&p7T"\P<l5p$0CZqfkd]9$E2rT';U$*@Q@S<F$Q"l!3.:J4\hDrN.=W;,*3HT"=7!.
%n;>fQ]8RP-n9d"VPX/.A7"C#:/-Js9ECJ[f:eNG;;*1QlW7'q\%`<Q@h'<08=%R[&9"`R+9W+K7;nQD'9G`M_-g#_>?kjh9T^%$f
%TP_D\W=DQ;blDL&5)d9Z9U8%mq?<(\4a#qgIXgf3A8Hg/[QYEAbW,3Z]12qQWU3Feg9MS?D9"Y"@7apK-js#(%+ejr0L[E$PTjrU
%;F0QeRAl"uc>!`FKlZoIcR98VBKE80\88&a0ccm4Ra\6$S[&c0eel!F795!EVo<aKnoSfmqn08MKGVj3]!c^JiV;/FrnJB.6:0,3
%&$mcaQEo2*F^].'40b&k^scKRU?^.9eM1GjZE@(4ealgkd66q]!b`l]Ar)q>2'^>)(+VeG<SZt'-?$s"&emGG_]hD*\(jRkik2^D
%+3/<1/45&g;7J3%E3F,d[[-`<TCfRG)F9oh9Z\bSpo:?+eZ*D4j=/.r:K_2n]ZQ6A.cn*9(%`qk.A]XPDlRh]mSMpGC>C,\>.OLb
%?KN,;(3(%G\Lf6(ntN*i[-?I&EN`<R.Y>`h9Ci;3CHEic)df(>25dfIqo'Y#l?!Ki/PWD7;<ss^Z(,%ASQ-h(QL-$2;8Q^H8;D6T
%O'!<YKYaU!+3d!p*D]<O6\I`JKfBB7?q#%e8X9R6Q/,T7`#+s@d4hcP1R#o9NbnHU/GJYRkC7VEk:kGi61OR0e"8Sf3s)D;Brop<
%n+jC+]=29coG'PdQ:od!Wb`n7b`U<b_dXeUDH[XkC5U0OE;?_XEu5<e/%&L2EqE.7f1Rf(mG@]mp3cofM,r<fTAFt?Y<"8SXI\[h
%>>3pe`VqP-LHjB4Rj";\5.N4sPAmVM#h5*i8t]2TZAI(9Sj;mA(BN!-4,HCi(eR^<"M;Rs91k=,?HF?S6<RpN'T:P3^%C:fs3#`K
%a%dB_oPjUnkpEUcdUe1e(*?[ShO8!fE*sgC9PYV:Z^+&,-K3=@MKM>n8'.A)1hd)DGF9$j;lQ%/:\=,KKA1ks[dn$S%6SQ=7ouO]
%(b&[`p7Y/H>OhoNcY6Og#$:QiaVm?&/Se9.dVFQ\c"_nCfnNp&,epI[LtR6Dp(,Wp-O#]ghh>lbF#]u-=G6.dEX=A8X`an2Dptmf
%GPpV5V!ji)03]oh.(8f=FP`ZZpFS--ENt@%R>3dj=DM"d1KX]``PN1Mg(\[M.6B`F6nDAD@lhZ=.FB`2Mu0TYoCVA(HXt9s9pdch
%%MA>L?d#L`1gDW7R</O"Wg8_7qt\;3eKOZjm+]iH\UUo'J&kr]+E\7WW4MLlT]rC9#usf9RLKBjp<0c'DQ&h>,HRZqO>ndMDkBPT
%AXW*WcmnRqAo:.VZXIb]@^S+VP$(1T-`S=1.LbFk+W)t,P6UDj^k29="[EehHCS.:'+#Y,SU4R$.to6l,@)Os90,,YP7WpE'B/^[
%6j]pOJFug+mOTO-P=QYr8l8hg#^+uGgO$<al4MELhBF&2rC-b!qiM$h_WLMT\`2P*d1gatTYrm7:jf-R-fW:/GbK;fj31:E[tKiA
%4"$>ZU;A(sXCd=k"Z)]Y!:>F-h6EF8d::^]Jj`IMg^RSt8`"H$@s:N>?(&38$,9/t(5^/-fSr)6]H60*0/9^8oc:,3irAPNq0X\M
%6(_Z_nCUbL6j>tlVbs1Z?8^sDpK7jj39d7#=c\nGj[Drnd$+0&,'uY<[n<aU[S@4b?NN8eMVcJNm':eBV,J/+=^,]NX`F1S6H1f:
%%T5C*<JeR^+;^7EAXFtONUsrs@VUG5+m!m[eYDBGqoL"dMUKU0J,#`THUm[b-HQ(C]oi'F>Wk8^YOS?h?8UsET/0Ei(\ju<:FcJ]
%fKZ#?NEdV@DLa-M/&[YP=r_';'9aP+pliN0)K.2T0@Rm%m3:_jL7u8.N=&5%]'\CF:>"1phTUU1]^r:&R:%a;anfKaL1[)]<Zh.u
%?/($*J4fpIHt;<)=m]F446]1dQq3U?OSQ7L=t1R<'+R,_cEfEVIj[u$qIp?>E@lPmHA5In5X!8tPGucV:5-5o<?`PjO%T(O2(f8.
%l:JjWSt89u:O-X4q_;`kG+X&lId3")p2nP&L]Sa2lrqi-Ybk,-[?c"0\K5<=&/,apC(sZoQrOo#4\;K#;IIUdK$&8WqSPse>d\rA
%:nSf0"P*4?JR5_Eh_Cto/!lekgR1qd"[=-NBHmq=M:5&iAsC/6=-=UPf/t=Y&r?uDQROp_8N+J-]#N^*aild@]ikmu*qA[:%'`Gu
%6Xk8k;XoY$37'sp._80k`L9a.mR`ROs2WgXr=JTT"!oK:#H'0@^fPf%V&E-2!o\EghVsgdGnFc@O(6(pe3g/s*fBlW#]uGoh1E8/
%alu_:K\X&_>',#oa,1D^a,E+9n\!K1IhF\t)raE@/Q&]ZQp!e;.[`&;E0FWTTKX7m.EABc;0$H`_&];FhK42!.><Ar&WpEhr_)TW
%"!VB<r6KAT3E-h3q4B!P!H$'8WflGL`*>3D'pPh9Q'+;*0tT$MUF353l$[)3P=%*#SsqHp[5,eWKV='+gr0'cjdCbi,-alGRa"b?
%$cZ<B4Jssp_?T+_dp$Z*2eb'qNitMr/[dM[(/0#;Np"+Lro4'nd2#u^.Q73F(=ert;"`mc@0*EeW`VB%?-lU'M=fEhCgh0TGBlm/
%ltW]5f035obhCCVAtB]4Cmr'l<`+]p)6l/gD_:oEB36i9N"6r9L+>7F0%i3ZFL\U:-)<Zb54QS6QU@1e#A>\e3Em7.-jo/e)Gf`a
%ho565Gdj._fd;g/cXo1,k0a1OPjnEps),,?-^AAI`X/h4DtmBsoY*.,8ogn+OG">!FDDR;\]Yo10bf8iA_(&L%8;e5J+u&^L8.9H
%V;dTj26,c@NS_'HCE;uNV'_1:3>cV?N)"BVh)0:-?Ki8,<r@%k&lr4rK[\2YO6F^<-'SHLL'K^[_:$\P8pC(;W=$eib,Si\CDPNh
%Z<q$RFNd+/9?#*l"JU\^^.qH%_oX37BkA'29f\0WkHFY21@Y9CFb<:BU,(c-!Wkgoo:S@V*=4FO3rk-9#Y:C=T7(YB/d[>DO"QqY
%+Di8Oa])"SZ=tN1@.?a2,c'6U+@O4/l@V)%R`UC3s%N?!^<f<+r(Z-u"E$QYgU2LnM:WSX\kkea+I_*`^bXY7$h)J5J&o8e7's7l
%!gNl0k]5.2XmCb^ep?2Qn%<HJKoh<88UTom'VoR6,PE?]:l+'1V..NBAjFlafXSDOa:K\`PmldH<esd)RApVKPs@_L+saO2Wf?Sq
%ENAB3&S7/!IdY;"#>0k0cQ0i-5n&Rj)bHa5,:b(G7S5f]O/ar?P4Q]XN]SB*OR(ZlY3fbZQs]D"6./P^51)_r]kGl=mPNINX(YJ#
%n"sG)._<bA<K4NmOFU_];6caNK*7GSF"IV/%-SsEYKG=36-j>GUQ""t>MVip<j#E%Wt$<&oEN>ZTJg+1\QDS:+?G$X?#Cp2"_G@J
%l-TI`\%7GfcQg.VBV1pLC1@U#c*7kdG^>Vf4oeRlmofTA`FMgE@Kro+l?.Duel4<VoNSE(T1qY$TNRl=3K?=[1XAS8K*k6)4t]BO
%<^<@R3u-6UWpss>H(bB_-pbg4r/C*p"be-[WL>-/:S)g(.5raGr&'(4H54ps=g!+TOl)EMDOYPG(m0XlKhd3LHH?;V4;UC^lj%!I
%&l$:_kK^6AHr/%8?"Sio$j2alG3oKR9jb_kf8ei)[9')t']HH\)j=Y9/.(fO]?Z3JC$YcJV,sA\\sm6BNodOn?hDWF#K?^fa+7Y3
%09n/Je'8s*e=PF94fBJbH3K/G@N9-s;4J:>C_Y'J^em52JS#:aYUNIj&F#+14"PDUFK5\?W2n&X:]*\lM-?_MFT+Ws1_mhY\3\fW
%*%/;DN(Qu<Y0c;c&1]f'=m1EOkc.ohcKVhHQ+Ru2ZV!";j[<R.cFk&n-)?ue%j]cRaHi=WPtc_R\&h2p8e&E4Bn9\!=OClbe&mSP
%0QCi0:\q?T?hD^c-TP2@./=Er^$+m>%W7c.l3RV$AU0qS%1T;EnO:k,Lr$f9r2@SSJFa,[V3iWnY6,+lCs!N*n=Lg6B74XH#?a]6
%2CG1qHA,^_=,nL9-I+"o47AhqkiYG-QC/JmUS(cU.JS8^`n@^,lKJ,gn>q7U1O]&tf+%EC47lL%HD7fq$elnBRs0\-eIt-7frCZ0
%Qc\%lM3LJkLuNthEOKU\QFuSTOj-T!.8[?h%YTf7'&/s/9cuk3,Z<e]]BD%U5Rja3>bfnkWXGU!GaoXqYUDY(g#R@ic)hu34-&nj
%/_G@@1"RcLn:%8UhIr?b[J[Ei^%t,Y$n&4j#^:[dTKq,[(QD_Z$itB#Pb;`.\q[MXUHo!&@a\#.F'4H&$IeVqd4kG\A5#Bgb;r=/
%TU1e,F^\2m23<ZR'OB=t@*&^M*RNKP]4GWN!H%_sJ2eVWg:jS3=jaoG\=P,FXVbh_U.U0KZmH`+d#r(nN#sQf?*5dKOq$YdP;Om`
%KZDYjdEE,:Qubk\3^FNEeQWNe2HMD6K1=Nh*gkAHX6u'%s64LNNaHE'NKDM`<]JT0JpMUdaWqTHg!'%:N_lJM9muK\iC@$G4HZ&_
%IsfpV\qIk9XU4A?XYTM,Gce)1U*=h(Vp;a`q%gendCU2L,41lEh<mdIib%(`NEDi97Z^isKV9f/"RReMAg`1I1q.N'7LEgb_[4mf
%]?n!?T&\Bmb8!ll[jXXH(F<)m`/2@URn6E^b7T;a'(UjQi.^>O`TpBO-)0"=efoqiZs+M?aToY3MMVZ#YU]PbN+kH#Dh=Y!ML3N/
%RH#SRBJ%Ug.Eao_qs+ag(?>B!a>jqYG._s\`jOhh*QkKC.)]FdTPL&'>4udYA[[=amY^Nh=(GgbqeO3[qD!\\4"1G%rS*A%kNHMJ
%&u`[8$OK#Y+l;X!aQ=-KcGutGJgTkOLP:'I)oKJ8U5KVq:(:k?ld8BAbdgP`HBeJ5aD7#ONO-"%`72usS0jb^(jRB!9WX':$[W6:
%bfbqb^3.FQ8nWrAm6OWkMN_b2cD3U=oN.UTXo$e4$jD=DSZ=Q1e.3B&1S9e;9L(Y?769'$Kgc93,HlLOU"YpYqPKuXq4t=-MtS&$
%f=iB'\Td].mC=:W9ro8V&UT(%DfF].oGQj`6!qXQg!nYJ;tp'nIaH.WCDr?2[QJT+50[PsID(P2'7d5+XEs)Rr3CodM.Vq.5439b
%mt!iWnPlDXn(]Bb^6g5%0nT*?kLS,P;N.3Y;#Ad1ZbPjsLOG5%*p3r2Jqcl,E?D36!]^B9W8lCUN')js`LfBL5<e\fWJ]BSjD\@g
%1BpVeA@#[n@,k6GH%0^/mkX@%,C1*\!JZ>V2C;JWAsh(uOe.U\2DRWb<DGZ9Nim3JA7>n\E&\FpPCjd$)-\_#(;.GDhuC?[^1Z4!
%Tu'HcB]UCkU1"5gPrK,PY04r]157sm<G,CVEOnp(V9a*_;okWi<A26*+KXX)%E5/.`_d!_]FG`YO$5S0lL!YVC+uP86J>m?l=PZ7
%_diOo&hVMd`OWX\VT?Z^7"SB.s+eJmV9,%hnjtHRR+8;B!g[ZJ'gU@Rd$YedYR$ncmdD<YUGQI\_E-]/*n9-(e22"+OrGS*d.!S`
%OmhW7'F8^bK,f"#188QtG*t:@'bS;"WlWI`AR/o?HI5H:-3*`.j\f#q=H]?_eb0f'gLV#KR!j4).6h2:Sr`"gQ_CbFZ:T4MPK[VK
%YK-=Kl'?Yg/-"j5A&jdmVR(;-^)1-b*PG=CR2,?@Ti*6VX>CaA!Mrp/Mcc1!;dRR@Wb,`6fYuq<'@ckmk3[\\crduC.N9FA`TBk#
%>(E>`[N%faLO]$/T`E('$R<uK?@r:m-pl".kcu"CUIm-Yn>98oR((Y`M2_tf0/M3Q4B>.4_k53S(<$d7AO/L8O_Dme2$p>'7?P@n
%(2a^&3U;Z9'[7H]rh>&%4Vu45jR<d2?)soH%sdSqME&lD![,?fWe`m?X6QoRRj#YF\"Lln(AitFO][>E%d5BVEs't63o[s6D5gAT
%@p):J@).O'MK>T=&L4I-3D2JY:@mP@O^^l+Lq%#qCM3mD+jL<</MLJlb!?krVpf;R\@r\_k<#oc4p>,9]_=:MLA)1UYWfMGMai-p
%Id8AhWM:Q!qI'`THe&F$:m&lPV2s_7Fn3E$S#sRas0c2Sbm]/TgsBk]KRnY?XV*;dY]+-:J>/J99%dUP"5T9cCs@6T:k"'nXG(a*
%O@fJ'P[C<T/g!SSe%1W`@3=3[+>[07e_6-.-+$0"U[9[I5*(1#0V=n_USS;sn+HNpX;A#8GF^#@[u9=(9]YAp;ess3"I3f`)?u?U
%(5;+TgG-\"jNO._Jo\2/_3mq^//<m/'@$>[Wa>"s#"s(qjE":dXW"U&3hm%^qii=;'dqDG,KS/jJrcK_j+0hU"c;M\+GGF;F4h/G
%iOspg^Nt]R$D$"Lno4pbh,WE+9/?5TQ;YFi-aMnm<mb#Hlqpg5419R1)bKu\fGGAhK"%UF_1FP28lPSeMB=tRMe&#HiGV,UcmKRO
%0XX5)*];_YqtMKMi*9ue>9d&e@[pG'l*6s1m]M"!,/,Y1r;BW<UbAa,Ro8!MdJ$85*^uZ`%4Do)>dL<+,tp7udA2&92$55YC31!L
%S!JmM5kXZ2GX-GdiN"'t9BnT$E;qgpdHmbT:P1]dVCD2&&.kI7R0]Eh,YkCR1j.>CBcefp:F.4:@n+q?kY4@_De5ub84uiH?J3QC
%>u;V,pVdO<dcUDW'F!]-]+6,Z%/r:T(NE\0=biYU=.0u`PEZt`k&t8SF?o!(\lM3YT"<;a(3H7cN=CM.1DqE,'2]?oO;YMpd%Jl^
%LcLn6Kk.&*ZhoL_TZOf%Kp8fg^@CoHR9B4O*L(enQWFPO%*\]P@/o!8kUHi0jS"?)\(t#@3sSrjR&#+")&8g'gnd^\SMY/ohr"@>
%^HBQL>P!6/&]C+nkD0jt%Mu#sG#0mm9f5i#E/(%b]$u%Zf0\Z[cE-C/-88l^0[AC<P]&?V,T2`s4*?9#l#l"]J-nP5kt$50bI/K_
%?A>MC'SjC<FL#&L9Fc7#m.3&P2]S_c5)n9khr"?p?e=F)1aFTGHo7q2-4AB@UJjp*$9_4+L7<0RM?&*clH3q_>q_mo2^#p>RA!Rc
%kN[4p;*$@j4D0g-_c.o.c'#^NKgNI/P_>uE&Nq5a+4gN^DM\(5[Yt7P'J;aHc\KS1@L"TG[*&L_M+b"S"5]fnj%(&f;%(a5i.TZ+
%>IPCNV!3$@G2dTG1$i2<!s_T1UE.2rlGrQ_b,8F=:fg[IaKL?Yn<-ooZj@%^ZJ8*dc1HT(`WgZ22<9(@2\JO\*+9F\iu:/ReKI@M
%gh!FeJ&=+_+m0\r>]\bE'B88S_@[>ICtV-#P6k3\l6V5MHpC>oV^`0c&RCcJ>c9,LrBP+Y'uM+2EdF'#"dt=[:I^ZW#,o.J)VC"D
%;k.nL\qK-iMK2L\,&!ArMDGmZG!RQI6,L%H(eT'Cog&u.D%H:O?Ta46+@*,"4lr=bk6\.9"914/o/;$c'.DU2,YSaL*+qpE&toaC
%TST2_J]"Ns"Z`bh;9J<-lEEp8i#cMj"kCr]V#?=-cifVZEq-=L)nn0:5[78bP@r1ks(]"LOi,ZMdrU@l>ZEY/p-LTjqmAL?8UI06
%Ys>BYKl^9f;7PB)8I:bs#m&XnV3nhHpDf8mL@mA26rI2o>_<K"J*o+mVYq1I"ei*S^no1D,W&<h[A1[22=fh(J=W0uZhG>:'a<8r
%5q>A3?NsUo9rprKTu9qrU?%$,10]knWi&eYE24(fN#ELi9hrH#:PVA758t*I,/4b#-fl4u7*JMe_M2,q+egGEU[(iM?OVe6k!E5%
%@<--'L8sT)f@#WbHE@\;S/TlLWDg3[_*i\lLX[TF2^m">20ZptM#Ea-Audb80bpSWh7_DbN6-(DE9e[ADCcf.<$bSE^`.3+N^Bj[
%$'+kAae=o``9ncL<Sim&K2k;a"\(Sd*1SFcD..H6Aiu.pcg3(KZJV)[(#Ok)%>GMNfhl.e<+M]?QPeHm%[]daS"tL=bsbte+4&'N
%T>OmZX)@_Jf$&Ipc>[$2nY2s0PH31V=i`n^?Qn5(j:h+pDL]0=a0gf*bUjh`3A+=?X&M3WY+NHE)*'bKTtDId1DSHlb0#6)BLhT]
%8bQbt!],i5<;l_Ps-cf6[!1++qGf(!._&_\l*[[&I!XmX^4Q#JZmn?'[\-boJ&#I8kF1)kUTUW;c7sSZg-u<`Her7S@KOtrbrN!n
%Ae+T;^%CRns3pl*?e"nUQ@un(Z0CSt[A&\n`po]j5oLWB5Z"WiZ6NXOpAU"/;e5Pi\\/b0D`hO`\LYa:$TS^KCfP7<!o8%p@l(t#
%:Nddq)hO=:&C_2s=_5(9k#02_"kC"b>m4o"S!%&b"sZ_`)D7=M:h;uo=k$:[?7hhk#R&lW^=R`:T]1e/\jg^*$YF3\AMOM(b1u/d
%ql)*h`q="/2bYG1R]q7aGR@3]*RLQeU4(iM-/;0\F`?g*"Q1pcU^RQ#&rqRde\$??G:0spJqLIiI]B6b1m;EHm&]=c6fH"Oq<I,B
%%dPt#&;LLd8;-k^lrW6k/GI<G$\b4!Wa%'N7t5dH%Z?Q6p<BnfGs;]^=k:+IP*J25%;]X72PLPgWsip:HY%PP=nXI^+V#tSLiKm7
%A1S.GQ&-FX&TtUiHY^ET'`o8C@Oi6EG'$@-Q->u/98[6@F@I<9;7e@[EP,5dS-Y@L#"[QjBN<j"9T'o8Vn[QZX=F%#PGW*"HetEF
%*ROg^=MDN<^p90JBXN!J-4SBI+(t:4JSIg9b)tC*:iXu=%B$VV"q6LF38.g0bO]snl2,$kJLGYJ8.-Rfd+.I`TU].J:gD[cLf<+^
%B,+&,(#<"dF6r)K'bDY4!S?Yt:>j]Oa</uRU:F+hHRZR;8)IZg<3I)U0e#_kZ5?>HZ._]1<@r_o?Pe#7TUg9"dq8:[.*bMYUZ%cD
%,]rlQK)bSMfq3K7H_4DU,,TQTHB`1f1BO!3<$"l\,]>b03M7fn)R9)X;]]eGg(*MrM@6'?YA082)A[m3)_/seba#q(iQCcCAYV@7
%+1;F;@Iec*pSFf;"c@>AmL;&X*#m9m_/:C:6*V,T:#5)_<d`T<>S.rudtj?^4U@0<Z<c4!#')j[.(m`!NV0;OhnS40rLVD*+qXbe
%W0?`].`a[oOHK^bH@@:"cK<'FG\4g7JFet%"\OJld=jm3'r,7g_CB)g'dFs1o/U]2`>t..3LJeADF#AA":1YIjrm$p0uQnmT!a(.
%BdddF[A<'(-hV,6QU(>77s&_[BU)C^j^+j2-]aofD=Q7TcWg%trBh.!RkSNKNa04go=Ht.%g\mZCcR;[&JCg:3SY0CB-@i\d;PcM
%`e];K5bd)3:%XEDMr"riBGg*!VuBE_X2Pk8c63IKcZj0cP+6A(Z;Dh[,*"gVaON*]!`b4':23JAI>DauUkX[r^UV2CIIr`R)CsZF
%0DR%^SQF;Z/:o!b"$a6?o4ECENZo5jApi71n<SM00\,t%Jcq@i_?q_YL)cd-O`ld?AMPHl)7j2mE9nSbeC4g2;>uqR2>+=d7FH#'
%m*`dNTddEnm>4!'W*K&HLq2fi#4FT9)/s'0fhl5Qae6$Y@?X"n:<4J<W5gU.q3-Frb<G(7^/7A.5*VRB5(,NVnBa;D>Oh0L:q[lB
%@LX+q#^q4[;4J:E#l@k!$M?Zdh_V:n'deMlI"3co+R937U*-k!ClmTo\0@IMZ7&7p!0#<A_$2VZR_i7CZI]H/1d=f*+C\=qj^2AV
%K(1phIU6p9?q_dW9YZshmpoN7M'G\=d^]8n-CHu]A1g[Yr5kV`<t[7)rA*mdlLi8A'U"Xl6JuM!mN.?LS@TiI*j2V*3>qCjY313!
%KGRqerj0&hA6_R_oNqY.nkk%.B0JP3OK^&[f)t.(^me/7a!lZ;dp!Mk:a^BZOH[UZR4CA]r"Hs\\on[`i*+N>d)sTs.`maDVU#BK
%KWLP5]>f-?S4-s]jL3D3R8?g"4MGS'TFD=)QcuUHik;b$FMbXY>r7\YefqAq+&;k^AI@Wl/SP>,PoQNM9W:V]0pQmQ(ff9H9=TM*
%epU;-/UNI5Z,'pg4R]XqX\ei-Ti%?=Aeq1M1Y4q2B:+=oK&?/rL:1fof<uJ!HIV3?-_'sfD3U>$&gV#BR8/@f*J@VZUm'*IUo6/u
%#2*Vd7d&F'j6%HMCLc3Q*DQq-SX.90l!ejh`I*D$W^]W[M22lI0;&sa;e1H.p:Z5^F.Ql85K(*2L!g%^%*.M8a18P6m%>QN;K%:/
%0fsNf:bmD3:l2,:pQ?M_,5X]8.%j[WT6fNt[lm]mkeu[i9Qa$smaQ8\#T$!4lOkdAdA\(s;8;QU.*dTk3jh#c,IF*5l.+LY24@U)
%q`LY%cAunXc):$0ao&l$%l7G=RN.76caeHpb^@T&2>*)'.E1;.1\2?pk!0-AMB2^8;5AmYb&-mn,$OQL_)fHa9.LXAUe6aYFt2Im
%OW-06.sjE^8#1kBGA)aS\lr"PoU0q4s7GhYPoR)XF/1mS^\KQ0?8b]SYFI\hgWiUVd,diKn9:KnL<UIAK4;uB<[FRnYbR-2L)!sn
%d8UVMoAYq$WF@12D8gVLJY\Eo)[r>fedaSseQV=4QIoHcMTL@<S[V/\K7r(4?25u`YPuRDgtfZ6Zr*!I8'EGBA[Ec>BMfYWb$C:U
%N5\;MRm#]3RGs$*e]AtQOl;fBY*H`s8l</U3WZ[\S-UcDmlo]DMOC8\V@"<C6.&I=cT?\N]Kq][2t>#o?+[ef]2,dc'qZ_Z/4%T3
%h[U4Zi]q'hP6:+?b3bEh!+PLi)W&Hor!$c!+K&RJ4tN"D-&/nh`D68hDIQasY,FU1\MsrF<8Di)TI.f]Rgr_+%Md)qbJ388a(:CQ
%nB,+MX5BWRj2>/A-=QS?5j\%qM@3r!G''\uRCG:D.UpeVeW)%a+30@e=uJ)57uM+A[.B8,SGVZFD:9N]>i,Q=>Y>-_oX*V1]'eBO
%'<_<BmZ?]r'&(p:nC2:ajMBaKh!Zc9HTD)1Nb","244l+0GS%E5:A<JBF&"@,ABu9]\u9t6H:BU!a=6-!mKLm63frL7B1&JTN7\T
%WBk>gR`DgEgF,iF8ubccXYSpML"?n=M:KZV<FW1GRElY:-HJB`hCY'pOtr3;O'W;P"2n#T84/\]%m67^OprP,+G74\]tp]:;Lr*C
%Z)U:CFlo"Q4mI;r3peh/</c\bF[\i'@V%SteruKh2LjOChf=Uaeu#0(M9AA*MQ0q%&X5@K:Kh:Zn/mccEW8P@Co(p7SqH16lju>c
%BU?KDK4OY<=LP3E<FB&($J4'&f\Q'4[SSrq0,-dRq:hF==s.T)$5L21U^$BKZC`I8*l$GZ#tYk7m_dfIlW<q:3N5572Q>n+dEn0i
%-PG4qE?YLRo$OS'&C[=r6bCl&@7WEq8>R5B^nS>+E-G'Q]PCNH9t.Rnb+UR]?>p9tbfq0>[C^5cD=ICQCm<nKO<ncrVl4]q74U`O
%+p;m+"JIQ/lfrZ$ko68ghpa;u<Jo+bp9m%O1usgAUuHrho,FJ!%i^++_&q$Xn3*>h<EMpak)fK@WL74q#0N_T7_^L4Pf'p1MchY(
%:li>Z34AhYO"<%ZeC/\&HM?^<s,3<c+&SsbM9g77V'SjH/Lh_+p*jT8#R<@,X6Uj9V`Orqm[k\IHk/C@15pFQ:*ET7A*b\>/^kol
%*Q(o7].,I9U.He9br.XA59gUb)$XZ_9!)4j,?!Wim<:nBZhmutga9[PcbJqLO]4/^g)BFFFo)8pBPLFcd'UMt:*s>,=t&Q'FW<.u
%/#."(5r=W$.@#KNV^+*'X1-'6O)%dC#6ht9hXt<;G<qJMIuMU]OP&@^$%=XEQ\7,E@2LXJA0R<$.Ku$AU57&%TG[kuMj:JcE"kjF
%$YOd"#"*g0[Bu(iQ=E&mbKS"?)"H1U#u9k$W&U:%0Zac6a8!!LHI8Zuh7<-4s8DtC8;CRR;XWRVcdSgbLD\2`&l$#dKW$htNMgH(
%\8m)!^s&Kh%$[jbactee=u.Z11STb)F\R6!`NW8GaX4R6HtndM4SPmj9r,6-nH#Td>Q=;@@/h>Kp]'o9rkC1fhg'A@OmrsmNEd],
%<ThbO(mejIL)[BS<urIi+p/IB4OkXj@#>`RWu7ptG0fG9-0:pI-6Y;TF`P!=GZm9NF;m5VBrkM]"t1=/<@d1]Ojp,5mrYJjn,7#O
%`?#9LbJOH8-tgdi89d6Sls*;/5%p)L;@9@?]F7&@`4`1bO%fPdDF-YgY/dr6KW9m3ht9!W3a0l%XXg]X6oiq*EOUN?pOFC@_G;jG
%i0l>V@cnW0fNAFD:(T3-Md!g%Y@'epk$1,c,>!u\[F?bnYlR$/FHjgX&QI@4kZO,K9i[l,2RiX]:crSnnrY)$L1q)c`_`2ekL>[B
%X^7tHj98D!0rg2k!i`1q6VmrGYS\f1D<`_;NY_NG+RQN0!]AZ]CRk:PioEL+@F+C!8N;A(Rg<=7Z&,mHTA#,AQAT'BXF,Dj]9)(&
%MRcpLoM^88co$sWMJ^$Ndd1ZRb7DF$1:>B&#K[G`_B3F@gkXZU$.7?*4e"ck"TbWR5Mqp2^V;e4It+dHr_old+@0'ZTbW[+Fk2eb
%n,Ng;joie,-S_Cm1fAL-(dZa<@*8mhL/K1JoV)Z`&'ju#Xaq4&E/f3!_-P2JHN^O&b_%]ujS3&C.C=Y@$-,5*/4#Pk<DGEr8.L^q
%?Jmt]MJ)&/c3!CY)kE5#i9>$d#dr1(=CIl.cRV3F8=u-aWb[h9&s+(OK'$Ol!>Ulf/PY,KheOn(b3%I_$<ct5c2OegIRuiFUkmjN
%;PYNPQN]-WVKL^We?h6]=gSfWeWHaQcD>$P'q-8;lCjGFb=t8*_<a%q<P:D-pi7_W,CfPte:S!<=B"/P2rEk$elKN?,b_MfG\0A7
%ne\(lKKZ"iKU?^Dr*kV]_j(b\O5j&l'lBfM;Ga[bW3dWE,ik8&W6b)k2gaE(O(8F?#\Rt3^9G7G3R6cTRBR!@BB3#<:9D#;"03oI
%k228K<"6eW%+?WDXbRj[!i=u8Ln0_lDBb!2ES[rc5WW3;ZXZ@!=NJdXjOTXGU`;PIb!D9$S7rk5lg,jkg8'P]N;94,?hD](7VUb!
%YMO0h6#G8C-V?$AcmMd_H8?P$l0,E^ER)9ChgM%l@QRh=0K6H!$Zi-"F/\@9a)bp4$p,ZnhX3EJRU'snKT1RDHCIE3Bku"`+3DN*
%jL:+PJmZ!LB<;3mQ:iP='Ok^apgun)8%n;VWF#8Y4:*Jab2QUC),47-UC^>5U].TiVJ=BmE$4MPnQrTn6\I`#SboVu+/Y;;)p\uQ
%0k_@#Eclu/b+W[k>?2P;<lpZ(:jS89Qc=:nc_G)FC"M`i$9!r94,f]DKBcc5"3-I;9B5GM_W%7XQ29<qfuZr\gRS0".pd_lc\2Tt
%e'Lh<+GQLA7]UrJ6F"?D:mO1o?'5Un6S%TTiYE7L.3&`g<p$/^buou>C:>3`[npKiG/U,OTKBS='hJYQaogTP-!h=_\js.QRKNmi
%#o,TP5B<0(h9`7a&4%s3"&Zi^?;Z[9f..X:g*`XBGm'C:?BAb+ONn8hMSDof<?L%'Hep@%Hr`%L2]4t)a;gapF2-*)hf]"p?6@$'
%">F3^\*kSmJSClq5@N+SYC2U:k1;=,I((cj2;:c#S,=hlb?HMQ^WN_Z&V_d##S9n4hAYZ^31W]dr?&!]Jk27)2\FV-2(L+H$+7QB
%4R\P_MD&.$W""BG)CI\*$7p4H9#^SP_aU\lO.BQE<QUe!feWe!:'2'>AHgJ7/Fs5n*8.(%)rV@M$XK\NkWhjni$u26/S%_pHQ`Nd
%U9mRh.W!5*d;2hX_l,$LIgJ&Bi;D%ohbCi,2&f)B>qs#9Pf6Ws%%u'IW^tUL&j(=(aH<,DXm#?`iI<`B+SP9IW2'<h"-k_[#ph/_
%_qjl:HK[$*G5f1h2H[Y'7,W+!AqT94-ke0]7>)HRi*&pW<Mh$gZs?5'S>6o`P3b(NTgVdCIC[W0nrIY0VCjCPFqZDm;@,ZtL3S8k
%Cm7es\..a``3CYu`_5*Bo;&/^5c0V)I`Fnjh4//B-)cKmU`;R=5ca0sg?f,.D:/Z%G.;>'+NL`XHi4DrQjS7G<^M>?OtKQ./4=CS
%/2$m)3b0CuOaSB#dsnY/EVT/ZXAG\5>6Q4^&?UQ-dUTEEbs.@3XpueA]WKpV6Ig0$s,0YKkC63Rl$qqdl_Al5UIZ)YZ*Hs'Cf46t
%nMIesQn.A)kpcfN55UGEND3e-$d`%*D7_Ya?Apf]puAOs*ES;a[Z@(U+!N2Hq?*HIdc`*K\:FA3=FY/+cH,@S4Z)36"=iI#7Z4X,
%e<P8besoq$ao9sk:M\PB!9qZ!"Y!#7=ZObM/C1=,MHllP=eg9ZZ'?Lkd@(Nt;W_V][ITV@^HN\h>@XE3&c!e98mT>bR%;[@!_m!^
%:j>mq!@bnp8;U:gWeg_<"nFZkh+&KhS6H^3'9nh5P>d\W#b!h]ECUTGW0I/N1=_op(RcE3kN]-!Tr-2IT]%3'`T))Z)?H,c@TQA\
%:CD<IcT$5]K&dj"\Le&N/TsIC[B48Yi\VT&@pQW[rYuEqo8$7pW$59om*HPblP,8@l'p[-V'P@So%j)B8ZDg[r`C:U1Ln4ue,C7u
%VeE\gLgXNLH-ij,aN8-%id*n`WFRFQH_g[sn5KaP(iCXJ9&nW.alCmS4:Uu8F5gF%K0L=SJ%`%8q-RlD^Y2fH')=_kF2-iB41t5*
%AG+oUrkf\%m6)^O<=g_U6&@=h'[/L>oKRdfL<S?Yn[*i-?,%4N:&TE8'4u%8QKEc;Z"bq/E:EHmqmEQ`2r-t:)ZO?Pk]uYiZc=#i
%rA;/,qp$2.#Yu?%p%m.9e1n94PI3OTOo>>+7D?:`dp*%7aqh*gE:P_#0Dt5eSg^2lK4_MZN[+Zlo=Ui/_*hPmQ0A-&mmpoGarl?m
%qgk2&/V^_&Q&(?iQ;$uP5Gf*4onp^\RUcV)fM!s9:2nQ:j2D8VjFl`u,7,Vk:fa#t!)\CVAkAb4)QKp_6AUj6=j@/P(;JRY.@9Xl
%iKO4pnje0b>-dj7(pn7ckX%D[SkWb]!aVuI"0(";j--<N)<41%EL+\Z!:!8ZqV3eX.mBejDWb;BLQe=h7Y):bXE]kD0:'t3"A=%L
%W6KL7KuA;1CDf1.^S^5>(*t.k=g\F0E?J&5=#9$?X7f=XKLq&-kqM.=WMV+L[:Z&kge0J0&RY.sM*T5E>(eq@\?q$86fPH(ds&;s
%0mj/L*i^Wf3Jh(@bKP^^f9pH<L('^<fHT#\5JQNSqfYqFO;ZCO0CS=QU#9hoqfaM+)PPtuW4&@<S?g@-Hr[*pS=8Q7=SYqGOi:,7
%DD5id46b:-da`?m!/3p@5^4IlmBT7f&#'q\o9hYBOYIO<398ssmQcKqUM)0I:-9lHS4J<Tlg/c7r_*.FNRCBnR&kekakC1mB5dV;
%boZgu,`I>[I[rm`S*/hPim$.+PTS+@7Z2aNBZK_(Wgfm"Z4j^D21Wg]a=P4a3&KBUBJJ^^R5J8`V3E#RIJmpOLk&OOH0u7r3C5D6
%GNa#&'O@F0M6I:)+mI[,b]GTVS*LG?X<(*fp$T2LD36)Z9BLJfbhBRN2`'`;lUMS-O>;K=QGlj*3LKsA;:h*6WhRGL\9<VY55F<R
%>?[H026k-!3LcT(661h_,F@Bt*Q*2>pZMMHhDMLb0M3i^0<JEZ67njONDT<u[6Qpl*(<@$3D4$B$_bZZX%-AciHOlY#]2Boj1:GW
%KZppDjOUKZF)jA6rK*R`A[AlQ.(M-[XY#,fF`.R7P)Pp[psC2CH?qa.eW']*!&p,i^=D<sJiqEhDm[aG'.+:DV6eb6c<,r0=gitb
%(CkH<V)$jpBIn!j%<rH];PmGZEQt-Mm#F3b=^AF)WDU(-"=eKfd\RK<'p,5Iia3h&j+;'@[mUa4MQFegUd+kSk552XpEW^$rI-%Q
%316U8-,[EOWNXYTT.,@d^8Y.9%a4&s:FOE>8O=Y#8M7VL^ub;LJ*h1NY(dJ8%S+po'J!7p%`&C;l;A*M[&l^(o&ffWd(H_XDgMB+
%YO5&uYt/5Wf70E7'"dWgj!Hn#<IHBQbYgDs>d%g`&@Wn"]-EMnCh5XLC*i.JC:Uqn<K3_8Q8p#cIC7!NUplYb.\<WM4tLS]ot?4Q
%YGYlGC'2%-op9>tWsSSXnt+I^OdK/"c)_sWE)oQFOn)2Zc1NcUiFkW:$K;t"U`"uo^Ij*!kZ('A$JU80b\,_16;V/k5sb=LmibHW
%S9k&C/KE10MSRYdO7QB\(&FKQ%K6gSqZkHF%GeK-Vk^$]8sq#`?r(0gQu=)q4WtO-ZUhd?GUP/N1JN8Rf5KS6<mECT#fK!H0WSMU
%VA/%0l!mDlfWW6,f03p@W3Bb+R3Hf&n9j$sVSH+GOU?E8qoEfALJQJeha\8RRJEN[Nr>W)'bCHK6!ijoOfjbQ%!&AP7^<dkJch/&
%Y7-:h-.A[aQ@:acXOqCc]UnJ7";J>Q=olqYFcWTda!Q8c'CTd90Te3kLmUm!2lKD<jjR.oo9/rQ8-$#nW#]MT$,%J.!tV^D6r%lI
%ejNI8\-OPi5?uhNU.g^9STtFG\9Ncc8h\YDMEr(pIUgFYW[r=$bV/OuWk$nm_9d:%)WZThb"G`a/cB(B_71b>kTXFblDEJ%\DKQC
%$!n8S!h<FE79"Wu9XKu^V#/K!h*5r9DhW2\'l$tfs8VphmRLDXpJB^9hBKV!cPgleF2R,V@X#S1b$82so;\.k3r+8?HWr2fc/:]'
%GU44>GWnR%J2>XO>YES+;2La`fG-j*&OX^_hkiH3&L@@6#`mKl;ku$`E`rEf>t-<+\KC#=];`p38h%9"?)Y"b[t<,E1c+U5Icmo$
%C$8f,I]DPoYF>If-K2"dqI6ZKQMV/i"qpAR`F[6.XK"F]DC5K(d[r;H"oi_9F&\6)66>)HU8\N,[._OYDs`$m_u@`E(A/=!'>/G)
%8VeR`8NFk+"s"n>S<4>5$amk\i/'rb)#RB@8(m>fX_P1D!bM^R-t\b:CPB&"[$mQ([]?qr:A[*4FN>XRB>:$UVURmH2a)BoGLRGQ
%C;k5,D;emH6BMe^eFa;":",<@M7LjnAIKpi(.^O,ec0A-dJ=V^f['kGWtt5^8edg!eZUFuWX6G/C%4+lKHHUgfq)QU796G$^'JP#
%o`oG-L[QAHh3"8s,n=h>j]F02mpq"mZq[(X_N?EpNKX$`OE0!<1*r&]-GqU%A?,,M*G!h,ebA:@=0k7G\2,d'Wp%l@0pNfTW')SJ
%U`E+$l+sYBH*9:qb2LsJ$B+d4!Pm;dHdMk8&,K3B[HR4L1&R_R?F8TKQ/Vb)mCCGhpRC3bZ93\md`DPpU(qJLd(e\tEa7>GXX-L8
%%$4qb7J\8+]GN8'egU==EB)%b1<"W4.P7O[JZO-qbbh`=GrdO((c=Sn3qSF&7pD%4kQ$<k;3@8?80[IYQZjcH`]hNFW]`df5Xf5F
%P<aKC!Qd0O294cXjQSH!(a6'NfLd19<s,T?i.Qc:)pQbU-FmpDfSVT\5XOlP:'rorXL]!^=J6dWJPF]QA2c<FDL7d/9JoL$)R4rP
%3hT$:!6$Fu+?:G;Goo6Do6]6"9VcCr/)hpNF+1-N4[4Hj^u-HV_![Yf409(!\b:Ono5r5R^S*KT#MJ9mZ-(#JpL52[25MWoQ;@#T
%Z^`",[7ag$loONd,i.MeK:n%>HDP:cO<)_$/?grtJk:`cQ)sm3Uf)/dh)a88c0I?`j_B)no/F#OIkhjU5h5hRqZlZABpr*Tq!MdU
%*K9R$RV)DSa.]$@#8<d<XT=Nd[\l;a.E70t7fAOL&4L)3SZ8Ci*TKlT&_@Z;?)eK%:G]t#_>Uib)Gt4pAZG$7L7t21\q`0PB/>KU
%aVE@c2bUkS(!cZ,jbji2j9KX=s!EK,g>f?18g"%bqAg%m3>p0mE-'T5^.V-cT4L(0l#4YIWP];q`_[j8/18f^pnJ?m+O5PlrL"ib
%P-^pKBC5N-dGMQ;\+o9hb_`X7Cg#=K*T.F9ccU882#pMk+l_8K&MKn-TEa=^%!el>1RQq<W<U^(?;tf274t;iX2Yq7e/[WFp'=PS
%c;r$@=(ioP>udpS*Pt8r_UW=*nMJCV&7\DXR_DG;8&>hfg++!bkp,Dt`HE"]Y0+7VUlcJE)e-*eeP6n:92oTmaDb!lOLsYeL/68T
%=]U_lj/bI\eE8F`mTh?lV`eBdnUt#Sm=8Y4g#FVD6Z%$)7]]q=A9-`'R:CeNDW*JaotQ59Qh1pb[2-Yh7e.TI&^DA`$%!MsK,?&m
%8)gUNREb6)5l_sZ\/i1'DFN#%YH+_,rnPYE1$`H*[c&O<7g9>cb-h:59%*'t&-2")k/Kj-'uei\&GLu2"-!3<jM=KATO5Tq?/<F:
%ZJif\%m*as_5RV08l+bugV2m'^L@,aNP^W"s6PXjiallK-d9jPF-mS6i87.p22/$RRUu%Kdm@j="7!ur`?NBrjj?+&__e8LSMG?t
%`ke%1Yfdg>-(QhLjt]`<$p&i:a"!\(5ROR7bgI3)>KoOc$IbVe/>8dtZrWfnH"UQ)knq%X%no$PqY4j,hhQ4LDN,Gap?k(A9EVG9
%$&UM&)jL>TZ"L$A>j]M_.A;.+JBt+bAZ&HXNOC);l]X%XJhh(\qhZ\#B97";?eE_OO;<jo-`ci;9L#M$dO(Mmpo]HK2S_3iV:Er*
%`L5.V6n4gf8bQ(de]c1oNXZb<I>/1XF5cifnXfWoQ@@!X`eW,ihIQ*3-c%oYgA/grAkUDG&]E(BFSPM%aA'UX'?\lIG)4RNKujM9
%<UH=!<76K&i`KuZrlg0;,CV5\#/30g)q1.9Rt]6d9O003@P;LW37Xi_EL@h&#&],%V>uEtiKB]M:G/C@#`@ZP`/Tr6gFX,eWFQrk
%jU8\Gqls=M;U22>0]UZWF[%_>a(XW3X@6JRr;Z[0/o_N6VJ"M#,_o1.ft2$lq!n7\UN9I6<kS4Ls&<Wfh&/_laL?(8*;r)r*iE:4
%^>ecN1P!GXKs1>Km49Fj,-)/;c-da:$<+g%S;#;408>>F@$goHD:1'V,6d]6]3WTE*&koZ+,j*"gH(=&^5gPWg>RA!mVN#]/@p.S
%n[i.a)kLe7AUk?T-2r"A,!a_8m9U:7kR\_<51=)"$-6XR3sqo]D;O<kh#pat,V.LU:Q7LNbIpS;O"e0o8+R`2OE9"!JV(]=N1dYF
%P+hFUs-1Q3qd_%V`iEH'6QQFGOfY^M'rD@dM'Vm\J'+]VOPWZ4O&EUc6%"O>j\R`Pi;^LWKKm4#MX[rDcf4Ik%Kht7*QAWfYIrKg
%)gf7XIo_QWMM5RZOL!8!UgNrNG?.`QVb9sS%'`*>?6ICL(^&HsCQUd8Q;-i6LlRfpajH=Y?-T",h6)VFEM\iV$*T1VB.I`7-l.8T
%W&MmsC:6FbO8fdQ^ES"A[NmHc=sN'I_[uk$#nFB-G7,c-'(D!q<LGH:%MKET3Sn%H;PfH8bU'CdUHJOYUm)jYKirZAcVns)]J'+$
%^2(.+q$Cl7U%I<(mKdG7$Bg2A+k:\(fT+ER+dCJ[.EeprEF";[5RqQT]*-Z$[O-jX%b:N?kY6Z3SDpj,-l_MtjlJLhGu-SMeCFtm
%%',>$H<.kt%(H1k$Ch1(.:Y;OGN=6rekm#RE"qbsKL*TNU:noD-oLSG5lCO;06TeLVsehrq>+NX_^-8_pX[DI@5j_!V)ofU[<dOs
%*HRigJfY7hJLVj7qT[L+Jukceb7n!0h$5),`qEF!8.k6lO@a&Ph$u$Yf=[:r(6n$Q@`?e^>(Wk;'hWMj4R+upCCah!%)!!^/3(et
%1:8)W1l%#@(ZH%L+,c1Pp>)0<U)=XA$-VIYhDd1Bn.ude4Cs>=ga;4,7!]0E;N@;[`$pg2NKs0ldQUEL8b\jVrJ:BN@a:H_B0KTl
%$fr3th4,`jit8:`>-U=lo_uj/dT+"o'#f@+../&;SI#BC(!a@8^D2$X`B,\F[@c>$=f^0G7?hhPCFHV).^)2C+X,W`?M1t*;L_k$
%;A1.m"7l)B%q,>/l_a[H(ABIa+0sd;H'9)uFFrSsD%U=6.$09!JN?q&=Z+DRmZh81BAXY"rcOXi65N7.)MksFSr\M&qp6rm9jpN!
%kf=0PfI*Hf&VFE1gM;qR47$TG`$^)@Wsu#hp-MnBfp:i/A[(GTn[OKjL^9Xp-C%YnJga7<^cC<'Rmii4X_8mmaWNJ!Wqip!?FT/X
%-"t$XRMC9jC>>UIq8MQZZf+C(DR2aAS]Jd#lj-Po?BDpSRR73Wg2jhZ+%T!PH<_.$-<Fg++AEHsm'ONIMN93c.rJ-N_FKoO;56PY
%K#m\Qg#8VC7<>)LCNhKWfoa2b"a)-+ao8d[CO2F",:`p\-4a+KM2objLI';fDkH5GeMO;UU(,(7pT1c/2!^4pcI6OYMOF4()Yrl@
%#VhXa!,mhAo4q:)h4FcVH@=@M2qIN+5!:5sNPrRFs7lBUAHMcTE3Jt[-%'jKXG8/f6dG-b"8.rjO,=HnrV8\5Lo\+..iKX>%!I\t
%!'q;X1=??eESos7]4hdiN5Q*7Y*TcrWKL,uYYg)34NOY<'Fbb2Dh@\$OigkGZpTV-)!(6%6naB1>(_.%PPX60d9f9ofjiZM7X\>2
%X;Q]p,$`0H%klruk+lXo%h21QOs-IEC.p+e7E%EW,I_n0i<<pRJ:h8XqGNhUrg9[f'NaG'epZB]?gZ!+$7p96S)W6kR5OW=/A7iU
%p[u^2X(a.qT=5=#YQX5-K@dKV%k,e9'LkYi+V?W!;]$p]7[X='WQJ$@c/^!>LHr6#.LW)f,s'uL#_X\I%Kea4Ia9h$G[.^)&bW_V
%$Q1/F"rTM[5<I>MI.kjGXB[E(N4$m;'OMFR,')"*hqOmNc)@u3T`Qb73,bfkVZ@qsQ$dHi<Rb,Mpp41E$4_-e=0M*5]UGZ:+S-%K
%eLYKN)<>=)DSafB<e&sf+.kO#eG`)N\i-W*qo*6j.k4a;:/u2%2,\b.?C6o9Ef\Y:[GpDFS77ag8<nKs[rsoQWF]6X@7J(j<$S.]
%H9E;&@Hdo`$95&kKsD2:U=2naR$,i.bP\Bi#kK4NG=Ji,=2!2NYPn6%XBOLD-/diCT9i%$3-fHQg'<?KA+(XP_81$W+RtP&L"^TG
%S$rGB0a8b'RKD02CXe!\isf_-K$A^I=NAXdQ(Sp57j(1lLi=+&\3q'u^+XSD99=NRfE>)_6al)M''4>iT@?PsJ:#Y>:Zu:Ra[)*/
%d'8;HX#q,RnG5^2qLOBb."bH9h'/ls*p+].Y!)1dDi\h$]dWArRt<.H6sHC:?hM8pD.DJ;mboT1,8LURfCn.EK1FUipn6&k2';;k
%[F/DKRVX'Or=UMYkRh]YNXh>mgqQ/N(;][!QT<E*^J$WF+"nW0jjTe4rTZo1)X)Ia:G:,jPl!D2558.$I'r2\C"%S*PktEfGBLT9
%gJIOU5lX2Xned$(,uX;<3co%cT^/lbh4=g&((t,7?._o0rqkrMF6PZ(*8',PX[!tV/]n\TPLR;/"$'7XTYm!:m:ni&o\KRO'%F"S
%J&kRp&4KJ`5gm4:!^o'%4TPAX1'^F)?J:AeL=FW_%W[Bm<Jj=P!0@c1]SNRM#o^n:6n@aBJWfCc9#L,@dUGc\W/7_N5s1fRY^/\f
%BM>C,3QH^NNfC=-;OfHARtMBX<>m0.O8:A)K"]\hks,9aBU%+Gd,\LNP`5[J_p,oB.Bdj)O_AJWUX<Xs[;;bmICGMZ6Mt;5hu.TE
%IdT\#GO9M-GOtRrD.e^'bu;<Jc#;A9aZ3Db*fYW9c)9Cqj&_a(fNCa#.$%+V]=-VFi3FA!mM;Qp@80!J*r\ddg2teT2ue%!oNMiS
%FF'9bn^%2:bkes5e';'2GWEC*Ne]90/&e1ko.LU*G<T;M*.0r@/15<7o3FGL\'q/o%.<WS*'\pCB,\_+0$!G<B=Z,j6[qoWG=\K<
%s+`-iQc7A:S([.rU\i`pT3iq'K6qn:i"Ou_[p7FpDK:/hLV*hpZ39XrV+:NoI-'Lcrqs$n-KF2^:*"9Nb<NB*p3*_&l[6`#.'<R[
%naFYm'@W,-WJDajEm%`W+=rOO-h&ZMGB3c)1)>6g=hA23(a)aDmSV]6A>UaJ?4;RC/8!/b/r3@p.p:HD&sAcVfIuj(a23BZ/o.dr
%Dr6u2\9q%MQ8?R^8?X4C86IX;<=Emr.]jZjEu#K@*%C"r3ou\5W2UA3!Ea.IN^g59d)_LVB#>S=7nfu6f>EV`ZgYWAKjqMoBl0Q:
%(]>CJ`GUmXpSHmH;Xo6B.KIE\>7^^FQ\n9S:&>S3="k)t^kX,;)tH>3qh7^l6#]@Y>P+'U^mYsC-1Gg=$A6KcKp<;riR+'c?-p<l
%+^BY5$>)(jq0!K'LIIs>-JUI(5(e%hB&fj1MHnSK%Soq2me]ig"d$IJeEsO@^Z):j)9=Id10HK9:EY"18m!oAJpO)7U&'r..;COh
%YW>+MVUEnE'#S>]]L]:OV79:NJ$8r%,_L4@25Xn"(R0rS8k]^QQ;4mp5@YA"cX(;hYcsK_`rcmR'piWZRnOT>F[KPu[.1-b,u0V#
%\ngRF)4/I#HnkrH&l)4k+ng7*[jc9QVsp)#n$nuXIjW7=+^H6jUhV0>AOF<;F_7fFe>:$nNlN\/(+Fh1cqA7DHp*'4JHJ]9<]=o%
%o:uV8bHU=B\dD?='LfKn6OcV?*ZbR(i?;gA0s#V.b=,:`%"sL=Y:WieB[fK+a\_,Oa5fH(''k2c-LKq>E.s.:T3AdWdYjC8/8*Nl
%kXhFC'd]mn7QtjJ[X%8P!Rl5:6G\B"&kNX_:qd#tV4M`>V=#HfUEn3,1,=p!M7$/50R1b-$=IHHeFLHR2aSLeKN^%S>Ui&lHo]X=
%OrQ^u2B>11H1P8h!'`gdgg!;eX!b)cJeZHrQV1qs;M9YtaP"aFU11\@itF3b/1.2k]b8]9N)V)qrPCTgoW-qo4<_P.4ed[>_IlT9
%i(B\\K!B(O/!M=AWFhs@W1W)=BI0;<-eE\=aWUNQAJTpB7:X?m1/`E9[oe`*UM(,t&LL%>qFceQ3p'#ZNl]gN."qRUkZui>eT(g"
%&ijUHXYPY>B+:i6aWGWQXah=mS=LfSN2[,XVMR/?JD\"G?9h2+6m+gc@eaT20GRi\)hJZq\jFogLGP/QdQ'8q!uj^M/>QH.]Je`T
%4G=u0-]PNsE%PNuXJ"WUBcU+Q73q]@*3"@8Yd-7rqCf,RWYiq"ICq`RCXj,D_0c1]!R$Wl$.P&oe3(Yt9NKk[E',<2AJ\"O-8#=`
%/^B,K"pmFEiad._JjX%8OJ?LTKa&riEo4^j4/n`"mOrrMU3_bJRd@ns.>Xq#+%Km[4>gABi*TO.T*<pE^bMm"Skh^f`ChlLW.kbe
%-t&l0nl8iKo&G2PVs8<$2CW%u[%@gZ/3"lt6hIksCJfbTCJ=`H@II7<I"aU/?B.Dk^.?a.U3)GD7l"!8"s@Q11UpoPL"rROm(VEi
%l!d<SP,+O9;3RU[+,VJs$.j-QnaM_m1E0C.QjB#QFYqTK%;T=PaMn\3=sN$[#"6^ho/;1(SnZ_Tm/1r26LBKDN]_Ru4c;(hfV0KZ
%b*UPu?5N&QOF\AP-[FQZ8?4k]"$]qZJ_US.2UR*s>peZ+KNQV0\LM]tEChthP)q-S;`Og38@_>e6PE0_`Y[oD7dK--$u&78L?B`P
%pi4pi1&#m/e.Mf:PnsDYQT6?W!)jYdH*7je5$5YcVBXq9q$(J<>n&7k%hk!o`rIniBJ<)*G_d@T`"Fc=XFamC(bTh",4;qsqSeq4
%Q[O$`rVgt$^1b9)o95@]E;ZECmQSqN8`.d"^UdaYpYA\.SRR**I3-*`\t4,(j_Wco/T,0-&4*'kKB)"$5Q1BReR(N0J(+~>
%AI9_PrivateDataEnd
